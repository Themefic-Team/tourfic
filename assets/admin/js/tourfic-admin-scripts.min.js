/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./sass/admin/js/free/admin.js":
/*!*************************************!*\
  !*** ./sass/admin/js/free/admin.js ***!
  \*************************************/
/***/ (() => {

eval("(function ($) {\r\n\r\n    $(document).ready(function () {\r\n\r\n        // Create an instance of Notyf\r\n        const notyf = new Notyf({\r\n            ripple: true,\r\n            dismissable: true,\r\n            duration: 3000,\r\n            position: {\r\n                x: 'right',\r\n                y: 'bottom',\r\n            },\r\n        });\r\n\r\n\r\n        /**\r\n         * Delete old review fields\r\n         * @author kabir, fida\r\n         */\r\n        $(document).on('click', '.tf-del-old-review-fields', function (e) {\r\n            e.preventDefault();\r\n            var $this = $(this);\r\n            var data = {\r\n                action: 'tf_delete_old_review_fields',\r\n                deleteAll: $(this).data('delete-all')\r\n            };\r\n\r\n            $.ajax({\r\n                type: 'post',\r\n                url: tf_admin_params.ajax_url,\r\n                data: data,\r\n                beforeSend: function (data) {\r\n                    notyf.success(tf_admin_params.deleting_old_review_fields);\r\n                },\r\n                success: function (data) {\r\n                    notyf.success(data.data);\r\n                },\r\n                error: function (data) {\r\n                    notyf.error(data.data);\r\n                },\r\n\r\n            });\r\n\r\n        });\r\n\r\n        /**\r\n         * Delete room order ids\r\n         * @author fida\r\n         */\r\n        $(document).on('click', '.remove-order-ids', function (e) {\r\n\r\n            e.preventDefault();\r\n\r\n            var $this = $(this);\r\n            var post_id = $(\"#post_ID\").val();\r\n            var meta_field = $this.closest('.tf-repeater-content-wrap').find('.tf-order_id input').attr('name');\r\n            var data = {\r\n                action: 'tf_remove_room_order_ids',\r\n                meta_field: meta_field,\r\n                post_id: post_id,\r\n            };\r\n\r\n            $.ajax({\r\n                type: 'post',\r\n                url: ajaxurl,\r\n                data: data,\r\n                beforeSend: function (data) {\r\n                    notyf.success(tf_admin_params.deleting_room_order_ids);\r\n                },\r\n                success: function (response) {\r\n                    notyf.success(response.data.message);\r\n                    location.reload();\r\n                },\r\n                error: function (data) {\r\n                    notyf.error(data.data);\r\n                },\r\n            });\r\n\r\n        });\r\n\r\n        /**\r\n         * Tour location required\r\n         *\r\n         * show notyf error\r\n         */\r\n        $(document).on('click', '.post-type-tf_tours #publish, .post-type-tf_tours #save-post', function (e) {\r\n            if ($('input[name=\"tf_tours_opt[location][address]\"]').val().length === 0) {\r\n                e.preventDefault;\r\n                e.stopImmediatePropagation();\r\n                notyf.error(tf_admin_params.tour_location_required);\r\n                return false;\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Hotel location required\r\n         *\r\n         * show notyf error\r\n         */\r\n        $(document).on('click', '.post-type-tf_hotel #publish, .post-type-tf_hotel #save-post', function (e) {\r\n            if ($('input[name=\"tf_hotels_opt[map][address]\"]').val().length === 0) {\r\n                e.preventDefault;\r\n                e.stopImmediatePropagation();\r\n                notyf.error(tf_admin_params.hotel_location_required);\r\n                return false;\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Apartment location required\r\n         *\r\n         * show notyf error\r\n         */\r\n        $(document).on('click', '.post-type-tf_apartment #publish, .post-type-tf_apartment #save-post', function (e) {\r\n            if ($('[name=\"tf_apartment_opt[map][address]\"]').val().length === 0) {\r\n                e.preventDefault;\r\n                e.stopImmediatePropagation();\r\n                notyf.error(tf_admin_params.apartment_location_required);\r\n                return false;\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Ajax install\r\n         *\r\n         * @since 1.0\r\n         */\r\n        $(document).on('click', '.tf-install', function (e) {\r\n            e.preventDefault();\r\n\r\n            var current = $(this);\r\n            var plugin_slug = current.attr(\"data-plugin-slug\");\r\n\r\n            current.addClass('updating-message').text(tf_admin_params.installing);\r\n\r\n            var data = {\r\n                action: 'tf_ajax_install_plugin',\r\n                _ajax_nonce: tf_admin_params.tf_nonce,\r\n                slug: plugin_slug,\r\n            };\r\n\r\n            jQuery.post(tf_admin_params.ajax_url, data, function (response) {\r\n                current.removeClass('updating-message');\r\n                current.addClass('updated-message').text(tf_admin_params.installed);\r\n                current.attr(\"href\", response.data.activateUrl);\r\n            })\r\n                .fail(function () {\r\n                    current.removeClass('updating-message').text(tf_admin_params.install_failed);\r\n                })\r\n                .always(function () {\r\n                    current.removeClass('install-now updated-message').addClass('activate-now button-primary').text(tf_admin_params.activating);\r\n                    current.unbind(e);\r\n                    current[0].click();\r\n                });\r\n        });\r\n\r\n        /**\r\n         * Pro Feature button link\r\n         */\r\n        $(document).on('click', '.tf-pro', function (e) {\r\n            e.preventDefault();\r\n            window.open('https://tourfic.com/');\r\n        });\r\n\r\n        $(window).on('load', function () {\r\n            $('.tf-field-disable').find('input, select, textarea, button, div, span').attr('disabled', 'disabled');\r\n        });\r\n\r\n        $(document).on('click', '.tf-field-pro', function (e) {\r\n            e.preventDefault();\r\n            window.open('https://tourfic.com/');\r\n        });\r\n\r\n        /**\r\n         * Generate & set unique id for hotel rooms\r\n         */\r\n        $(document).on('click', '.room-repeater > div.csf-fieldset > a.csf-repeater-add', function (e) {\r\n\r\n            var repeaterNumber = $('.room-repeater .csf-repeater-wrapper [data-depend-id=\"room\"]').length - 2;\r\n\r\n            $('.room-repeater .unique-id input').each(function () {\r\n                repeaterNumber++;\r\n                if ($('.room-repeater [data-depend-id=\"room\"] [data-depend-id=\"unique_id\"]').val().length === 0) {\r\n                    $('.room-repeater [name=\"tf_hotel[room][' + repeaterNumber + '][unique_id]\"]').val(new Date().valueOf() + repeaterNumber);\r\n                }\r\n            });\r\n\r\n        });\r\n\r\n        //documentation link open in new tab\r\n        $('.tf-go-docs').parent().attr('target', '_blank');\r\n\r\n        /*\r\n        * Author @Jahid\r\n        * Tour Booking Status\r\n        */\r\n\r\n        $('.tf-ticket-status').click(function () {\r\n            if ($(this).is(':checked')) {\r\n                var order_unique_id = $(this).val();\r\n                $(\"#tf-booking-status-loader\").addClass('show');\r\n                jQuery.ajax({\r\n                    type: 'post',\r\n                    url: tf_admin_params.ajax_url,\r\n                    data: {\r\n                        action: 'tf_ticket_status_change',\r\n                        status: \"check in\",\r\n                        order_unique_id: order_unique_id,\r\n                    },\r\n                    success: function (data) {\r\n                        $(\"#tf-booking-status-loader\").removeClass('show');\r\n                    }\r\n                });\r\n            } else {\r\n                var order_unique_id = $(this).val();\r\n                $(\"#tf-booking-status-loader\").addClass('show');\r\n                jQuery.ajax({\r\n                    type: 'post',\r\n                    url: tf_admin_params.ajax_url,\r\n                    data: {\r\n                        action: 'tf_ticket_status_change',\r\n                        status: \"\",\r\n                        order_unique_id: order_unique_id,\r\n                    },\r\n                    success: function (data) {\r\n                        $(\"#tf-booking-status-loader\").removeClass('show');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        /*\r\n        * active tourfic affiliate plugin\r\n        */\r\n        $(document).on('click', '.tf-affiliate-active', function(e) {\r\n            e.preventDefault();\r\n\r\n            var btn = $(this);\r\n\r\n            $.ajax({\r\n                type: 'post',\r\n                url: tf_admin_params.ajax_url,\r\n                data: {\r\n                    action: 'tf_affiliate_active',\r\n                    nonce: tf_admin_params.tf_nonce,\r\n                },\r\n                beforeSend: function (data) {\r\n                    btn.addClass('tf-btn-loading').css({'pointer-events': 'none'});\r\n                },\r\n                success: function (data) {\r\n                    console.log('data', data)\r\n                    let response = JSON.parse(data);\r\n                    if( response.status === 'success' ) {\r\n                        notyf.success(response.message);\r\n\r\n                        setTimeout(function() {\r\n                            location.reload();\r\n                        }, 500);\r\n                    }\r\n                    btn.removeClass('tf-btn-loading').css({'pointer-events': 'auto'});\r\n                },\r\n                error: function (data) {\r\n                    btn.removeClass('tf-btn-loading').css({'pointer-events': 'auto'});\r\n                },\r\n                complete: function (data) {\r\n                    btn.removeClass('tf-btn-loading').css({'pointer-events': 'auto'});\r\n                }\r\n            })\r\n        });\r\n\r\n        /*\r\n        * install tourfic affiliate plugin\r\n        */\r\n        $(document).on('click', '.tf-affiliate-install', function(e) {\r\n            e.preventDefault();\r\n\r\n            var btn = $(this);\r\n\r\n            $.ajax({\r\n                type: 'post',\r\n                url: tf_admin_params.ajax_url,\r\n                data: {\r\n                    action: 'tf_affiliate_install',\r\n                    nonce: tf_admin_params.tf_nonce,\r\n                },\r\n                beforeSend: function (data) {\r\n                    btn.addClass('tf-btn-loading').css({'pointer-events': 'none'});\r\n                },\r\n                success: function (data) {\r\n                    let response = JSON.parse(data);\r\n                    if( response.status === 'success' ) {\r\n                        location.reload();\r\n                    }\r\n                    btn.removeClass('tf-btn-loading').css({'pointer-events': 'auto'});\r\n                },\r\n                error: function (data) {\r\n                    btn.removeClass('tf-btn-loading').css({'pointer-events': 'auto'});\r\n                }\r\n            })\r\n        });\r\n\r\n        /*\r\n        * Author @Jahid\r\n        * Hotel, Tour, Apartment Duplicator\r\n        */\r\n       \r\n        $('.tf-post-data-duplicate').on('click', function(e) {\r\n            e.preventDefault();\r\n            var postID = $(this).data('postid');\r\n            var postType = $(this).data('posttype');\r\n            var nonce = $(this).data('nonce');\r\n            $('#wpcontent').append('<div class=\"tf-duplicator-loader\"></div>');\r\n            // AJAX request to duplicate post\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: tf_admin_params.ajax_url,\r\n                data: {\r\n                    action: 'tf_duplicate_post_data',\r\n                    postID: postID,\r\n                    postType: postType,\r\n                    security: nonce\r\n                },\r\n                success: function(response) {\r\n                    window.location.reload();\r\n                },\r\n                error: function(errorThrown) {\r\n                    // Handle errors (if any)\r\n                    console.error('Error duplicating post:', errorThrown);\r\n                }\r\n            });\r\n        });\r\n\r\n    });\r\n\r\n})(jQuery);\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/admin.js?");

/***/ }),

/***/ "./sass/admin/js/free/backend-booking.js":
/*!***********************************************!*\
  !*** ./sass/admin/js/free/backend-booking.js ***!
  \***********************************************/
/***/ (() => {

eval("(function ($) {\r\n    $(document).ready(function () {\r\n\r\n        // Create an instance of Notyf\r\n        const notyf = new Notyf({\r\n            ripple: true,\r\n            duration: 3000,\r\n            dismissable: true,\r\n            position: {\r\n                x: 'right',\r\n                y: 'bottom',\r\n            },\r\n        });\r\n\r\n        /*\r\n        * Check available hotel room from date to date\r\n        * Author @Foysal\r\n        */\r\n        $(document).on('change', '[name=\"tf_hotel_date[from]\"], [name=\"tf_hotel_date[to]\"]', function (e) {\r\n            e.preventDefault();\r\n\r\n            var from = $('[name=\"tf_hotel_date[from]\"]').val();\r\n            var to = $('[name=\"tf_hotel_date[to]\"]').val();\r\n\r\n            if (from.length > 0 && to.length > 0) {\r\n                jQuery.ajax({\r\n                    type: 'post',\r\n                    url: tf_admin_params.ajax_url,\r\n                    data: {\r\n                        action: 'tf_check_available_hotel',\r\n                        from: from,\r\n                        to: to,\r\n                    },\r\n                    beforeSend: function () {\r\n                        $('#tf-backend-hotel-book-btn').attr('disabled', 'disabled');\r\n                    },\r\n                    success: function (response) {\r\n                        var select2 = $('[name=\"tf_available_hotels\"]');\r\n                        select2.empty();\r\n                        select2.append('<option value=\"\">' + tf_admin_params.select_hotel + '</option>');\r\n                        $.each(response.data.hotels, function (key, value) {\r\n                            select2.append('<option value=\"' + key + '\">' + value + '</option>');\r\n                        });\r\n                        select2.select2();\r\n                        //select the first option\r\n                        select2.val(select2.find('option:eq(1)').val()).trigger('change');\r\n                        $('#tf-backend-hotel-book-btn').removeAttr('disabled');\r\n                    },\r\n                    error: function (response) {\r\n                        console.log(response);\r\n                    },\r\n                    complete: function (response) {\r\n                        $('#tf-backend-hotel-book-btn').removeAttr('disabled');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        /*\r\n        * Room filter on hotel change\r\n        * Author @Foysal\r\n        */\r\n        $(document).on('change', '[name=\"tf_available_hotels\"]', function (e) {\r\n            e.preventDefault();\r\n\r\n            var hotel_id = $('[name=\"tf_available_hotels\"]').val();\r\n            var from = $('[name=\"tf_hotel_date[from]\"]').val();\r\n            var to = $('[name=\"tf_hotel_date[to]\"]').val();\r\n\r\n            if (hotel_id.length > 0) {\r\n                jQuery.ajax({\r\n                    type: 'post',\r\n                    url: tf_admin_params.ajax_url,\r\n                    data: {\r\n                        action: 'tf_check_available_room',\r\n                        hotel_id: hotel_id,\r\n                        from: from,\r\n                        to: to,\r\n                    },\r\n                    beforeSend: function () {\r\n                        $('#tf-backend-hotel-book-btn').attr('disabled', 'disabled');\r\n                    },\r\n                    success: function (response) {\r\n                        var select2 = $('[name=\"tf_available_rooms\"]');\r\n                        var serviceSelect = $('[name=\"tf_hotel_service_type\"]');\r\n\r\n                        select2.removeAttr('disabled');\r\n                        select2.empty();\r\n                        select2.append('<option value=\"\">' + tf_admin_params.select_room + '</option>');\r\n                        $.each(response.data.rooms, function (key, value) {\r\n                            select2.append('<option value=\"' + key + '\">' + value + '</option>');\r\n                        });\r\n                        select2.select2();\r\n                        //auto select the first option\r\n                        select2.val(select2.find('option:eq(1)').val()).trigger('change');\r\n\r\n                        //service type select\r\n                        serviceSelect.empty();\r\n                        $.each(response.data.services, function (key, value) {\r\n                            serviceSelect.append('<option value=\"' + key + '\">' + value + '</option>');\r\n                        });\r\n\r\n                        $('#tf-backend-hotel-book-btn').removeAttr('disabled');\r\n                    },\r\n                    error: function (response) {\r\n                        console.log(response);\r\n                    },\r\n                    complete: function (response) {\r\n                        $('#tf-backend-hotel-book-btn').removeAttr('disabled');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        /*\r\n        * Room adults, children, infants fields update on room change\r\n        * Author @Foysal\r\n        */\r\n        $(document).on('change', '[name=\"tf_available_rooms\"]', function (e) {\r\n            e.preventDefault();\r\n\r\n            let hotel_id = $('[name=\"tf_available_hotels\"]').val();\r\n            let room_id = $('[name=\"tf_available_rooms\"]').val();\r\n\r\n            if (room_id.length > 0) {\r\n                jQuery.ajax({\r\n                    type: 'post',\r\n                    url: tf_admin_params.ajax_url,\r\n                    data: {\r\n                        action: 'tf_update_room_fields',\r\n                        hotel_id: hotel_id,\r\n                        room_id: room_id,\r\n                    },\r\n                    beforeSend: function () {\r\n                        $('#tf-backend-hotel-book-btn').attr('disabled', 'disabled');\r\n                    },\r\n                    success: function (response) {\r\n                        var select = $('[name=\"tf_hotel_rooms_number\"]');\r\n                        select.empty();\r\n                        for (var i = 1; i <= response.data.rooms; i++) {\r\n                            if (i === 1) {\r\n                                select.append('<option value=\"' + i + '\" selected>' + i + ' Room</option>');\r\n                            } else {\r\n                                select.append('<option value=\"' + i + '\">' + i + ' Rooms</option>');\r\n                            }\r\n                        }\r\n\r\n                        $('[name=\"tf_hotel_adults_number\"]').val(response.data.adults).attr('max', response.data.adults * response.data.rooms);\r\n                        $('[name=\"tf_hotel_children_number\"]').val(response.data.children).attr('max', response.data.children * response.data.rooms);\r\n\r\n                        $('#tf-backend-hotel-book-btn').removeAttr('disabled');\r\n                    },\r\n                    error: function (response) {\r\n                        console.log(response);\r\n                    },\r\n                    complete: function (response) {\r\n                        $('#tf-backend-hotel-book-btn').removeAttr('disabled');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        /*\r\n        * Backend Hotel Booking\r\n        * Author @Foysal\r\n        */\r\n        $(document).on('click', '#tf-backend-hotel-book-btn', function (e) {\r\n            e.preventDefault();\r\n\r\n            let btn = $(this);\r\n            let form = btn.closest('form.tf-backend-hotel-booking');\r\n            let formData = new FormData(form[0]);\r\n            formData.append('action', 'tf_backend_hotel_booking');\r\n            let requiredFields = ['tf_hotel_booked_by', 'tf_customer_first_name', 'tf_customer_email', 'tf_customer_phone', 'tf_customer_country', 'tf_customer_address', 'tf_customer_city', 'tf_customer_state', 'tf_customer_zip', 'tf_hotel_date[from]', 'tf_hotel_date[to]', 'tf_available_hotels', 'tf_available_rooms', 'tf_hotel_rooms_number', 'tf_hotel_adults_number', 'tf_hotel_children_number'];\r\n\r\n            $.ajax({\r\n                type: 'post',\r\n                url: tf_admin_params.ajax_url,\r\n                data: formData,\r\n                processData: false,\r\n                contentType: false,\r\n                beforeSend: function (response) {\r\n                    btn.addClass('tf-btn-loading');\r\n                },\r\n                success: function (response) {\r\n                    const obj = JSON.parse(response);\r\n                    if (!obj.success) {\r\n                        if (obj.message) {\r\n                            Swal.fire(\r\n                                'Error!',\r\n                                obj.message,\r\n                                'error'\r\n                            )\r\n                            form.find('input').removeClass('error-input');\r\n                            form.find('select').removeClass('error-input');\r\n                            form.find('textarea').removeClass('error-input');\r\n                            form.find('input').closest('.tf-fieldset').find('small.text-danger').remove();\r\n                            form.find('select').closest('.tf-fieldset').find('small.text-danger').remove();\r\n                            form.find('textarea').closest('.tf-fieldset').find('small.text-danger').remove();\r\n                        } else {\r\n\r\n                            for (const requiredField of requiredFields) {\r\n                                const errorField = obj['fieldErrors'][requiredField + '_error'];\r\n\r\n                                form.find('[name=\"' + requiredField + '\"]').removeClass('error-input');\r\n                                if (requiredField === 'tf_hotel_date[from]') {\r\n                                    form.find('[name=\"' + requiredField + '\"]').closest('.tf-date-from').find('small.text-danger').remove();\r\n                                } else if (requiredField === 'tf_hotel_date[to]') {\r\n                                    form.find('[name=\"' + requiredField + '\"]').closest('.tf-date-to').find('small.text-danger').remove();\r\n                                } else {\r\n                                    form.find('[name=\"' + requiredField + '\"]').closest('.tf-fieldset').find('small.text-danger').remove();\r\n                                }\r\n                                if (errorField) {\r\n                                    form.find('[name=\"' + requiredField + '\"]').addClass('error-input');\r\n                                    if (requiredField === 'tf_hotel_date[from]') {\r\n                                        form.find('[name=\"' + requiredField + '\"]').closest('.tf-date-from').append('<small class=\"text-danger\">' + errorField + '</small>');\r\n                                    } else if (requiredField === 'tf_hotel_date[to]') {\r\n                                        form.find('[name=\"' + requiredField + '\"]').closest('.tf-date-to').append('<small class=\"text-danger\">' + errorField + '</small>');\r\n                                    } else {\r\n                                        form.find('[name=\"' + requiredField + '\"]').closest('.tf-fieldset').append('<small class=\"text-danger\">' + errorField + '</small>');\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        Swal.fire(\r\n                            'Success!',\r\n                            obj.message,\r\n                            'success'\r\n                        )\r\n                        form[0].reset();\r\n                        form.find('input').removeClass('error-input');\r\n                        form.find('select').removeClass('error-input');\r\n                        form.find('textarea').removeClass('error-input');\r\n                        form.find('input').closest('.tf-fieldset').find('small.text-danger').remove();\r\n                        form.find('select').closest('.tf-fieldset').find('small.text-danger').remove();\r\n                        form.find('textarea').closest('.tf-fieldset').find('small.text-danger').remove();\r\n                    }\r\n                    btn.removeClass('tf-btn-loading');\r\n                },\r\n                error: function (response) {\r\n                    console.log(response);\r\n                },\r\n                complete: function (response) {\r\n                    btn.removeClass('tf-btn-loading');\r\n                }\r\n            })\r\n\r\n        });\r\n\r\n\r\n        /*\r\n        * Check available tour by date\r\n        * Author @Foysal\r\n        */\r\n        /*$(document).on('change', '[name=\"tf_tour_date\"], [name=\"tf_tour_adults_number\"], [name=\"tf_tour_children_number\"]', function (e) {\r\n            e.preventDefault();\r\n\r\n            var tourDate = $('[name=\"tf_tour_date\"]').val();\r\n            var adults = $('[name=\"tf_tour_adults_number\"]').val();\r\n            var children = $('[name=\"tf_tour_children_number\"]').val();\r\n\r\n            if (tourDate.length > 0 && adults.length > 0) {\r\n                jQuery.ajax({\r\n                    type: 'post',\r\n                    url: tf_admin_params.ajax_url,\r\n                    data: {\r\n                        action: 'tf_check_available_tour',\r\n                        tourDate: tourDate,\r\n                        adults: adults,\r\n                        children: children\r\n                    },\r\n                    beforeSend: function () {\r\n                        $('#tf-backend-tour-book-btn').attr('disabled', 'disabled');\r\n                    },\r\n                    success: function (response) {\r\n                        var select2 = $('[name=\"tf_available_tours\"]');\r\n                        select2.empty();\r\n                        select2.append('<option value=\"\">' + tf_admin_params.select_tour + '</option>');\r\n                        $.each(response.data.tours, function (key, value) {\r\n                            select2.append('<option value=\"' + key + '\">' + value + '</option>');\r\n                        });\r\n                        select2.select2();\r\n                        //select the first option\r\n                        select2.val(select2.find('option:eq(1)').val()).trigger('change');\r\n                        $('#tf-backend-tour-book-btn').removeAttr('disabled');\r\n                    }\r\n                });\r\n            }\r\n        });*/\r\n\r\n        /*\r\n        * Tour time and extra fields update\r\n        * Author @Foysal\r\n        */\r\n        $(document).on('change', '[name=\"tf_available_tours\"]', function (e) {\r\n            e.preventDefault();\r\n\r\n            var tourId = $('[name=\"tf_available_tours\"]').val();\r\n\r\n            if (tourId.length > 0) {\r\n                jQuery.ajax({\r\n                    type: 'post',\r\n                    url: tf_admin_params.ajax_url,\r\n                    data: {\r\n                        action: 'tf_tour_date_time_update',\r\n                        tour_id: tourId,\r\n                    },\r\n                    beforeSend: function () {\r\n                        $('#tf-backend-hotel-book-btn').attr('disabled', 'disabled');\r\n                    },\r\n                    success: function (response) {\r\n                        const obj = JSON.parse(response);\r\n\r\n                        if (obj.custom_avail !== '1') {\r\n                            populateTimeSelect(obj.allowed_times)\r\n                        }\r\n\r\n                        let flatpickerObj = {\r\n                            enableTime: false,\r\n                            // altInput: true,\r\n                            // altFormat: tf_admin_params.date_format_change_backend,\r\n                            dateFormat: \"Y/m/d\",\r\n                        };\r\n                        if (obj.tour_type === 'fixed') {\r\n                            flatpickerObj.mode = \"range\";\r\n                            flatpickerObj.defaultDate = [obj.departure_date, obj.return_date];\r\n                            flatpickerObj.enable = [\r\n                                {\r\n                                    from: obj.departure_date,\r\n                                    to: obj.return_date\r\n                                }\r\n                            ];\r\n                            flatpickerObj.onReady = function (selectedDates, dateStr, instance) {\r\n                                instance.element.value = dateStr.replace(/[a-z]+/g, '-');\r\n                            };\r\n                        } else if (obj.tour_type === 'continuous') {\r\n                            flatpickerObj.minDate = \"today\";\r\n                            flatpickerObj.disableMobile = \"true\";\r\n                            if (obj.custom_avail === '1') {\r\n                                flatpickerObj.enable = [];\r\n                                if (obj.cont_custom_date) {\r\n                                    for (const item of obj.cont_custom_date) {\r\n                                        flatpickerObj.enable.push({\r\n                                            from: item.date.from,\r\n                                            to: item.date.to\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (obj.custom_avail !== '1') {\r\n                                if (obj.disabled_day || obj.disable_range || obj.disable_specific) {\r\n                                    flatpickerObj.disable = [];\r\n                                    if (obj.disabled_day) {\r\n                                        flatpickerObj.disable.push(function (date) {\r\n                                            return (date.getDay() === 8 || obj.disabled_day.includes(date.getDay().toString()));\r\n                                        });\r\n                                    }\r\n                                    if (obj.disable_range) {\r\n                                        for (const d_item of obj.disable_range) {\r\n                                            flatpickerObj.disable.push({\r\n                                                from: d_item.date.from,\r\n                                                to: d_item.date.to\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                    if (obj.disable_specific2) {\r\n                                        for (const d_item of obj.disable_specific2) {\r\n                                            flatpickerObj.disable.push(d_item);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        flatpickerObj.onChange = function (selectedDates, dateStr, instance) {\r\n                            if (obj.custom_avail === '1') {\r\n                                let times = obj.allowed_times.filter((v) => {\r\n                                    let date_str = Date.parse(dateStr);\r\n                                    let start_date = Date.parse(v.date.from);\r\n                                    let end_date = Date.parse(v.date.to);\r\n                                    return start_date <= date_str && end_date >= date_str;\r\n                                });\r\n                                times = times.length > 0 && times[0].times ? times[0].times : null;\r\n                                populateTimeSelect(times);\r\n                            }\r\n                            instance.element.value = dateStr.replace(/[a-z]+/g, '-');\r\n                        }\r\n\r\n                        $(\"[name='tf_tour_date']\").flatpickr(flatpickerObj);\r\n\r\n                        if(obj.tour_extras_array.length > 0) {\r\n                            let extras = $('[name=\"tf_tour_extras[]\"]');\r\n                            extras.removeAttr('disabled');\r\n                            extras.empty();\r\n                            $.each(obj.tour_extras_array, function (key, value) {\r\n                                extras.append('<option value=\"' + key + '\">' + value + '</option>');\r\n                            });\r\n                            extras.select2();\r\n                        } else {\r\n                            let extras = $('[name=\"tf_tour_extras[]\"]');\r\n                            extras.empty();\r\n                            extras.attr('disabled', 'disabled');\r\n                        }\r\n\r\n                        $('#tf-backend-hotel-book-btn').removeAttr('disabled');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        function populateTimeSelect(times) {\r\n            let timeSelect = $('[name=\"tf_tour_time\"]');\r\n            timeSelect.empty();\r\n            if (times.length > 0) {\r\n                timeSelect.removeAttr('disabled');\r\n                timeSelect.append(`<option value=\"\" selected>Select Time</option>`);\r\n                $.each(times, function (i, v) {\r\n                    timeSelect.append(`<option value=\"${i}\">${v}</option>`);\r\n                });\r\n            } else {\r\n                timeSelect.append(`<option value=\"\" selected>No Time Available</option>`);\r\n                timeSelect.attr('disabled', 'disabled');\r\n            }\r\n        }\r\n\r\n        /*\r\n        * Backend Tour Booking\r\n        * Author @Foysal\r\n        */\r\n        $(document).on('click', '#tf-backend-tour-book-btn', function (e) {\r\n            e.preventDefault();\r\n\r\n            let btn = $(this);\r\n            let form = btn.closest('form.tf-backend-tour-booking');\r\n            let formData = new FormData(form[0]);\r\n            formData.append('action', 'tf_backend_tour_booking');\r\n            let requiredFields = ['tf_tour_booked_by', 'tf_customer_first_name', 'tf_customer_email', 'tf_customer_phone', 'tf_customer_country', 'tf_customer_address', 'tf_customer_city', 'tf_customer_state', 'tf_customer_zip', 'tf_tour_date', 'tf_available_tours', 'tf_tour_adults_number', 'tf_tour_children_number'];\r\n\r\n            $.ajax({\r\n                type: 'post',\r\n                url: tf_admin_params.ajax_url,\r\n                data: formData,\r\n                processData: false,\r\n                contentType: false,\r\n                beforeSend: function (response) {\r\n                    btn.addClass('tf-btn-loading');\r\n                },\r\n                success: function (response) {\r\n                    const obj = JSON.parse(response);\r\n                    if (!obj.success) {\r\n\r\n                        if (obj.errors) {\r\n                            obj.errors.forEach(function (text) {\r\n                                notyf.error(text);\r\n                            });\r\n                        }\r\n\r\n                        form.find('input').removeClass('error-input');\r\n                        form.find('select').removeClass('error-input');\r\n                        form.find('textarea').removeClass('error-input');\r\n                        form.find('input').closest('.tf-fieldset').find('small.text-danger').remove();\r\n                        form.find('select').closest('.tf-fieldset').find('small.text-danger').remove();\r\n                        form.find('textarea').closest('.tf-fieldset').find('small.text-danger').remove();\r\n\r\n                        if (obj['fieldErrors']) {\r\n                            for (const requiredField of requiredFields) {\r\n                                const errorField = obj['fieldErrors'][requiredField + '_error'];\r\n\r\n                                form.find('[name=\"' + requiredField + '\"]').removeClass('error-input');\r\n                                form.find('[name=\"' + requiredField + '\"]').closest('.tf-fieldset').find('small.text-danger').remove();\r\n                                if (errorField) {\r\n                                    form.find('[name=\"' + requiredField + '\"]').addClass('error-input');\r\n                                    form.find('[name=\"' + requiredField + '\"]').closest('.tf-fieldset').append('<small class=\"text-danger\">' + errorField + '</small>');\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        Swal.fire(\r\n                            'Success!',\r\n                            obj.message,\r\n                            'success'\r\n                        )\r\n                        form[0].reset();\r\n                        form.find('input').removeClass('error-input');\r\n                        form.find('select').removeClass('error-input');\r\n                        form.find('textarea').removeClass('error-input');\r\n                        form.find('input').closest('.tf-fieldset').find('small.text-danger').remove();\r\n                        form.find('select').closest('.tf-fieldset').find('small.text-danger').remove();\r\n                        form.find('textarea').closest('.tf-fieldset').find('small.text-danger').remove();\r\n                    }\r\n                    btn.removeClass('tf-btn-loading');\r\n                },\r\n            })\r\n\r\n        });\r\n    });\r\n\r\n})(jQuery);\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/backend-booking.js?");

/***/ }),

/***/ "./sass/admin/js/free/booking-details.js":
/*!***********************************************!*\
  !*** ./sass/admin/js/free/booking-details.js ***!
  \***********************************************/
/***/ (() => {

eval("(function ($) {\r\n    $(document).ready(function () {\r\n\r\n        // Create an instance of Notyf\r\n        const notyf = new Notyf({\r\n            ripple: true,\r\n            duration: 3000,\r\n            dismissable: true,\r\n            position: {\r\n                x: 'right',\r\n                y: 'bottom',\r\n            },\r\n        });\r\n\r\n        // Select Form\r\n        $('.tf-filter-selection').click(function() {\r\n            $(this).toggleClass('active');\r\n        });\r\n\r\n        // Form Selection\r\n        $('.tf-filter-selection ul li').click(function() {\r\n            let $this = $(this).closest('.tf-filter-selection');\r\n            // let selected_value = $(this).attr('data-id');\r\n            let selected_label = $(this).text();\r\n            $this.find('label span').text(selected_label);\r\n        });\r\n\r\n        // Pyment Status Section\r\n        $('.tf-order-payment-status').select2({\r\n            dropdownCssClass: 'tf-booking-filter-modal',\r\n            placeholder: \"Order Status\",\r\n            allowClear: true\r\n        });\r\n        // Bulk Section\r\n        $('.tf-filter-bulk-option').select2({\r\n            dropdownCssClass: 'tf-booking-filter-modal',\r\n            placeholder: \"Bulk Action\",\r\n        });\r\n        // Tour Post Section\r\n        $('.tf-post-id-filter-options').select2({\r\n            dropdownCssClass: 'tf-booking-filter-modal',\r\n            placeholder: \"Tour Name\",\r\n            allowClear: true\r\n        });\r\n        // Hotel Post Section\r\n        $('.tf-hotel-id-filter-options').select2({\r\n            dropdownCssClass: 'tf-booking-filter-modal',\r\n            placeholder: \"Hotel Name\",\r\n            allowClear: true\r\n        });\r\n        // Apartment Post Section\r\n        $('.tf-apartment-id-filter-options').select2({\r\n            dropdownCssClass: 'tf-booking-filter-modal',\r\n            placeholder: \"Apartment Name\",\r\n            allowClear: true\r\n        });\r\n\r\n        // Checked Section\r\n        $('.tf-tour-checkinout-options').select2({\r\n            dropdownCssClass: 'tf-booking-checkinout-filter-modal',\r\n            placeholder: \"Checked in status\",\r\n            allowClear: true\r\n        });\r\n\r\n        /**\r\n         * Visitor Details Popup Open\r\n         *\r\n         */\r\n        $(document).on('click', '.visitor_edit span', function (e) {\r\n            e.preventDefault();\r\n            $(\".visitor-details-edit-form\").show();\r\n        });\r\n\r\n        /**\r\n         * Visitor Details Popup Close\r\n         *\r\n         */\r\n        $(document).on('click', '.visitor-details-edit-popup .tf-booking-times span', function (e) {\r\n            e.preventDefault();\r\n            $(\".visitor-details-edit-form\").hide();\r\n        });\r\n\r\n        /**\r\n         * Ajax tour booking\r\n         *\r\n         * tf_visitor_details_edit\r\n         */\r\n        $(document).on('submit', 'form.visitor-details-edit-popup', function (e) {\r\n            e.preventDefault();\r\n            var $this = $(this);\r\n\r\n            var formData = new FormData(this);\r\n            formData.append('action', 'tf_visitor_details_edit');\r\n            $.ajax({\r\n                type: 'post',\r\n                url: tf_admin_params.ajax_url,\r\n                data: formData,\r\n                processData: false,\r\n                contentType: false,\r\n                beforeSend: function (data) {\r\n                    $('.tf-preloader-box').show();\r\n                },\r\n                complete: function (data) {\r\n                    \r\n                },\r\n                success: function (data) {\r\n                    location.reload();\r\n                },\r\n                error: function (data) {\r\n                    console.log(data);\r\n                },\r\n\r\n            });\r\n        });\r\n\r\n        /**\r\n         * Ajax Checkinout Status\r\n         *\r\n         * tf_checkinout_details_edit\r\n         */\r\n        $('.tf-order-checkinout-status ul li').click(function() {\r\n            \r\n            let selected_value = $(this).attr('data-value');\r\n            let order_id = $('.tf_single_order_id').val();\r\n\r\n            $.ajax({\r\n                type: 'post',\r\n                url: tf_admin_params.ajax_url,\r\n                data: {\r\n                    action: 'tf_checkinout_details_edit',\r\n                    order_id: order_id,\r\n                    checkinout: selected_value\r\n                },\r\n                beforeSend: function (data) {\r\n                    $('.tf-preloader-box').show();\r\n                },\r\n                complete: function (data) {\r\n                    \r\n                },\r\n                success: function (data) {\r\n                    location.reload();\r\n                },\r\n                error: function (data) {\r\n                    console.log(data);\r\n                },\r\n\r\n            });\r\n        });\r\n\r\n        /**\r\n         * Ajax Order Status Status\r\n         *\r\n         * tf_order_status_edit\r\n         */\r\n        $('.tf-order-ostatus ul li').click(function() {\r\n            \r\n            let selected_value = $(this).attr('data-value');\r\n            let order_id = $('.tf_single_order_id').val();\r\n\r\n            $.ajax({\r\n                type: 'post',\r\n                url: tf_admin_params.ajax_url,\r\n                data: {\r\n                    action: 'tf_order_status_edit',\r\n                    order_id: order_id,\r\n                    status: selected_value\r\n                },\r\n                beforeSend: function (data) {\r\n                    $('.tf-preloader-box').show();\r\n                },\r\n                complete: function (data) {\r\n                    \r\n                },\r\n                success: function (data) {\r\n                    location.reload();\r\n                },\r\n                error: function (data) {\r\n                    console.log(data);\r\n                },\r\n\r\n            });\r\n        });\r\n\r\n        /**\r\n         * Ajax Order Status Email Resend\r\n         *\r\n         * tf_order_status_email_resend\r\n         */\r\n        $('.tf-order-email-resend ul li').click(function() {\r\n            \r\n            let selected_value = $(this).attr('data-value');\r\n            let order_id = $('#tf_email_order_id').val();\r\n            let db_id = $('.tf_single_order_id').val();\r\n\r\n            $.ajax({\r\n                type: 'post',\r\n                url: tf_admin_params.ajax_url,\r\n                data: {\r\n                    action: 'tf_order_status_email_resend',\r\n                    order_id: order_id,\r\n                    status: selected_value,\r\n                    id : db_id\r\n                },\r\n                beforeSend: function (data) {\r\n                    $('.tf-preloader-box').show();\r\n                },\r\n                complete: function (data) {\r\n                    \r\n                },\r\n                success: function (data) {\r\n                    $('.tf-preloader-box').hide();\r\n                    notyf.success(\"Email Sucessfully Resend!\");\r\n                },\r\n                error: function (data) {\r\n                    console.log(data);\r\n                },\r\n\r\n            });\r\n        });\r\n\r\n        /**\r\n         * Vouchers Popup Open\r\n         *\r\n         */\r\n        $(document).on('click', '.tf-voucher-preview .tf-preview-btn a', function (e) {\r\n            e.preventDefault();\r\n            $(\".tf-voucher-quick-view-box\").show();\r\n        });\r\n\r\n        /**\r\n         * Vouchers Popup Close\r\n         *\r\n         */\r\n        $(document).on('click', '.tf-voucher-quick-view-box .tf-quick-view-times span', function (e) {\r\n            e.preventDefault();\r\n            $(\".tf-voucher-quick-view-box\").hide();\r\n        });\r\n\r\n        // Filter Checkbox Selected\r\n\r\n        $(\"#cb #cb-select-all-1\").click(function() {\r\n            $('input[name=\"order_id[]\"]').each(function() {\r\n                $(this).prop(\"checked\", !$(this).prop(\"checked\"));\r\n            });\r\n        });\r\n\r\n        /**\r\n         * Filter Bulk Action\r\n         *\r\n         * tf_order_bulk_action_edit\r\n         */\r\n        $('.tf-order-status-filter-btn').click(function() {\r\n            \r\n            let order_list = [];\r\n            let bulk_action = $('.tf-filter-bulk-option').val();\r\n            $('.tf_booking_details_wrap input[name=\"order_id[]\"]:checked').each(function() {\r\n                order_list.push($(this).val());\r\n            });\r\n            \r\n            if(order_list.length > 0 && bulk_action!==''){\r\n                $.ajax({\r\n                    type: 'post',\r\n                    url: tf_admin_params.ajax_url,\r\n                    data: {\r\n                        action: 'tf_order_bulk_action_edit',\r\n                        orders: order_list,\r\n                        status: bulk_action\r\n                    },\r\n                    beforeSend: function (data) {\r\n                        $('.tf-preloader-box').show();\r\n                    },\r\n                    complete: function (data) {\r\n                        \r\n                    },\r\n                    success: function (data) {\r\n                        location.reload();\r\n                    },\r\n                    error: function (data) {\r\n                        console.log(data);\r\n                    },\r\n\r\n                });\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Search Filter BY ID boly\r\n         *\r\n         * tf-right-search-filter\r\n         */\r\n        $(document).on('submit', 'form.tf-right-search-filter', function (e) {\r\n            e.preventDefault();\r\n\r\n            let id = $(\"#tf-searching-key\").val();\r\n            if(id!==\"\"){\r\n                $('.tf-preloader-box').show();\r\n                let currentURL = window.location.href;\r\n                let BaseURL = currentURL.split('?')[0];\r\n                let queryString = currentURL.split('?')[1];\r\n\r\n                let currentURLParams= new URLSearchParams(queryString);\r\n                currentURLParams.delete(\"paged\");\r\n                if (currentURLParams.has(\"post\")) {\r\n                    currentURLParams.set(\"post\", id);\r\n                    let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\r\n                    window.location.href = updatedUrl;\r\n                }else{\r\n                    let updatedUrl = currentURL + \"&post=\" + id;\r\n                    window.location.href = updatedUrl;\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Filter Checked Perameter Passing\r\n         *\r\n         */\r\n        $('.tf-tour-checkinout-options').change(function() {\r\n            let changeValue = $(this).val();\r\n            $('.tf-preloader-box').show();\r\n            let currentURL = window.location.href;\r\n            let BaseURL = currentURL.split('?')[0];\r\n            let queryString = currentURL.split('?')[1];\r\n\r\n            let currentURLParams= new URLSearchParams(queryString);\r\n            currentURLParams.delete(\"paged\");\r\n            if (currentURLParams.has(\"checkinout\")) {\r\n                currentURLParams.set(\"checkinout\", changeValue);\r\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\r\n                window.location.href = updatedUrl;\r\n            }else{\r\n                currentURLParams.set(\"checkinout\", changeValue);\r\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\r\n                window.location.href = updatedUrl;\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Filter Post Perameter Passing\r\n         *\r\n         */\r\n        $('.tf-post-id-filter-options, .tf-hotel-id-filter-options, .tf-apartment-id-filter-options').change(function() {\r\n            let changeValue = $(this).val();\r\n            $('.tf-preloader-box').show();\r\n            let currentURL = window.location.href;\r\n            let BaseURL = currentURL.split('?')[0];\r\n            let queryString = currentURL.split('?')[1];\r\n\r\n            let currentURLParams= new URLSearchParams(queryString);\r\n            currentURLParams.delete(\"paged\");\r\n            if (currentURLParams.has(\"post\")) {\r\n                currentURLParams.set(\"post\", changeValue);\r\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\r\n                window.location.href = updatedUrl;\r\n            }else{\r\n                currentURLParams.set(\"post\", changeValue);\r\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\r\n                window.location.href = updatedUrl;\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Filter Post Perameter Passing\r\n         *\r\n         */\r\n        $('.tf-order-payment-status').change(function() {\r\n            let changeValue = $(this).val();\r\n            $('.tf-preloader-box').show();\r\n            let currentURL = window.location.href;\r\n            let BaseURL = currentURL.split('?')[0];\r\n            let queryString = currentURL.split('?')[1];\r\n\r\n            let currentURLParams= new URLSearchParams(queryString);\r\n            currentURLParams.delete(\"paged\");\r\n            if (currentURLParams.has(\"payment\")) {\r\n                currentURLParams.set(\"payment\", changeValue);\r\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\r\n                window.location.href = updatedUrl;\r\n            }else{\r\n                currentURLParams.set(\"payment\", changeValue);\r\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\r\n                window.location.href = updatedUrl;\r\n            }\r\n        });\r\n        \r\n    });\r\n\r\n})(jQuery);\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/booking-details.js?");

/***/ }),

/***/ "./sass/admin/js/free/required-taxonomies-gutenberg.js":
/*!*************************************************************!*\
  !*** ./sass/admin/js/free/required-taxonomies-gutenberg.js ***!
  \*************************************************************/
/***/ (() => {

eval("const {select, dispatch} = wp.data;\r\n\r\n//required taxonomies\r\n\r\nfunction TfPrePublishCheck() {\r\n    let lockPost = false;\r\n    tf_admin_params.error = false;\r\n    tf_admin_params.messages = [];\r\n\r\n    let tf_post_pre_save = Object.assign({}, select('core/editor').getCurrentPost(), select('core/editor').getPostEdits());\r\n\r\n    if (tf_post_pre_save.hasOwnProperty('categories')) {\r\n        tf_post_pre_save['categories'] = tf_post_pre_save['categories'].filter(function (ele) {\r\n            return ele !== 1;\r\n        });\r\n    }\r\n\r\n    jQuery.each(tf_admin_params.taxonomies, function (taxonomy, config) {\r\n        if (tf_post_pre_save.hasOwnProperty(taxonomy) && tf_post_pre_save[taxonomy].length === 0) {\r\n            dispatch('core/notices').createNotice(\r\n                'error',\r\n                config.message,\r\n                {\r\n                    id: 'tfNotice_' + taxonomy,\r\n                    isDismissible: false\r\n                }\r\n            );\r\n            tf_admin_params.error = lockPost = true;\r\n        }else{\r\n            dispatch('core/notices').removeNotice('tfNotice_' + taxonomy);\r\n        }\r\n    });\r\n\r\n    if (lockPost === true) {\r\n        dispatch('core/editor').lockPostSaving();\r\n    } else {\r\n        dispatch('core/editor').unlockPostSaving();\r\n    }\r\n\r\n}\r\n\r\nTfPrePublishCheck();\r\n\r\nlet rpc_check_interval = setInterval(TfPrePublishCheck, 500);\r\n\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/required-taxonomies-gutenberg.js?");

/***/ }),

/***/ "./sass/admin/js/free/required-taxonomies.js":
/*!***************************************************!*\
  !*** ./sass/admin/js/free/required-taxonomies.js ***!
  \***************************************************/
/***/ (() => {

eval("jQuery(function ($) {\r\n\r\n    //required taxonomies\r\n\t// Create an instance of Notyf\r\n\tconst notyf = new Notyf({\r\n\t\tripple: true,\r\n\t\tdismissable: true,\r\n\t\tduration: 3000,\r\n\t\tposition: {\r\n\t\t\tx: 'right',\r\n\t\t\ty: 'bottom',\r\n\t\t},\r\n\t});\r\n\r\n    function tf_event_handler(e) {\r\n        tf_admin_params.error = false;\r\n        $.each(tf_admin_params.taxonomies, function (taxonomy, config) {\r\n            if (config.type == 'hierarchical') {\r\n                if ($('#taxonomy-' + taxonomy + ' input:checked').length == 0) {\r\n                    //alert(config.message);\r\n\t\t\t\t\tnotyf.error(config.message);\r\n                    tf_admin_params.error = true;\r\n                }\r\n            } else {\r\n                if ($('#tagsdiv-' + taxonomy + ' .tagchecklist').is(':empty')) {\r\n                    //alert(config.message);\r\n                    notyf.error(config.message);\r\n                    tf_admin_params.error = true;\r\n                }\r\n            }\r\n        });\r\n        if (tf_admin_params.error) {\r\n            e.stopImmediatePropagation();\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    $('#publish, #save-post').on('click.require-post-category', tf_event_handler);\r\n    $('#post').on('submit.require-post-category', tf_event_handler);\r\n    if ($('#publish')[0] != null && $._data($('#publish')[0], \"events\") != null) {\r\n        var publish_click_events = $._data($('#publish')[0], \"events\").click;\r\n        if (publish_click_events) {\r\n            if (publish_click_events.length > 1) {\r\n                publish_click_events.unshift(publish_click_events.pop());\r\n            }\r\n        }\r\n    }\r\n    if ($('#save-post')[0] != null && $._data($('#save-post')[0], \"events\") != null) {\r\n        var save_click_events = $._data($('#save-post')[0], \"events\").click;\r\n        if (save_click_events) {\r\n            if (save_click_events.length > 1) {\r\n                save_click_events.unshift(save_click_events.pop());\r\n            }\r\n        }\r\n    }\r\n    if ($('#post')[0] != null && $._data($('#post')[0], \"events\") != null) {\r\n        var post_submit_events = $._data($('#post')[0], \"events\").submit;\r\n        if (post_submit_events) {\r\n            if (post_submit_events.length > 1) {\r\n                post_submit_events.unshift(post_submit_events.pop());\r\n            }\r\n        }\r\n    }\r\n});\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/required-taxonomies.js?");

/***/ }),

/***/ "./sass/admin/js/free/setup-wizard.js":
/*!********************************************!*\
  !*** ./sass/admin/js/free/setup-wizard.js ***!
  \********************************************/
/***/ (() => {

eval("(function ($) {\r\n    $(document).ready(function () {\r\n\r\n        //if body has class .admin_page_tf-setup-wizard then add background-color: #ecf5ff; to html\r\n        if ($('body').hasClass('admin_page_tf-setup-wizard')) {\r\n            $('html').css('padding', '0');\r\n        }\r\n\r\n        $(document).on('click', '.tf-setup-start-btn', function (e) {\r\n            e.preventDefault();\r\n            $('.tf-welcome-step').hide();\r\n            $('.tf-setup-step-1').show();\r\n        });\r\n\r\n        $(document).on('click', '.tf-setup-next-btn, .tf-setup-skip-btn', function (e) {\r\n            e.preventDefault();\r\n            let form = $('#tf-setup-wizard-form');\r\n            let skipSteps = form.find('input[name=\"tf-skip-steps\"]').val();\r\n            let step = $(this).closest('.tf-setup-step-container').data('step');\r\n            let nextStep = step + 1;\r\n\r\n            //min one service required\r\n            if (step === 1 && $(this).hasClass('tf-setup-next-btn')) {\r\n                let services = $('input[name=\"tf-services[]\"]:checked').length;\r\n\r\n                if (!services) {\r\n                    alert(tf_admin_params.i18n.no_services_selected);\r\n                    return false;\r\n                }\r\n\r\n                //if hotel service not checked, hide hotel settings\r\n                if (!$('input[name=\"tf-services[]\"][value=\"hotel\"]').is(':checked')) {\r\n                    $('.tf-hotel-setup-wizard').hide();\r\n                    $('.tf-add-new-hotel').hide();\r\n                } else {\r\n                    $('.tf-hotel-setup-wizard').show();\r\n                    $('.tf-add-new-hotel').show();\r\n                }\r\n\r\n                //if tour service not checked, hide tour settings\r\n                if (!$('input[name=\"tf-services[]\"][value=\"tour\"]').is(':checked')) {\r\n                    $('.tf-tour-setup-wizard').hide();\r\n                    $('.tf-add-new-tour').hide();\r\n                } else {\r\n                    $('.tf-tour-setup-wizard').show();\r\n                    $('.tf-add-new-tour').show();\r\n                }\r\n\r\n                //if apartment service not checked, hide apartment settings\r\n                if (!$('input[name=\"tf-services[]\"][value=\"apartment\"]').is(':checked')) {\r\n                    $('.tf-apartment-setup-wizard').hide();\r\n                    $('.tf-add-new-apartment').hide();\r\n                } else {\r\n                    $('.tf-apartment-setup-wizard').show();\r\n                    $('.tf-add-new-apartment').show();\r\n                }\r\n            }\r\n\r\n            //skip steps add to input[name=\"tf-skip-steps\"]\r\n            if ($(this).hasClass('tf-setup-skip-btn')) {\r\n                skipSteps = !skipSteps ? step : skipSteps.indexOf(step) === -1 ? skipSteps + ',' + step : skipSteps;\r\n                form.find('input[name=\"tf-skip-steps\"]').val(skipSteps);\r\n\r\n                if(step === 1){\r\n                    $('.tf-hotel-setup-wizard').show();\r\n                    $('.tf-tour-setup-wizard').show();\r\n                }\r\n            }\r\n\r\n            //remove skip steps from input[name=\"tf-skip-steps\"] if user back to step and go to next step\r\n            if($(this).hasClass('tf-setup-next-btn') && skipSteps.indexOf(step) !== -1) {\r\n                skipSteps = skipSteps.replace(step, '');\r\n                form.find('input[name=\"tf-skip-steps\"]').val(skipSteps);\r\n            }\r\n\r\n            //hide current step and show next step (if not last step)\r\n            if(!$(this).hasClass('tf-setup-submit-btn')) {\r\n                $('.tf-setup-step-' + step).fadeOut(300, function () {\r\n                    $('.tf-setup-step-' + nextStep).fadeIn(300);\r\n                });\r\n            }\r\n        });\r\n\r\n        $(document).on('click', '.tf-setup-prev-btn', function (e) {\r\n            e.preventDefault();\r\n            let step = $(this).closest('.tf-setup-step-container').data('step');\r\n            let prevStep = step - 1;\r\n            $('.tf-setup-step-' + step).fadeOut(300, function () {\r\n                $('.tf-setup-step-' + prevStep).fadeIn(300);\r\n            });\r\n        });\r\n\r\n        /*\r\n        * Setup Wizard form submit\r\n        * @author: Foysal\r\n        */\r\n        $(document).on('click', '.tf-setup-submit-btn', function (e) {\r\n            e.preventDefault();\r\n            let submitBtn = $('.tf-setup-submit-btn.tf-admin-btn');\r\n            let form = $(this).closest('#tf-setup-wizard-form');\r\n            let step = $(this).closest('.tf-setup-step-container').data('step');\r\n            let skipSteps = form.find('input[name=\"tf-skip-steps\"]').val();\r\n\r\n            if($(this).hasClass('tf-admin-btn') && skipSteps.indexOf(step) !== -1) {\r\n                skipSteps = skipSteps.replace(step, '');\r\n                form.find('input[name=\"tf-skip-steps\"]').val(skipSteps);\r\n            }\r\n\r\n            let formData = new FormData(form[0]);\r\n            formData.append('action', 'tf_setup_wizard_submit');\r\n\r\n            $.ajax({\r\n                url: tf_admin_params.ajax_url,\r\n                type: 'POST',\r\n                data: formData,\r\n                processData: false,\r\n                contentType: false,\r\n                beforeSend: function () {\r\n                    submitBtn.addClass('tf-btn-loading');\r\n                },\r\n                success: function (response) {\r\n                    let data = JSON.parse(response);\r\n                    submitBtn.removeClass('tf-btn-loading');\r\n                    if (data.success) {\r\n                        $('.tf-finish-step').show();\r\n                        $('.tf-setup-step-' + step).hide();\r\n                    }\r\n                },\r\n                error: function (error) {\r\n                    submitBtn.removeClass('tf-btn-loading');\r\n                    console.log(error);\r\n                }\r\n            });\r\n        });\r\n\r\n    });\r\n\r\n})(jQuery);\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/setup-wizard.js?");

/***/ }),

/***/ "./sass/admin/js/free/tf-options.js":
/*!******************************************!*\
  !*** ./sass/admin/js/free/tf-options.js ***!
  \******************************************/
/***/ (() => {

eval("(function ($) {\r\n    'use strict';\r\n    $(document).ready(function () {\r\n\r\n        // Create an instance of Notyf\r\n        const notyf = new Notyf({\r\n            ripple: true,\r\n            duration: 3000,\r\n            dismissable: true,\r\n            position: {\r\n                x: 'right',\r\n                y: 'bottom',\r\n            },\r\n        });\r\n\r\n        /*\r\n        * window url on change tab click\r\n        * @author: Foysal\r\n        */\r\n        $(window).on('hashchange load', function () {\r\n            let hash = window.location.hash;\r\n            let query = window.location.search;\r\n            let slug = hash.replace('#tab=', '');\r\n\r\n            if (hash) {\r\n                let selectedTab = $('.tf-tablinks[data-tab=\"' + slug + '\"]'),\r\n                    parentDiv = selectedTab.closest('.tf-admin-tab-item');\r\n\r\n                selectedTab.trigger('click');\r\n                parentDiv.trigger('click');\r\n            }\r\n\r\n            if (query.indexOf('dashboard') > -1) {\r\n                let submenu = $(\"#toplevel_page_tf_settings\").find(\".wp-submenu\");\r\n                submenu.find(\"a\").filter(function (a, e) {\r\n                    return e.href.indexOf(query) > -1;\r\n                }).parent().addClass(\"current\");\r\n            }\r\n\r\n            tfApartmentCalendar()\r\n        });\r\n\r\n        /*\r\n        * Tab click\r\n        * @author: Foysal\r\n        */\r\n        $(document).on('click', '.tf-tablinks', function (e) {\r\n            e.preventDefault();\r\n            let firstTabId,\r\n                $this = $(this),\r\n                parentDiv = $this.closest('.tf-admin-tab-item'),\r\n                parentTabId = parentDiv.children('.tf-tablinks').attr('data-tab'),\r\n                tabcontent = $('.tf-tab-content'),\r\n                tablinks = $('.tf-tablinks');\r\n\r\n            tabcontent.hide();\r\n            tablinks.removeClass('active');\r\n\r\n            let tabId = $this.attr('data-tab');\r\n            $('#' + tabId).css('display', 'flex');\r\n\r\n            if ($this.next().hasClass('tf-submenu')) {\r\n                firstTabId = parentDiv.find('.tf-submenu li:first-child .tf-tablinks').data('tab');\r\n            }\r\n\r\n            if (firstTabId === tabId) {\r\n                parentDiv.find('.tf-submenu li:first-child .tf-tablinks').addClass('active');\r\n            } else {\r\n                $this.addClass('active');\r\n            }\r\n            // url hash update\r\n            window.location.hash = '#tab=' + tabId;\r\n\r\n            $(\".tf-admin-tab\").removeClass('active');\r\n\r\n            let submenu = $(\"#toplevel_page_tf_settings\").find(\".wp-submenu\");\r\n            submenu.find(\"a\").filter(function (a, e) {\r\n                let slug = e.hash.replace('#tab=', '');\r\n                return tabId === slug || parentTabId === slug;\r\n            }).parent().addClass(\"current\").siblings().removeClass(\"current\")\r\n        });\r\n\r\n        /*\r\n        * Submenu toggle\r\n        * @author: Foysal\r\n        */\r\n        $(document).on('click', '.tf-admin-tab-item', function (e) {\r\n            e.preventDefault();\r\n            let $this = $(this);\r\n\r\n            $this.addClass('open');\r\n            $this.children('ul').slideDown();\r\n            $this.siblings('.tf-admin-tab-item').children('ul').slideUp();\r\n            $this.siblings('.tf-admin-tab-item').removeClass('open');\r\n            $this.siblings('.tf-admin-tab-item').find('li').removeClass('open');\r\n            $this.siblings('.tf-admin-tab-item').find('ul').slideUp();\r\n        });\r\n\r\n        /*\r\n        * Each date field initialize flatpickr\r\n        * @author: Foysal\r\n        */\r\n        const tfDateInt = dateSelector => {\r\n            $(dateSelector).each(function () {\r\n                let $this = $(this),\r\n                    dateField = $this.find('input.flatpickr'),\r\n                    format = dateField.data('format'),\r\n                    multiple = dateField.data('multiple'),\r\n                    minDate = dateField.data('min-date');\r\n\r\n                if (dateField.length === 2) {\r\n                    let startDate = $this.find('.tf-date-from input.flatpickr').flatpickr({\r\n                        dateFormat: format,\r\n                        minDate: minDate,\r\n                        altInput: true,\r\n                        altFormat: tf_options.tf_admin_date_format,\r\n                        onChange: function (selectedDates, dateStr, instance) {\r\n                            endDate.set('minDate', dateStr);\r\n                        }\r\n                    });\r\n                    let endDate = $this.find('.tf-date-to input.flatpickr').flatpickr({\r\n                        dateFormat: format,\r\n                        minDate: minDate,\r\n                        altInput: true,\r\n                        altFormat: tf_options.tf_admin_date_format,\r\n                        onChange: function (selectedDates, dateStr, instance) {\r\n                            startDate.set('maxDate', dateStr);\r\n                        }\r\n                    });\r\n                } else {\r\n                    dateField.flatpickr({\r\n                        dateFormat: format,\r\n                        minDate: minDate,\r\n                        altInput: true,\r\n                        altFormat: tf_options.tf_admin_date_format,\r\n                        mode: multiple ? 'multiple' : 'single',\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        tfDateInt('.tf-field-date');\r\n\r\n        /*\r\n        * Each time field initialize flatpickr\r\n        * @author: Foysal\r\n        */\r\n        const tfTimeInt = timeSelector => {\r\n            $(timeSelector).each(function () {\r\n                let $this = $(this),\r\n                    timeField = $this.find('input.flatpickr'),\r\n                    format = timeField.data('format');\r\n\r\n                timeField.flatpickr({\r\n                    enableTime: true,\r\n                    noCalendar: true,\r\n                    dateFormat: format,\r\n                });\r\n            });\r\n        }\r\n        tfTimeInt('.tf-field-time');\r\n\r\n\r\n        /*\r\n        * Each color field initialize wpColorPicker\r\n        * @author: Foysal\r\n        */\r\n        const tfColorInt = colorSelector => {\r\n            $(colorSelector).each(function () {\r\n                let $this = $(this),\r\n                    colorField = $this.find('input.tf-color');\r\n\r\n                colorField.wpColorPicker();\r\n            });\r\n        }\r\n        tfColorInt('.tf-field-color');\r\n\r\n        /*\r\n        * Custom modal\r\n        * @author: Foysal\r\n        */\r\n        TF_dependency();\r\n\r\n        function TF_dependency() {\r\n            $('.tf-tab-content, .tf-taxonomy-metabox').each(function () {\r\n                var $this = $(this);\r\n                $this.find('[data-controller]').each(function () {\r\n                    var $tffields = $(this);\r\n                    if ($tffields.length) {\r\n                        // alert($tffields.length);\r\n                        var normal_ruleset = $.tf_deps.createRuleset(),\r\n                            global_ruleset = $.tf_deps.createRuleset(),\r\n                            normal_depends = [],\r\n                            global_depends = [];\r\n\r\n                        $tffields.each(function () {\r\n\r\n                            var $field = $(this),\r\n                                controllers = $field.data('controller').split('|'),\r\n                                conditions = $field.data('condition').split('|'),\r\n                                values = $field.data('value').toString().split('|'),\r\n                                is_global = $field.data('depend-global') ? true : false,\r\n                                ruleset = normal_ruleset;\r\n\r\n                            $.each(controllers, function (index, depend_id) {\r\n\r\n                                var value = values[index] || '',\r\n                                    condition = conditions[index] || conditions[0];\r\n\r\n                                ruleset = ruleset.createRule($this.find('[data-depend-id=\"' + depend_id + '\"]'), condition, value);\r\n\r\n                                ruleset.include($field);\r\n\r\n                                if (is_global) {\r\n                                    global_depends.push(depend_id);\r\n                                } else {\r\n                                    normal_depends.push(depend_id);\r\n                                }\r\n\r\n                            });\r\n\r\n                        });\r\n\r\n                        if (normal_depends.length) {\r\n                            $.tf_deps.enable($this, normal_ruleset, normal_depends);\r\n                        }\r\n\r\n                        if (global_depends.length) {\r\n                            $.tf_deps.enable(TF.vars.$body, global_ruleset, global_depends);\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n            });\r\n        }\r\n\r\n\r\n        /*\r\n        * Custom modal\r\n        * @author: Foysal\r\n        */\r\n        $(document).on('click', '.tf-modal-btn', function (e) {\r\n            e.preventDefault();\r\n            let $this = $(this),\r\n                modal = $('#tf-icon-modal');\r\n\r\n            if (modal.length > 0 && modal.hasClass('tf-modal-show')) {\r\n                modal.removeClass('tf-modal-show');\r\n                $('body').removeClass('tf-modal-open');\r\n            } else {\r\n                modal.addClass('tf-modal-show');\r\n                $('body').addClass('tf-modal-open');\r\n            }\r\n        });\r\n        $(document).on(\"click\", '.tf-modal-close', function () {\r\n            $('.tf-modal').removeClass('tf-modal-show');\r\n            $('body').removeClass('tf-modal-open');\r\n        });\r\n        $(document).on('click', function (event) {\r\n            if (!$(event.target).closest(\".tf-modal-content,.tf-modal-btn\").length) {\r\n                $(\"body\").removeClass(\"tf-modal-open\");\r\n                $(\".tf-modal\").removeClass(\"tf-modal-show\");\r\n            }\r\n        });\r\n\r\n        /*\r\n        * Icon tab\r\n        * @author: Foysal\r\n        */\r\n        $(document).on('click', '.tf-icon-tab', function (e) {\r\n            e.preventDefault();\r\n            let $this = $(this),\r\n                tab = $this.data('tab');\r\n\r\n            $('.tf-icon-tab').removeClass('active');\r\n            $this.addClass('active');\r\n\r\n            $('#' + tab).addClass('active').siblings().removeClass('active');\r\n\r\n            tfIconInfiniteScroll();\r\n        });\r\n\r\n        /*\r\n        * Icon select\r\n        * @author: Foysal\r\n        */\r\n        $(document).on('click', '.tf-icon-select .tf-admin-btn, .tf-icon-select .tf-icon-preview', function (e) {\r\n            e.preventDefault();\r\n            let btn = $(this);\r\n\r\n            let fieldId = btn.closest('.tf-icon-select').attr('id');\r\n            $('#tf-icon-modal').data('icon-field', fieldId);\r\n        });\r\n\r\n        /*\r\n        * Icon select\r\n        * @author: Foysal\r\n        */\r\n        $(document).on('click', '.tf-icon-list li', function (e) {\r\n            e.preventDefault();\r\n            let $this = $(this);\r\n\r\n            $('.tf-icon-list li').removeClass('active');\r\n            $this.addClass('active');\r\n\r\n            //remove disabled class\r\n            $('.tf-icon-insert').removeClass('disabled');\r\n        });\r\n\r\n        /*\r\n        * Icon insert\r\n        * @author: Foysal\r\n        */\r\n        $(document).on('click', '.tf-icon-insert', function (e) {\r\n            e.preventDefault();\r\n            let $this = $(this),\r\n                fieldId = $('#tf-icon-modal').data('icon-field'),\r\n                field = $('#' + fieldId),\r\n                preview = field.find('.tf-icon-preview'),\r\n                icon = $('.tf-icon-list li.active').data('icon');\r\n\r\n            if (icon) {\r\n                preview.removeClass('tf-hide');\r\n                field.find('.tf-icon-preview-wrap i').attr('class', icon);\r\n                field.find('.tf-icon-value').val(icon).trigger('change');\r\n\r\n                //Close modal\r\n                $('.tf-modal').removeClass('tf-modal-show');\r\n                $('body').removeClass('tf-modal-open');\r\n            }\r\n        })\r\n\r\n        /*\r\n        * Icon search\r\n        * @author: Foysal\r\n        */\r\n        $(document).on('change keyup', '.tf-icon-search-input', function () {\r\n\r\n            let searchVal = $(this).val(),\r\n                $icons = $('#tf-icon-modal').find('.tf-icon-list li');\r\n\r\n            $icons.each(function () {\r\n\r\n                var $this = $(this);\r\n\r\n                if ($this.data('icon').search(new RegExp(searchVal, 'i')) < 0) {\r\n                    $this.hide();\r\n                } else {\r\n                    $this.show();\r\n                }\r\n\r\n            });\r\n\r\n        });\r\n\r\n        /*\r\n        * Icon remove\r\n        * @author: Foysal\r\n        */\r\n        $(document).on('click', '.tf-icon-preview .remove-icon', function (e) {\r\n            e.preventDefault();\r\n            let $this = $(this),\r\n                preview = $this.closest('.tf-icon-preview'),\r\n                iconSelect = $this.closest('.tf-icon-select'),\r\n                iconLi = $('#tf-icon-modal').find('.tf-icon-list li');\r\n\r\n            preview.addClass('tf-hide');\r\n            iconSelect.find('.tf-icon-preview-wrap i').attr('class', '');\r\n            iconSelect.find('.tf-icon-value').val('').trigger('change');\r\n\r\n            //remove active class\r\n            iconLi.removeClass('active');\r\n        })\r\n\r\n        /*\r\n        * Icon Infinite Scroll\r\n        * @author: Foysal\r\n        */\r\n        const tfIconInfiniteScroll = () => {\r\n            var loading = false;\r\n            var startIndex = 0;\r\n            let iconList = $('.tf-icon-tab-pane.active .tf-icon-list');\r\n            let iconListBottom = 0;\r\n\r\n            iconList.scroll(function () {\r\n                let type = $('.tf-icon-tab-pane.active').data('type');\r\n                let max = $('.tf-icon-tab-pane.active').data('max');\r\n                iconListBottom = iconList[0].scrollHeight - iconList.height();\r\n\r\n                if (iconList.scrollTop() >= iconListBottom && !loading && startIndex < max) {\r\n                    loading = true;\r\n                    startIndex += 100;\r\n                    $.ajax({\r\n                        url: tf_options.ajax_url,\r\n                        type: 'POST',\r\n                        data: {\r\n                            action: 'tf_load_more_icons',\r\n                            start_index: startIndex,\r\n                            type: type,\r\n                        },\r\n                        beforeSend: function () {\r\n                            $('.tf-icon-list').append('<div class=\"tf-icon-loading\">Loading...</div>');\r\n                        },\r\n                        success: function (response) {\r\n                            loading = false;\r\n                            $('#tf-icon-tab-'+type+' .tf-icon-list').append(response.data);\r\n                            $('.tf-icon-loading').remove();\r\n                        },\r\n                        error: function (xhr, status, error) {\r\n                            loading = false;\r\n                            console.error(error);\r\n                            $('.tf-icon-loading').remove();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        tfIconInfiniteScroll();\r\n\r\n        /*\r\n        * Options ajax save\r\n        * @author: Foysal\r\n        */\r\n        $(document).on('submit', '.tf-option-form.tf-ajax-save', function (e) {\r\n            e.preventDefault();\r\n            let $this = $(this),\r\n                submitBtn = $this.find('.tf-submit-btn'),\r\n                data = new FormData(this);\r\n            var fontsfile = $('.itinerary-fonts-file').prop(\"files\");\r\n            if (typeof fontsfile !== \"undefined\") {\r\n                for (var i = 0; i < fontsfile.length; i++) {\r\n                    data.append('file[]', fontsfile[i]);\r\n                }\r\n            }\r\n            data.append('action', 'tf_options_save');\r\n\r\n            $.ajax({\r\n                url: tf_options.ajax_url,\r\n                type: 'POST',\r\n                data: data,\r\n                processData: false,\r\n                contentType: false,\r\n                beforeSend: function () {\r\n                    submitBtn.addClass('tf-btn-loading');\r\n                },\r\n                success: function (response) {\r\n                    let obj = JSON.parse(response);\r\n                    if (obj.status === 'success') {\r\n                        notyf.success(obj.message);\r\n                    } else {\r\n                        notyf.error(obj.message);\r\n                    }\r\n                    submitBtn.removeClass('tf-btn-loading');\r\n\r\n                },\r\n                error: function (error) {\r\n                    console.log(error);\r\n                }\r\n            });\r\n        });\r\n\r\n        /*\r\n        * Each select2 field initialize select2\r\n        * @author: Foysal, Sydur\r\n        */\r\n        const tfSelect2Int = select2Selector => {\r\n            let $this = select2Selector,\r\n                id = $this.attr('id'),\r\n                placeholder = $this.data('placeholder');\r\n\r\n            $('#' + id + '').select2({\r\n                placeholder: placeholder,\r\n                allowClear: true,\r\n            });\r\n        }\r\n\r\n        $('select.tf-select2').each(function () {\r\n            var $this = $(this);\r\n            tfSelect2Int($this);\r\n        });\r\n\r\n        $('select.tf-shortcode-select2').each(function(e) {\r\n            let $this = $(this);\r\n            let id = $this.attr(\"id\");\r\n            tfSelect2Int($this);\r\n\r\n            $(this).on(\"select2:select\", function (e) { \r\n                var select_val = $(e.currentTarget).val();\r\n                if(select_val && select_val.includes(\"'all'\")) {\r\n                    $(this).val([\"'all'\"]).trigger('change.select2');\r\n                }\r\n            });\r\n        })\r\n\r\n        /*\r\n        * Room Availability Calendar\r\n        * @since 2.10.2\r\n        * @auther: Foysal\r\n        */\r\n        var roomCal = function (container) {\r\n            var self = this;\r\n            this.container = container;\r\n            this.calendar = null\r\n            this.roomCalData = null;\r\n            this.fullCalendar;\r\n            this.timeOut;\r\n            this.fullCalendarOptions = {\r\n                initialView: 'dayGridMonth',\r\n                firstDay: 1,\r\n                headerToolbar: {\r\n                    start: 'today',\r\n                    center: 'title',\r\n                    end: 'prev,next'\r\n                },\r\n                displayEventTime: true,\r\n                selectable: true,\r\n                select: function ({start, end, startStr, endStr, allDay, jsEvent, view, resource}) {\r\n                    if (moment(start).isBefore(moment(), 'day') || moment(end).isBefore(moment(), 'day')) {\r\n                        self.fullCalendar.unselect();\r\n                        setRoomCheckInOut(\"\", \"\", self.roomCalData);\r\n                    } else {\r\n                        var zone = moment(start).format(\"Z\");\r\n                        zone = zone.split(\":\");\r\n                        zone = \"\" + parseInt(zone[0]) + \":00\";\r\n                        var check_in = moment(start).utcOffset(zone).format(String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase());\r\n                        var check_out = moment(end).utcOffset(zone).subtract(1, 'day').format(String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase());\r\n                        setRoomCheckInOut(check_in, check_out, self.roomCalData);\r\n                    }\r\n                },\r\n                events: function ({start, end, startStr, endStr, timeZone}, successCallback, failureCallback) {\r\n                    $.ajax({\r\n                        url: tf_options.ajax_url,\r\n                        dataType: \"json\",\r\n                        type: \"POST\",\r\n                        data: {\r\n                            action: \"tf_get_hotel_availability\",\r\n                            new_post: $(self.container).find('[name=\"new_post\"]').val(),\r\n                            hotel_id: $(self.container).find('[name=\"hotel_id\"]').val(),\r\n                            room_index: $(self.container).find('[name=\"room_index\"]').val(),\r\n                            avail_date: $(self.container).find('.avail_date').val(),\r\n                        },\r\n                        beforeSend: function () {\r\n                            $(self.container).css({'pointer-events': 'none', 'opacity': '0.5'});\r\n                            $(self.calendar).addClass('tf-content-loading');\r\n                        },\r\n                        success: function (doc) {\r\n                            if (typeof doc == \"object\") {\r\n                                successCallback(doc);\r\n                            }\r\n\r\n                            $(self.container).css({'pointer-events': 'auto', 'opacity': '1'});\r\n                            $(self.calendar).removeClass('tf-content-loading');\r\n                        },\r\n                        error: function (e) {\r\n                            console.log(e);\r\n                        }\r\n                    });\r\n                },\r\n                eventContent: function (arg) {\r\n                    const title = arg.event.title;\r\n                    const eventTitleElement = document.createElement('div');\r\n                    eventTitleElement.classList.add('fc-event-title');\r\n                    eventTitleElement.innerHTML = title;\r\n                    return {domNodes: [eventTitleElement]};\r\n                },\r\n                eventClick: function ({event, el, jsEvent, view}) {\r\n                    let startTime = moment(event.start, String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase())\r\n                        .format(String(tf_options.tf_admin_date_format || 'MM/DD/YYYY').toUpperCase());\r\n                    let endTime;\r\n                    if (event.end) {\r\n                        endTime = moment(event.end, String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase())\r\n                            .format(String(tf_options.tf_admin_date_format || 'MM/DD/YYYY').toUpperCase());\r\n                    } else {\r\n                        endTime = startTime;\r\n                    }\r\n                    setRoomCheckInOut(startTime, endTime, self.roomCalData);\r\n                    let priceBy = $(self.container).closest('.tf-single-repeater-room').find('.tf_room_pricing_by').val();\r\n                    if (priceBy === '1') {\r\n                        if (typeof event.extendedProps.price != 'undefined') {\r\n                            $(\"[name='tf_room_price']\", self.roomCalData).val(event.extendedProps.price);\r\n                        }\r\n                    } else {\r\n                        if (typeof event.extendedProps.adult_price != 'undefined') {\r\n                            $(\"[name='tf_room_adult_price']\", self.roomCalData).val(event.extendedProps.adult_price);\r\n                        }\r\n                        if (typeof event.extendedProps.child_price != 'undefined') {\r\n                            $(\"[name='tf_room_child_price']\", self.roomCalData).val(event.extendedProps.child_price);\r\n                        }\r\n                    }\r\n                    if (event.extendedProps.status) {\r\n                        $(\"[name='tf_room_status'] option[value=\" + event.extendedProps.status + \"]\", self.roomCalData).prop(\"selected\", true);\r\n                    }\r\n                },\r\n            };\r\n            this.init = function () {\r\n                self.container = jQuery(container);\r\n                self.calendar = container.querySelector('.tf-room-cal');\r\n                self.roomCalData = $('.tf-room-cal-field', self.container);\r\n                setRoomCheckInOut('', '', self.roomCalData);\r\n                self.initCalendar();\r\n            }\r\n            this.initCalendar = function () {\r\n                if (typeof FullCalendar != 'undefined') {\r\n                    self.fullCalendar = new FullCalendar.Calendar(self.calendar, self.fullCalendarOptions);\r\n                    self.fullCalendar.render();\r\n                }\r\n            }\r\n        };\r\n\r\n        function setRoomCheckInOut(check_in, check_out, roomCalData) {\r\n            $('.tf_room_check_in', roomCalData).val(check_in);\r\n            $('.tf_room_check_out', roomCalData).val(check_out);\r\n        }\r\n\r\n        function roomResetForm(roomCalData) {\r\n            $('.tf_room_check_in', roomCalData).val('');\r\n            $('.tf_room_check_out', roomCalData).val('');\r\n            $('[name=\"tf_room_price\"]', roomCalData).val('');\r\n            $('[name=\"tf_room_adult_price\"]', roomCalData).val('');\r\n            $('[name=\"tf_room_child_price\"]', roomCalData).val('');\r\n        }\r\n\r\n        const tfHotelCalendar = () => {\r\n            $('.tf-room-cal-wrap').each(function (index, el) {\r\n                var room = new roomCal(el);\r\n                room.init();\r\n            });\r\n        }\r\n        tfHotelCalendar();\r\n\r\n        $('.tf-room-cal-wrap').each(function (index, el) {\r\n            let checkIn = $(el).find('[name=\"tf_room_check_in\"]').flatpickr({\r\n                dateFormat: 'Y-m-d',\r\n                minDate: 'today',\r\n                altInput: true,\r\n                altFormat: tf_options.tf_admin_date_format,\r\n                onChange: function (selectedDates, dateStr, instance) {\r\n                    checkOut.set('minDate', dateStr);\r\n                }\r\n            });\r\n\r\n            let checkOut = $(el).find('[name=\"tf_room_check_out\"]').flatpickr({\r\n                dateFormat: 'Y-m-d',\r\n                minDate: 'today',\r\n                altInput: true,\r\n                altFormat: tf_options.tf_admin_date_format,\r\n                onChange: function (selectedDates, dateStr, instance) {\r\n                    checkIn.set('maxDate', dateStr);\r\n                }\r\n            });\r\n        });\r\n\r\n        $(document).on('click', '.tf_room_cal_update', function (e) {\r\n            e.preventDefault();\r\n\r\n            let btn = $(this);\r\n            let container = btn.closest('.tf-room-cal-wrap');\r\n            let containerEl = btn.closest('.tf-room-cal-wrap')[0];\r\n            let cal = container.find('.tf-room-cal');\r\n            let data = $('input, select', container.find('.tf-room-cal-field')).serializeArray();\r\n            let priceBy = container.closest('.tf-single-repeater-room').find('.tf_room_pricing_by').val();\r\n            let avail_date = container.find('.avail_date');\r\n            data.push({name: 'action', value: 'tf_add_hotel_availability'});\r\n            data.push({name: 'price_by', value: priceBy});\r\n            data.push({name: 'avail_date', value: avail_date.val()});\r\n\r\n            $.ajax({\r\n                url: tf_options.ajax_url,\r\n                type: 'POST',\r\n                data: data,\r\n                beforeSend: function () {\r\n                    container.css({'pointer-events': 'none', 'opacity': '0.5'})\r\n                    cal.addClass('tf-content-loading');\r\n                    btn.addClass('tf-btn-loading');\r\n                },\r\n                success: function (response) {\r\n                    if (typeof response == 'object') {\r\n                        if (response.data.status === true) {\r\n                            avail_date.val(response.data.avail_date)\r\n                            notyf.success(response.data.message);\r\n                            roomResetForm(container);\r\n\r\n                            var room = new roomCal(containerEl);\r\n                            room.init();\r\n                            if (room.fullCalendar) {\r\n                                room.fullCalendar.refetchEvents();\r\n                            }\r\n                        } else {\r\n                            notyf.error(response.data.message);\r\n                        }\r\n\r\n                        container.css({'pointer-events': 'auto', 'opacity': '1'})\r\n                        cal.removeClass('tf-content-loading');\r\n                        btn.removeClass('tf-btn-loading');\r\n                    }\r\n                },\r\n                error: function (e) {\r\n                    console.log(e);\r\n                    container.css({'pointer-events': 'auto', 'opacity': '1'})\r\n                    cal.removeClass('tf-content-loading');\r\n                    btn.removeClass('tf-btn-loading');\r\n                },\r\n                complete: function () {\r\n                    container.css({'pointer-events': 'auto', 'opacity': '1'});\r\n                    cal.removeClass('tf-content-loading');\r\n                    btn.removeClass('tf-btn-loading');\r\n                },\r\n            });\r\n        });\r\n\r\n        $(document).on('change', '.tf_room_pricing_by', function (e) {\r\n            let room = $(this).closest('.tf-single-repeater-room');\r\n            let pricing_by = $(this).val();\r\n\r\n            if (pricing_by === '1') {\r\n                room.find('.tf-price-by-room').show();\r\n                room.find('.tf-price-by-person').hide();\r\n            } else if (pricing_by === '2') {\r\n                room.find('.tf-price-by-person').show();\r\n                room.find('.tf-price-by-room').hide();\r\n            }\r\n        });\r\n\r\n        // Switcher Value Changed\r\n        $(document).on(\"change\", \".tf-switch\", function (e) {\r\n            var $this = $(this);\r\n            if (this.checked) {\r\n                var value = $this.val(1);\r\n            } else {\r\n                var value = $this.val('');\r\n            }\r\n\r\n            if ($this.hasClass('tf_room_availability_by_date')) {\r\n                tfHotelCalendar();\r\n            }\r\n            if ($this.hasClass('tf_apartment_availability_by_date')){\r\n                tfApartmentCalendar();\r\n            }\r\n        });\r\n\r\n        /*\r\n        * Apartment Availability Calendar\r\n        * @since 2.10.2\r\n        * @auther: Foysal\r\n        */\r\n        var apartmentCal = function (container) {\r\n            var self = this;\r\n            this.container = container;\r\n            this.calendar = null\r\n            this.apartmentCalData = null;\r\n            this.fullCalendar;\r\n            this.timeOut;\r\n            this.fullCalendarOptions = {\r\n                initialView: 'dayGridMonth',\r\n                firstDay: 1,\r\n                headerToolbar: {\r\n                    start: 'today',\r\n                    center: 'title',\r\n                    end: 'prev,next'\r\n                },\r\n                displayEventTime: true,\r\n                selectable: true,\r\n                select: function ({start, end, startStr, endStr, allDay, jsEvent, view, resource}) {\r\n                    if (moment(start).isBefore(moment(), 'day') || moment(end).isBefore(moment(), 'day')) {\r\n                        self.fullCalendar.unselect();\r\n                        setAptCheckInOut(\"\", \"\", self.apartmentCalData);\r\n                    } else {\r\n                        var zone = moment(start).format(\"Z\");\r\n                        zone = zone.split(\":\");\r\n                        zone = \"\" + parseInt(zone[0]) + \":00\";\r\n                        var check_in = moment(start).utcOffset(zone).format(String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase());\r\n                        var check_out = moment(end).utcOffset(zone).subtract(1, 'day').format(String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase());\r\n                        setAptCheckInOut(check_in, check_out, self.apartmentCalData);\r\n                    }\r\n                },\r\n                events: function ({start, end, startStr, endStr, timeZone}, successCallback, failureCallback) {\r\n                    $.ajax({\r\n                        url: tf_options.ajax_url,\r\n                        dataType: \"json\",\r\n                        type: \"POST\",\r\n                        data: {\r\n                            action: \"tf_get_apartment_availability\",\r\n                            new_post: $('[name=\"new_post\"]').val(),\r\n                            apartment_id: $('[name=\"apartment_id\"]').val(),\r\n                            apt_availability: $('.apt_availability').val(),\r\n                        },\r\n                        beforeSend: function () {\r\n                            $(self.container).css({'pointer-events': 'none', 'opacity': '0.5'});\r\n                            $(self.calendar).addClass('tf-content-loading');\r\n                        },\r\n                        success: function (doc) {\r\n                            if (typeof doc == \"object\") {\r\n                                successCallback(doc);\r\n                            }\r\n\r\n                            $(self.container).css({'pointer-events': 'auto', 'opacity': '1'});\r\n                            $(self.calendar).removeClass('tf-content-loading');\r\n                        },\r\n                        error: function (e) {\r\n                            console.log(e);\r\n                        }\r\n                    });\r\n                },\r\n                eventContent: function (arg) {\r\n                    const title = arg.event.title;\r\n                    const eventTitleElement = document.createElement('div');\r\n                    eventTitleElement.classList.add('fc-event-title');\r\n                    eventTitleElement.innerHTML = title;\r\n                    return {domNodes: [eventTitleElement]};\r\n                },\r\n                eventClick: function ({event, el, jsEvent, view}) {\r\n                    let startTime = moment(event.start, String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase())\r\n                        .format(String(tf_options.tf_admin_date_format || 'MM/DD/YYYY').toUpperCase());\r\n                    let endTime;\r\n                    if (event.end) {\r\n                        endTime = moment(event.end, String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase())\r\n                            .format(String(tf_options.tf_admin_date_format || 'MM/DD/YYYY').toUpperCase());\r\n                    } else {\r\n                        endTime = startTime;\r\n                    }\r\n                    setAptCheckInOut(startTime, endTime, self.apartmentCalData);\r\n                    let pricingType = $('.tf_apt_pricing_type').val();\r\n                    if (pricingType === 'per_night') {\r\n                        if (typeof event.extendedProps.price != 'undefined') {\r\n                            $(\"[name='tf_apt_price']\", self.apartmentCalData).val(event.extendedProps.price);\r\n                        }\r\n                    } else {\r\n                        if (typeof event.extendedProps.adult_price != 'undefined') {\r\n                            $(\"[name='tf_apt_adult_price']\", self.apartmentCalData).val(event.extendedProps.adult_price);\r\n                        }\r\n                        if (typeof event.extendedProps.child_price != 'undefined') {\r\n                            $(\"[name='tf_apt_child_price']\", self.apartmentCalData).val(event.extendedProps.child_price);\r\n                        }\r\n                        if (typeof event.extendedProps.infant_price != 'undefined') {\r\n                            $(\"[name='tf_apt_infant_price']\", self.apartmentCalData).val(event.extendedProps.infant_price);\r\n                        }\r\n                    }\r\n                    if (event.extendedProps.status) {\r\n                        $(\"[name='tf_apt_status'] option[value=\" + event.extendedProps.status + \"]\", self.apartmentCalData).prop(\"selected\", true);\r\n                    }\r\n                },\r\n            };\r\n            this.init = function () {\r\n                self.container = jQuery(container);\r\n                self.calendar = container.querySelector('.tf-apt-cal');\r\n                self.apartmentCalData = $('.tf-apt-cal-field', self.container);\r\n                setAptCheckInOut('', '', self.apartmentCalData);\r\n                self.initCalendar();\r\n            }\r\n            this.initCalendar = function () {\r\n                if (typeof FullCalendar != 'undefined') {\r\n                    self.fullCalendar = new FullCalendar.Calendar(self.calendar, self.fullCalendarOptions);\r\n                    self.fullCalendar.render();\r\n                }\r\n            }\r\n        };\r\n\r\n        function setAptCheckInOut(check_in, check_out, apartmentCalData) {\r\n            $('.tf_apt_check_in', apartmentCalData).val(check_in);\r\n            $('.tf_apt_check_out', apartmentCalData).val(check_out);\r\n        }\r\n\r\n        function aptResetForm(apartmentCalData) {\r\n            $('.tf_apt_check_in', apartmentCalData).val('');\r\n            $('.tf_apt_check_out', apartmentCalData).val('');\r\n            $('[name=\"tf_apt_price\"]', apartmentCalData).val('');\r\n            $('[name=\"tf_apt_adult_price\"]', apartmentCalData).val('');\r\n            $('[name=\"tf_apt_child_price\"]', apartmentCalData).val('');\r\n            $('[name=\"tf_apt_infant_price\"]', apartmentCalData).val('');\r\n        }\r\n\r\n        const tfApartmentCalendar = () => {\r\n            $('.tf-apt-cal-wrap').each(function (index, el) {\r\n                var apt = new apartmentCal(el);\r\n                apt.init();\r\n\r\n                let checkIn = $(el).find('[name=\"tf_apt_check_in\"]').flatpickr({\r\n                    dateFormat: 'Y-m-d',\r\n                    minDate: 'today',\r\n                    altInput: true,\r\n                    altFormat: tf_options.tf_admin_date_format,\r\n                    onChange: function (selectedDates, dateStr, instance) {\r\n                        checkOut.set('minDate', dateStr);\r\n                    }\r\n                });\r\n\r\n                let checkOut = $(el).find('[name=\"tf_apt_check_out\"]').flatpickr({\r\n                    dateFormat: 'Y-m-d',\r\n                    minDate: 'today',\r\n                    altInput: true,\r\n                    altFormat: tf_options.tf_admin_date_format,\r\n                    onChange: function (selectedDates, dateStr, instance) {\r\n                        checkIn.set('maxDate', dateStr);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        tfApartmentCalendar();\r\n\r\n        $(document).on('click', '.tf_apt_cal_update', function (e) {\r\n            e.preventDefault();\r\n\r\n            let btn = $(this);\r\n            let container = btn.closest('.tf-apt-cal-wrap');\r\n            let containerEl = btn.closest('.tf-apt-cal-wrap')[0];\r\n            let cal = container.find('.tf-apt-cal');\r\n            let data = $('input, select', container.find('.tf-apt-cal-field')).serializeArray();\r\n            let pricingType = $('.tf_apt_pricing_type').val();\r\n            let aptAvailability = container.find('.apt_availability');\r\n            data.push({name: 'action', value: 'tf_add_apartment_availability'});\r\n            data.push({name: 'pricing_type', value: pricingType});\r\n            data.push({name: 'apt_availability', value: aptAvailability.val()});\r\n\r\n            $.ajax({\r\n                url: tf_options.ajax_url,\r\n                type: 'POST',\r\n                data: data,\r\n                beforeSend: function () {\r\n                    container.css({'pointer-events': 'none', 'opacity': '0.5'})\r\n                    cal.addClass('tf-content-loading');\r\n                    btn.addClass('tf-btn-loading');\r\n                },\r\n                success: function (response) {\r\n                    if (typeof response == 'object') {\r\n                        if (response.data.status === true) {\r\n                            aptAvailability.val(response.data.apt_availability)\r\n                            notyf.success(response.data.message);\r\n                            aptResetForm(container);\r\n\r\n                            var apt = new apartmentCal(containerEl);\r\n                            apt.init();\r\n                            if (apt.fullCalendar) {\r\n                                apt.fullCalendar.refetchEvents();\r\n                            }\r\n                        } else {\r\n                            notyf.error(response.data.message);\r\n                        }\r\n\r\n                        container.css({'pointer-events': 'auto', 'opacity': '1'})\r\n                        cal.removeClass('tf-content-loading');\r\n                        btn.removeClass('tf-btn-loading');\r\n                    }\r\n                },\r\n                error: function (e) {\r\n                    console.log(e);\r\n                    container.css({'pointer-events': 'auto', 'opacity': '1'})\r\n                    cal.removeClass('tf-content-loading');\r\n                    btn.removeClass('tf-btn-loading');\r\n                },\r\n                complete: function () {\r\n                    container.css({'pointer-events': 'auto', 'opacity': '1'});\r\n                    cal.removeClass('tf-content-loading');\r\n                    btn.removeClass('tf-btn-loading');\r\n                },\r\n            });\r\n        });\r\n\r\n        $(document).on('change', '.tf_apt_pricing_type', function (e) {\r\n            let pricingType = $(this).val();\r\n\r\n            if (pricingType === 'per_night') {\r\n                $('.tf-price-by-night').show();\r\n                $('.tf-price-by-person').hide();\r\n            } else if (pricingType === '2') {\r\n                $('.tf-price-by-person').show();\r\n                $('.tf-price-by-night').hide();\r\n            }\r\n        });\r\n\r\n\r\n        /*\r\n        * Options WP editor\r\n        * @author: Sydur\r\n        */\r\n        function TF_wp_editor($id) {\r\n            wp.editor.initialize($id, {\r\n                tinymce: {\r\n                    wpautop: true,\r\n                    plugins: 'charmap colorpicker hr lists paste tabfocus textcolor fullscreen wordpress wpautoresize wpeditimage wpemoji wpgallery wplink wptextpattern',\r\n                    toolbar1: 'formatselect,bold,italic,bullist,numlist,blockquote,alignleft,aligncenter,alignright,link,wp_more,spellchecker,fullscreen,wp_adv,listbuttons',\r\n                    toolbar2: 'styleselect,strikethrough,hr,forecolor,pastetext,removeformat,charmap,outdent,indent,undo,redo,wp_help',\r\n                    //   textarea_rows : 20\r\n                },\r\n                quicktags: {buttons: 'strong,em,link,block,del,ins,img,ul,ol,li,code,more,close'},\r\n                mediaButtons: false,\r\n            });\r\n        }\r\n\r\n        $('textarea.wp_editor, textarea.tf_wp_editor').each(function () {\r\n            let $id = $(this).attr('id');\r\n            TF_wp_editor($id);\r\n        });\r\n\r\n        /*\r\n        * Booking Confirmation Field Fixed\r\n        * @since 2.9.28\r\n        * @author: Jahid\r\n        */\r\n        TF_Booking_Confirmation();\r\n\r\n        function TF_Booking_Confirmation() {\r\n            if ($('.tf-repeater-wrap .tf-single-repeater-book-confirm-field').length > 0) {\r\n                $('.tf-repeater-wrap .tf-single-repeater-book-confirm-field').each(function () {\r\n                    let $this = $(this);\r\n                    let repeaterCount = $this.find('input[name=\"tf_repeater_count\"]').val();\r\n                    if (0 == repeaterCount || 1 == repeaterCount || 2 == repeaterCount) {\r\n                        $this.find('.tf_hidden_fields').hide();\r\n                        $this.find('.tf-repeater-icon-clone').hide();\r\n                        $this.find('.tf-repeater-icon-delete').hide();\r\n                    }\r\n                });\r\n            }\r\n            if ($('.tf-repeater-wrap .tf-single-repeater-hotel-book-confirm-field').length > 0) {\r\n                $('.tf-repeater-wrap .tf-single-repeater-hotel-book-confirm-field').each(function () {\r\n                    let $this = $(this);\r\n                    let repeaterCount = $this.find('input[name=\"tf_repeater_count\"]').val();\r\n                    if (0 == repeaterCount || 1 == repeaterCount || 2 == repeaterCount) {\r\n                        $this.find('.tf_hidden_fields').hide();\r\n                        $this.find('.tf-repeater-icon-clone').hide();\r\n                        $this.find('.tf-repeater-icon-delete').hide();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        /*\r\n        * Add New Repeater Item\r\n        * @author: Sydur\r\n        */\r\n        $(document).on('click', '.tf-repeater-icon-add', function () {\r\n            var $this = $(this);\r\n            var $this_parent = $this.parent().parent();\r\n            var id = $(this).attr(\"data-repeater-id\");\r\n            var max = $(this).attr(\"data-repeater-max\");\r\n            var add_value = $this_parent.find('.tf-single-repeater-clone-' + id + ' .tf-single-repeater-' + id + '').clone();\r\n            var count = $this_parent.find('.tf-repeater-wrap-' + id + ' .tf-single-repeater-' + id + '').length;\r\n            var parent_field = add_value.find(':input[name=\"tf_parent_field\"]').val();\r\n            var current_field = add_value.find(':input[name=\"tf_current_field\"]').val();\r\n\r\n            $this_parent.find('.tf-repeater-wrap .tf-field-notice-inner').remove();\r\n            // Chacked maximum repeater\r\n            if (max != '' && count >= max) {\r\n                $this_parent.find('.tf-repeater-wrap').append('<div class=\"tf-field-notice-inner tf-notice-danger\" style=\"display: block;\">You have reached limit in free version. Please subscribe to Pro for unlimited access</div>');\r\n                return false;\r\n            }\r\n\r\n            // Repeater Count Add Value\r\n            add_value.find(':input[name=\"tf_repeater_count\"]').val(count);\r\n\r\n            // Repeater Room Unique ID\r\n            var room_uniqueid = add_value.find('.unique-id input');\r\n            if (typeof room_uniqueid !== \"undefined\") {\r\n                add_value.find('.unique-id input').val(new Date().valueOf() + count);\r\n            }\r\n            let repeatDateField = add_value.find('.tf-field-date');\r\n            if (repeatDateField.length > 0) {\r\n                repeatDateField.find('input').each(function () {\r\n\r\n                    if ($(this).attr('name') == '' || typeof $(this).attr('name') === \"undefined\") {\r\n                        $(this).remove()\r\n                    }\r\n                });\r\n                tfDateInt(repeatDateField);\r\n            }\r\n\r\n            let repeatTimeField = add_value.find('.tf-field-time');\r\n            if (repeatTimeField.length > 0) {\r\n                tfTimeInt(repeatTimeField);\r\n            }\r\n\r\n            let repeatColorField = add_value.find('.tf-field-color');\r\n            if (repeatColorField.length > 0) {\r\n                repeatColorField.find('input.tf-color').each(function () {\r\n                    var color_field =  $(this).clone(); \r\n                    if($(this).closest('li').length > 0){\r\n                        $(this).closest('li').append(color_field);\r\n                    }else{\r\n                        $(this).closest('.tf-fieldset').append(color_field);\r\n                    }\r\n                    $(this).closest('.wp-picker-container').remove();\r\n                 });\r\n                tfColorInt(repeatColorField);\r\n            }\r\n\r\n            if (parent_field == '') {\r\n                // Update  repeater name And id\r\n                add_value.find(':input').each(function () {\r\n                    this.name = this.name.replace('_____', '').replace('[' + current_field + '][00]', '[' + current_field + '][' + count + ']');\r\n                    this.id = this.id.replace('_____', '').replace('[' + current_field + '][00]', '[' + current_field + '][' + count + ']');\r\n                });\r\n                var update_paren = add_value.find('.tf-repeater input[name=\"tf_parent_field\"]').val();\r\n                if (typeof update_paren !== \"undefined\") {\r\n                    var update_paren = update_paren.replace('[' + current_field + '][00]', '[' + current_field + '][' + count + ']');\r\n                }\r\n                add_value.find('.tf-repeater input[name=\"tf_parent_field\"]').val(update_paren);\r\n\r\n            } else {\r\n                // Update  repeater name And id\r\n                var update_paren = add_value.find(':input[name=\"tf_parent_field\"]').val();\r\n                add_value.find(':input').each(function () {\r\n                    this.name = this.name.replace('_____', '').replace('[' + current_field + '][00]', '[' + current_field + '][' + count + ']');\r\n                    this.id = this.id.replace('_____', '').replace('[' + current_field + '][00]', '[' + current_field + '][' + count + ']');\r\n                });\r\n            }\r\n            // Update Repeaterr label\r\n            add_value.find('label').each(function () {\r\n                var for_value = $(this).attr(\"for\");\r\n                if (typeof for_value !== \"undefined\") {\r\n                    for_value = for_value.replace('_____', '').replace('[' + current_field + '][00]', '[' + current_field + '][' + count + ']');\r\n                    $(this).attr(\"for\", for_value);\r\n                }\r\n            });\r\n            // Update Icon select id\r\n            add_value.find('.tf-icon-select').each(function (index) {\r\n                var icon_id = $(this).attr(\"id\");\r\n                if (typeof icon_id !== \"undefined\") {\r\n                    icon_id = icon_id + index + count;\r\n                    $(this).attr(\"id\", icon_id)\r\n\r\n                }\r\n            });\r\n            // Update Data depend id\r\n            add_value.find('[data-depend-id]').each(function () {\r\n                var data_depend_id = $(this).attr(\"data-depend-id\");\r\n                if (typeof data_depend_id !== \"undefined\") {\r\n                    data_depend_id = data_depend_id.replace('[' + current_field + '][00]', '[' + current_field + '][' + count + ']');\r\n                    $(this).attr(\"data-depend-id\", data_depend_id);\r\n                }\r\n            });\r\n            // Update Data Controller\r\n            add_value.find('[data-controller]').each(function () {\r\n                var data_controller = $(this).attr(\"data-controller\");\r\n                if (typeof data_controller !== \"undefined\") {\r\n                    data_controller = data_controller.replace('[' + current_field + '][00]', '[' + current_field + '][' + count + ']');\r\n                    $(this).attr(\"data-controller\", data_controller);\r\n                }\r\n            });\r\n\r\n            // Replace Old editor\r\n            add_value.find('.wp-editor-wrap').each(function () {\r\n                var textarea = $(this).find('.tf_wp_editor').show();\r\n                // Get content of a specific editor:\r\n                var tf_editor_ex_data = $('#' + textarea.attr('id') + '').val();\r\n                if (tf_editor_ex_data && typeof tf_editor_ex_data !== \"undefined\") {\r\n                    var textarea_content = tinymce.get(textarea.attr('id')).getContent();\r\n                } else {\r\n                    var textarea_content = '';\r\n                }\r\n                textarea.val(textarea_content);\r\n                $(this).closest('.tf-field-textarea').append(textarea);\r\n                $(this).remove();\r\n            });\r\n\r\n            // Update Data Append value\r\n            var append = $this_parent.find('.tf-repeater-wrap-' + id + '');\r\n\r\n            add_value.appendTo(append).show();\r\n\r\n            // replace new editor\r\n            add_value.find('textarea.parent_wp_editor').each(function () {\r\n                var count = Math.random().toString(36).substring(3, 9) + 1;\r\n                // this.id = this.id.replace('' + current_field + '__00', '' + current_field + '__' + count + '');\r\n                $(this).attr('id', current_field + count);\r\n                $(this).attr('data-count-id', count);\r\n                var parent_repeater_id = $(this).attr('id');\r\n                TF_wp_editor(parent_repeater_id);\r\n            });\r\n\r\n            // replace new Select 2\r\n            add_value.find('select.tf-select2-parent').each(function () {\r\n                this.id = this.id.replace('' + current_field + '__00', '' + current_field + '__' + count + '');\r\n                var parent_repeater_id = $(this).attr('id');\r\n                var $this = $(this);\r\n                tfSelect2Int($this);\r\n            });\r\n\r\n            // repeater dependency repeater\r\n            TF_dependency();\r\n\r\n            // Booking Confirmation repeater Hidden field\r\n            TF_Booking_Confirmation();\r\n\r\n            tfHotelCalendar();\r\n        });\r\n\r\n        // Repeater Delete Value\r\n        $(document).on('click', '.tf-repeater-icon-delete', function () {\r\n            var max = $(this).attr(\"data-repeater-max\");\r\n            var $this_parent = $(this).closest('.tf-repeater-wrap');\r\n            var count = $this_parent.find('.tf-single-repeater').length;\r\n            // Chacked maximum repeater\r\n\r\n            if (confirm(\"Are you sure to delete this item?\")) {\r\n                $this_parent.find('.tf-field-notice-inner').remove();\r\n                $(this).closest('.tf-single-repeater').remove();\r\n            }\r\n            return false;\r\n        });\r\n\r\n        /*\r\n        * Clone Repeater Item\r\n        * @author: Sydur\r\n        */\r\n        $(document).on('click', '.tf-repeater-icon-clone', function () {\r\n            var $this_parent = $(this).closest('.tf-repeater-wrap');\r\n            let clone_value = $(this).closest('.tf-single-repeater').clone();\r\n            var max = $(this).attr(\"data-repeater-max\");\r\n            var parent_field = clone_value.find('input[name=\"tf_parent_field\"]').val();\r\n            var current_field = clone_value.find('input[name=\"tf_current_field\"]').val();\r\n            var repeater_count = clone_value.find('input[name=\"tf_repeater_count\"]').val();\r\n            var count = $this_parent.find('.tf-single-repeater-' + current_field + '').length;\r\n\r\n            $this_parent.find('.tf-field-notice-inner').remove();\r\n            // Chacked maximum repeater\r\n            if (max != '' && count >= max) {\r\n                $this_parent.append('<div class=\"tf-field-notice-inner tf-notice-danger\" style=\"display: block;\">You have reached limit in free version. Please subscribe to Pro for unlimited access</div>');\r\n                return false;\r\n            }\r\n\r\n            // Repeater Room Unique ID\r\n            var room_uniqueid = clone_value.find('.unique-id input');\r\n            if (typeof room_uniqueid !== \"undefined\") {\r\n                clone_value.find('.unique-id input').val(new Date().valueOf() + count);\r\n            }\r\n\r\n            let repeatDateField = clone_value.find('.tf-field-date');\r\n\r\n            if (repeatDateField.length > 0) {\r\n                repeatDateField.find('input').each(function () {\r\n                    if ($(this).attr('name') == '' || typeof $(this).attr('name') === \"undefined\") {\r\n                        $(this).remove();\r\n                    }\r\n                });\r\n                tfDateInt(repeatDateField);\r\n            }\r\n\r\n            let repeatTimeField = clone_value.find('.tf-field-time');\r\n            if (repeatTimeField.length > 0) {\r\n                tfTimeInt(repeatTimeField);\r\n            }\r\n\r\n            let repeatColorField = clone_value.find('.tf-field-color');\r\n            if (repeatColorField.length > 0) {\r\n                repeatColorField.find('input.tf-color').each(function () {\r\n                    var color_field =  $(this).clone(); \r\n                    if($(this).closest('li').length > 0){\r\n                        $(this).closest('li').append(color_field);\r\n                    }else{\r\n                        $(this).closest('.tf-fieldset').append(color_field);\r\n                    }\r\n                    $(this).closest('.wp-picker-container').remove();\r\n                 });\r\n                tfColorInt(repeatColorField);\r\n            }\r\n\r\n            if (parent_field == '') {\r\n                // Replace input id and name\r\n                clone_value.find(':input').each(function () {\r\n                    if ($(this).closest('.tf-single-repeater-clone').length == 0) {\r\n                        this.name = this.name.replace('_____', '').replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + count + ']');\r\n                        this.id = this.id.replace('_____', '').replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + count + ']');\r\n                    }\r\n                });\r\n                var update_paren = clone_value.find('.tf-repeater input[name=\"tf_parent_field\"]').val();\r\n                if (typeof update_paren !== \"undefined\") {\r\n                    var update_paren = update_paren.replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + count + ']');\r\n                }\r\n                clone_value.find('.tf-repeater input[name=\"tf_parent_field\"]').val(update_paren);\r\n\r\n            } else {\r\n                // Replace input id and name\r\n                clone_value.find(':input').each(function () {\r\n                    if ($(this).closest('.tf-single-repeater-clone').length == 0) {\r\n                        this.name = this.name.replace('_____', '').replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + count + ']');\r\n                        this.id = this.id.replace('_____', '').replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + count + ']');\r\n                    }\r\n                });\r\n            }\r\n            clone_value.find('label').each(function () {\r\n                var for_value = $(this).attr(\"for\");\r\n                if (typeof for_value !== \"undefined\") {\r\n                    for_value = for_value.replace('_____', '').replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + count + ']');\r\n                    var for_value = $(this).attr(\"for\", for_value);\r\n                }\r\n            });\r\n            // Update Icon select id\r\n            clone_value.find('.tf-icon-select').each(function (index) {\r\n                var icon_id = $(this).attr(\"id\");\r\n                if (typeof icon_id !== \"undefined\") {\r\n                    icon_id = icon_id + index + count;\r\n                    $(this).attr(\"id\", icon_id)\r\n\r\n                }\r\n            });\r\n            // Replace Data depend id ID\r\n            clone_value.find('[data-depend-id]').each(function () {\r\n                var data_depend_id = $(this).attr(\"data-depend-id\");\r\n                if (typeof data_depend_id !== \"undefined\") {\r\n                    data_depend_id = data_depend_id.replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + count + ']');\r\n                    $(this).attr(\"data-depend-id\", data_depend_id);\r\n                }\r\n            });\r\n            // Replace Data depend id ID\r\n            clone_value.find('[data-controller]').each(function () {\r\n                var data_controller = $(this).attr(\"data-controller\");\r\n                if (typeof data_controller !== \"undefined\") {\r\n                    data_controller = data_controller.replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + count + ']');\r\n                    $(this).attr(\"data-controller\", data_controller);\r\n                }\r\n            });\r\n            // Replace Data repeter Count id ID\r\n            clone_value.find('input[name=\"tf_repeater_count\"]').val(count)\r\n\r\n            // Replace Old editor\r\n            clone_value.find('.wp-editor-wrap').each(function () {\r\n                var textarea = $(this).find('.tf_wp_editor').show();\r\n                // Get content of a specific editor:\r\n                var tf_editor_ex_data = $('#' + textarea.attr('id') + '').val();\r\n                var textarea_id = textarea.attr('id');\r\n                if (textarea_id != '' && typeof textarea_id !== \"undefined\") {\r\n                    // var textarea_content = tinymce.get(textarea.attr('id')).getContent();\r\n                    var textarea_content = tinymce.editors[textarea_id].getContent();\r\n                } else {\r\n                    var textarea_content = '';\r\n                }\r\n                textarea.val(textarea_content);\r\n                $(this).closest('.tf-field-textarea').append(textarea);\r\n                $(this).remove();\r\n            });\r\n\r\n            // Replace Old Select 2\r\n            clone_value.find('.tf-field-select2').each(function () {\r\n\r\n                var get_selected_value = $(this).find('select.tf-select-two').select2('val')\r\n                $(this).find('select.tf-select-two').removeAttr(\"data-select2-id aria-hidden tabindex\");\r\n                $(this).find('select.tf-select-two option').removeAttr(\"data-select2-id\");\r\n                $(this).find('select.tf-select-two').removeClass(\"select2-hidden-accessible\");\r\n                var select2 = $(this).find('select.tf-select-two').show();\r\n\r\n                select2.val(get_selected_value);\r\n                $(this).find('.tf-fieldset').append(select2);\r\n                $(this).find('span.select2-container').remove();\r\n            });\r\n\r\n            //Append Value\r\n            $(this).closest('.tf-repeater-wrap').append(clone_value).show();\r\n\r\n            // Clone Wp Editor\r\n            clone_value.find('textarea.parent_wp_editor, textarea.wp_editor').each(function () {\r\n                var count = Math.random().toString(36).substring(3, 9) + 1;\r\n                $(this).attr('id', current_field + count);\r\n                $(this).attr('data-count-id', count);\r\n                var parent_repeater_id = $(this).attr('id');\r\n                TF_wp_editor(parent_repeater_id);\r\n            });\r\n\r\n            // Clone Select 2\r\n            clone_value.find('select.tf-select2-parent, select.tf-select2').each(function () {\r\n                this.id = this.id.replace('' + current_field + '__' + repeater_count, '' + current_field + '__' + count + '');\r\n                var $this = $(this);\r\n                tfSelect2Int($this);\r\n            });\r\n\r\n            // Dependency value\r\n            TF_dependency();\r\n\r\n            tfHotelCalendar();\r\n        });\r\n\r\n        // Repeater show hide\r\n        $(document).on('click', '.tf-repeater-title, .tf-repeater-icon-collapse', function () {\r\n            var tf_repater_fieldname = $(this).closest('.tf-single-repeater').find('input[name=tf_current_field]').val();\r\n            $(this).closest('.tf-single-repeater-' + tf_repater_fieldname + '').find('.tf-repeater-content-wrap').slideToggle();\r\n            $(this).closest('.tf-single-repeater-' + tf_repater_fieldname + '').children('.tf-repeater-content-wrap').toggleClass('hide');\r\n            if ($(this).closest('.tf-single-repeater-' + tf_repater_fieldname + '').children('.tf-repeater-content-wrap').hasClass('hide') == true) {\r\n                $(this).closest('.tf-single-repeater-' + tf_repater_fieldname + ' .tf-repeater-header').children('.tf-repeater-icon-collapse').html('<i class=\"fa-solid fa-angle-down\"></i>');\r\n            } else {\r\n                $(this).closest('.tf-single-repeater-' + tf_repater_fieldname + ' .tf-repeater-header').children('.tf-repeater-icon-collapse').html('<i class=\"fa-solid fa-angle-up\"></i>');\r\n            }\r\n\r\n            tfHotelCalendar();\r\n        });\r\n\r\n        // Repeater Drag and  show\r\n        $(\".tf-repeater-wrap\").sortable({\r\n            handle: '.tf-repeater-icon-move',\r\n            start: function (event, ui) { // turn TinyMCE off while sorting (if not, it won't work when resorted)\r\n                var textareaID = $(ui.item).find('.tf_wp_editor').attr('id');\r\n\r\n            },\r\n            stop: function (event, ui) { // re-initialize TinyMCE when sort is completed\r\n                $(ui.item).find('.tf_wp_editor').each(function () {\r\n                    var textareaID = $(this).attr('id');\r\n                    tinyMCE.execCommand('mceRemoveEditor', false, textareaID);\r\n                    tinyMCE.execCommand('mceAddEditor', false, textareaID);\r\n                });\r\n\r\n                // $(this).find('.update-warning').show();\r\n            }\r\n        });\r\n\r\n\r\n        // TAB jquery\r\n        $(document).on('click', '.tf-tab-item', function () {\r\n            var $this = $(this);\r\n            var tab_id = $this.data('tab-id');\r\n            if ($this.parent().parent().find('.tf-tab-item-content').hasClass(\"show\") == true) {\r\n                $this.parent().parent().find('.tf-tab-item-content').removeClass('show');\r\n            }\r\n\r\n            $this.parent().find('.tf-tab-item').removeClass('show');\r\n\r\n            $this.addClass('show');\r\n            $this.parent().parent().find('.tf-tab-item-content[data-tab-id = ' + tab_id + ']').addClass('show');\r\n\r\n            tfApartmentCalendar();\r\n        });\r\n\r\n    });\r\n})(jQuery);\r\n\r\n\r\nfunction openTab(evt, tabName) {\r\n    evt.preventDefault();\r\n    var i, tabcontent, tablinks;\r\n    tabcontent = document.getElementsByClassName(\"tf-tab-content\");\r\n    for (i = 0; i < tabcontent.length; i++) {\r\n        tabcontent[i].style.display = \"none\";\r\n    }\r\n    tablinks = document.getElementsByClassName(\"tf-tablinks\");\r\n    for (i = 0; i < tablinks.length; i++) {\r\n        tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\r\n    }\r\n    document.getElementById(tabName).style.display = \"block\";\r\n    evt.target.className += \" active\";\r\n    jQuery(\".tf-admin-tab\").removeClass('active');\r\n}\r\n\r\nvar frame, gframe;\r\n(function ($) {\r\n    // Single Image remove\r\n    $(document).on(\"click\", \".tf-image-close\", function (e) {\r\n        e.preventDefault();\r\n        $this = $(this);\r\n        var fieldname = $(this).attr(\"tf-field-name\");\r\n        var tf_preview_class = fieldname.replace(/[.[\\]_-]/g, '_');\r\n\r\n        $this.parent().parent().find('input').val('');\r\n        $this.parent().html('');\r\n\r\n    });\r\n\r\n    // Gallery Image remove\r\n    $(document).on(\"click\", \".tf-gallery-remove\", function (e) {\r\n        e.preventDefault();\r\n        $this = $(this);\r\n        var fieldname = $(this).attr(\"tf-field-name\");\r\n        var tf_preview_class = fieldname.replace(/[.[\\]_-]/g, '_');\r\n\r\n        $this.parent().parent().find('input').val('');\r\n        $this.parent().parent().find('.tf-fieldset-gallery-preview').html('');\r\n        $('a.tf-gallery-edit, a.tf-gallery-remove').css(\"display\", \"none\");\r\n\r\n    });\r\n\r\n    $(document).ready(function () {\r\n\r\n        // Single Image Upload\r\n\r\n        $('body').on('click', '.tf-media-upload', function (e) {\r\n            var $this = $(this);\r\n            var fieldname = $(this).attr(\"tf-field-name\");\r\n            var tf_preview_class = fieldname.replace(/[.[\\]_-]/g, '_');\r\n\r\n            frame = wp.media({\r\n                title: \"Select Image\",\r\n                button: {\r\n                    text: \"Insert Image\"\r\n                },\r\n                multiple: false\r\n            });\r\n            frame.on('select', function () {\r\n\r\n                var attachment = frame.state().get('selection').first().toJSON();\r\n                $this.parent().parent().find('input').val(attachment.url);\r\n                $this.parent().parent().find('.tf-fieldset-media-preview').html(`<div class=\"tf-image-close\" tf-field-name='${fieldname}'>✖</div><img src='${attachment.url}' />`);\r\n            });\r\n            frame.open();\r\n            return false;\r\n        });\r\n\r\n        // Gallery Image Upload\r\n\r\n        $('body').on('click', '.tf-gallery-upload, .tf-gallery-edit', function (e) {\r\n            var $this = $(this);\r\n            var fieldname = $(this).attr(\"tf-field-name\");\r\n            var tf_preview_class = fieldname.replace(/[.[\\]_-]/g, '_');\r\n            gframe = wp.media({\r\n                title: \"Select Gallery\",\r\n                button: {\r\n                    text: \"Insert Gallery\"\r\n                },\r\n                multiple: 'add'\r\n            });\r\n\r\n            gframe.on('open', function () {\r\n                var selection = gframe.state().get('selection');\r\n                var ids_value = $this.parent().parent().find('input').val();\r\n\r\n                if (ids_value.length > 0) {\r\n                    var ids = ids_value.split(',');\r\n\r\n                    ids.forEach(function (id) {\r\n                        attachment = wp.media.attachment(id);\r\n                        attachment.fetch();\r\n                        selection.add(attachment ? [attachment] : []);\r\n                    });\r\n                }\r\n            });\r\n\r\n            gframe.on('select', function () {\r\n                var image_ids = [];\r\n                var image_urls = [];\r\n                var attachments = gframe.state().get('selection').toJSON();\r\n                $this.parent().parent().find('.tf-fieldset-gallery-preview').html('');\r\n                for (i in attachments) {\r\n                    var attachment = attachments[i];\r\n                    image_ids.push(attachment.id);\r\n                    image_urls.push(attachment.url);\r\n                    $this.parent().parent().find('.tf-fieldset-gallery-preview').append(`<img src='${attachment.url}' />`);\r\n                }\r\n                $this.parent().parent().find('input').val(image_ids.join(\",\"));\r\n                $this.parent().find('a.tf-gallery-edit, a.tf-gallery-remove').css(\"display\", \"inline-block\");\r\n            });\r\n\r\n            gframe.open();\r\n            return false;\r\n        });\r\n\r\n\r\n        // Texonomy submit event\r\n        $('#addtag > .submit #submit').click(function () {\r\n            $(\".tf-fieldset-media-preview\").html(\"\");\r\n        });\r\n\r\n        if (tf_options.gmaps != \"googlemap\") {\r\n            $(\".tf-field-map\").each(function () {\r\n                var $this = $(this),\r\n                    $map = $this.find('.tf--map-osm'),\r\n                    $search_input = $this.find('.tf--map-search input'),\r\n                    $latitude = $this.find('.tf--latitude'),\r\n                    $longitude = $this.find('.tf--longitude'),\r\n                    $zoom = $this.find('.tf--zoom'),\r\n                    map_data = $map.data('map');\r\n\r\n                var mapInit = L.map($map.get(0), map_data);\r\n\r\n\r\n                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n                    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                }).addTo(mapInit);\r\n\r\n                var mapMarker = L.marker(map_data.center, {draggable: true}).addTo(mapInit);\r\n\r\n                var update_latlng = function (data) {\r\n                    $latitude.val(data.lat);\r\n                    $longitude.val(data.lng);\r\n                    $zoom.val(mapInit.getZoom());\r\n                };\r\n\r\n                $latitude.on('change', function () {\r\n                    console.log('change')\r\n                })\r\n\r\n                function updateLocationField(latitude, longitude) {\r\n                    var apiUrl = 'https://nominatim.openstreetmap.org/reverse?format=json&lat=' + latitude + '&lon=' + longitude;\r\n\r\n                    $.ajax({\r\n                        url: apiUrl,\r\n                        dataType: 'json',\r\n                        success: function (data) {\r\n                            $search_input.val(data.display_name)\r\n                        },\r\n                        error: function (jqXHR, textStatus, errorThrown) {\r\n                            console.error('Error:', textStatus, errorThrown);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                mapInit.on('click', function (data) {\r\n                    mapMarker.setLatLng(data.latlng);\r\n                    update_latlng(data.latlng);\r\n                    updateLocationField(data.latlng.lat, data.latlng.lng)\r\n                });\r\n\r\n                mapInit.on('zoom', function () {\r\n                    update_latlng(mapMarker.getLatLng());\r\n                });\r\n\r\n                mapMarker.on('drag', function () {\r\n                    update_latlng(mapMarker.getLatLng());\r\n                });\r\n\r\n                mapMarker.on('dragend', function (e) {\r\n                    let currentLng = e.target._latlng.lng\r\n                    let currentLat = e.target._latlng.lat\r\n\r\n                    updateLocationField(currentLat, currentLng)\r\n                })\r\n\r\n                if (!$search_input.length) {\r\n                    $search_input = $('[data-depend-id=\"' + $this.find('.tf--address-field').data('address-field') + '\"]');\r\n                }\r\n\r\n\r\n                var cache = {};\r\n\r\n                $search_input.autocomplete({\r\n                    source: function (request, response) {\r\n\r\n                        var term = request.term;\r\n\r\n                        if (term in cache) {\r\n                            response(cache[term]);\r\n                            return;\r\n                        }\r\n\r\n                        $.get('https://nominatim.openstreetmap.org/search', {\r\n                            format: 'json',\r\n                            q: term,\r\n                        }, function (results) {\r\n\r\n                            var data;\r\n\r\n                            if (results.length) {\r\n                                data = results.map(function (item) {\r\n                                    return {\r\n                                        value: item.display_name,\r\n                                        label: item.display_name,\r\n                                        lat: item.lat,\r\n                                        lon: item.lon\r\n                                    };\r\n                                }, 'json');\r\n                            } else {\r\n                                data = [{\r\n                                    value: 'no-data',\r\n                                    label: 'No Results.'\r\n                                }];\r\n                            }\r\n\r\n\r\n                            cache[term] = data;\r\n                            response(data);\r\n\r\n                        });\r\n\r\n                    },\r\n                    select: function (event, ui) {\r\n\r\n                        if (ui.item.value === 'no-data') {\r\n                            return false;\r\n                        }\r\n\r\n                        var latLng = L.latLng(ui.item.lat, ui.item.lon);\r\n\r\n                        mapInit.panTo(latLng);\r\n                        mapMarker.setLatLng(latLng);\r\n                        update_latlng(latLng);\r\n\r\n                    },\r\n                    create: function (event, ui) {\r\n                        $(this).autocomplete('widget').addClass('tf-map-ui-autocomplate');\r\n                    }\r\n                });\r\n\r\n                var input_update_latlng = function () {\r\n\r\n                    var latLng = L.latLng($latitude.val(), $longitude.val());\r\n\r\n                    mapInit.panTo(latLng);\r\n                    mapMarker.setLatLng(latLng);\r\n\r\n                };\r\n\r\n                $latitude.on('change', input_update_latlng);\r\n                $longitude.on('change', input_update_latlng);\r\n\r\n                setInterval(function () {\r\n                    mapInit.invalidateSize();\r\n                }, 100);\r\n            });\r\n        }\r\n\r\n        $('.tf-mobile-tabs').click(function (e) {\r\n            e.preventDefault();\r\n            $(\".tf-admin-tab\").toggleClass('active');\r\n        });\r\n\r\n\r\n        $('.tf-faq-title').click(function () {\r\n            var $this = $(this);\r\n            if (!$this.hasClass(\"active\")) {\r\n                $(\".tf-faq-desc\").slideUp(400);\r\n                $(\".tf-faq-title\").removeClass(\"active\");\r\n            }\r\n            $this.toggleClass(\"active\");\r\n            $this.next().slideToggle();\r\n        });\r\n    });\r\n\r\n\r\n})(jQuery);\r\n\r\n\r\n// Field Dependency\r\n\r\n(function ($) {\r\n\r\n    'use strict';\r\n\r\n    function Rule(controller, condition, value) {\r\n        this.init(controller, condition, value);\r\n    }\r\n\r\n    $.extend(Rule.prototype, {\r\n\r\n        init: function (controller, condition, value) {\r\n\r\n            this.controller = controller;\r\n            this.condition = condition;\r\n            this.value = value;\r\n            this.rules = [];\r\n            this.controls = [];\r\n\r\n        },\r\n\r\n        evalCondition: function (context, control, condition, val1, val2) {\r\n\r\n            if (condition == '==') {\r\n\r\n                return this.checkBoolean(val1) == this.checkBoolean(val2);\r\n\r\n            } else if (condition == '!=') {\r\n\r\n                return this.checkBoolean(val1) != this.checkBoolean(val2);\r\n\r\n            } else if (condition == '>=') {\r\n\r\n                return Number(val2) >= Number(val1);\r\n\r\n            } else if (condition == '<=') {\r\n\r\n                return Number(val2) <= Number(val1);\r\n\r\n            } else if (condition == '>') {\r\n\r\n                return Number(val2) > Number(val1);\r\n\r\n            } else if (condition == '<') {\r\n\r\n                return Number(val2) < Number(val1);\r\n\r\n            } else if (condition == '()') {\r\n\r\n                return window[val1](context, control, val2);\r\n\r\n            } else if (condition == 'any') {\r\n\r\n                if ($.isArray(val2)) {\r\n                    for (var i = val2.length - 1; i >= 0; i--) {\r\n                        if ($.inArray(val2[i], val1.split(',')) !== -1) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if ($.inArray(val2, val1.split(',')) !== -1) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n            } else if (condition == 'not-any') {\r\n\r\n                if ($.isArray(val2)) {\r\n                    for (var i = val2.length - 1; i >= 0; i--) {\r\n                        if ($.inArray(val2[i], val1.split(',')) == -1) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if ($.inArray(val2, val1.split(',')) == -1) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            return false;\r\n\r\n        },\r\n\r\n        checkBoolean: function (value) {\r\n\r\n            switch (value) {\r\n\r\n                case true:\r\n                case 'true':\r\n                case 1:\r\n                case '1':\r\n                    value = true;\r\n                    break;\r\n\r\n                case null:\r\n                case false:\r\n                case 'false':\r\n                case 0:\r\n                case '0':\r\n                    value = false;\r\n                    break;\r\n\r\n            }\r\n\r\n            return value;\r\n        },\r\n\r\n        checkCondition: function (context) {\r\n\r\n            if (!this.condition) {\r\n                return true;\r\n            }\r\n\r\n            var control = context.find(this.controller);\r\n\r\n            var control_value = this.getControlValue(context, control);\r\n\r\n            if (control_value === undefined) {\r\n                return false;\r\n            }\r\n\r\n            control_value = this.normalizeValue(control, this.value, control_value);\r\n\r\n            return this.evalCondition(context, control, this.condition, this.value, control_value);\r\n        },\r\n\r\n        normalizeValue: function (control, baseValue, control_value) {\r\n\r\n            if (typeof baseValue == 'number') {\r\n                return parseFloat(control_value);\r\n            }\r\n\r\n            return control_value;\r\n        },\r\n\r\n        getControlValue: function (context, control) {\r\n\r\n            if (control.length > 1 && (control.attr('type') == 'radio' || control.attr('type') == 'checkbox')) {\r\n\r\n                return control.filter(':checked').map(function () {\r\n                    return this.value;\r\n                }).get();\r\n\r\n            } else if (control.attr('type') == 'checkbox' || control.attr('type') == 'radio') {\r\n\r\n                return control.is(':checked');\r\n\r\n            }\r\n\r\n            return control.val();\r\n\r\n        },\r\n\r\n        createRule: function (controller, condition, value) {\r\n            var rule = new Rule(controller, condition, value);\r\n            this.rules.push(rule);\r\n            return rule;\r\n        },\r\n\r\n        include: function (input) {\r\n            this.controls.push(input);\r\n        },\r\n\r\n        applyRule: function (context, enforced) {\r\n\r\n            var result;\r\n\r\n            if (typeof (enforced) == 'undefined') {\r\n                result = this.checkCondition(context);\r\n            } else {\r\n                result = enforced;\r\n            }\r\n\r\n            var controls = $.map(this.controls, function (elem, idx) {\r\n                return context.find(elem);\r\n            });\r\n\r\n            if (result) {\r\n\r\n                $(controls).each(function () {\r\n                    $(this).removeClass('tf-depend-on');\r\n                });\r\n\r\n                $(this.rules).each(function () {\r\n                    this.applyRule(context);\r\n                });\r\n\r\n            } else {\r\n\r\n                $(controls).each(function () {\r\n                    $(this).addClass('tf-depend-on');\r\n                });\r\n\r\n                $(this.rules).each(function () {\r\n                    this.applyRule(context, false);\r\n                });\r\n\r\n            }\r\n        }\r\n    });\r\n\r\n    function Ruleset() {\r\n        this.rules = [];\r\n    };\r\n\r\n    $.extend(Ruleset.prototype, {\r\n\r\n        createRule: function (controller, condition, value) {\r\n            var rule = new Rule(controller, condition, value);\r\n            this.rules.push(rule);\r\n            return rule;\r\n        },\r\n\r\n        applyRules: function (context) {\r\n            $(this.rules).each(function () {\r\n                this.applyRule(context);\r\n            });\r\n        }\r\n    });\r\n\r\n    $.tf_deps = {\r\n\r\n        createRuleset: function () {\r\n            return new Ruleset();\r\n        },\r\n\r\n        enable: function (selection, ruleset, depends) {\r\n\r\n            selection.on('change keyup', function (elem) {\r\n\r\n                var depend_id = elem.target.getAttribute('data-depend-id') || elem.target.getAttribute('data-sub-depend-id');\r\n\r\n                if (depends.indexOf(depend_id) !== -1) {\r\n                    ruleset.applyRules(selection);\r\n                }\r\n\r\n            });\r\n\r\n            ruleset.applyRules(selection);\r\n\r\n            return true;\r\n        }\r\n    };\r\n\r\n})(jQuery);\r\n\r\n/*\r\n* Author @Jahid\r\n* Report Chart\r\n*/\r\n\r\n(function ($) {\r\n    $(document).ready(function () {\r\n        if (tf_options.tf_chart_enable == 1) {\r\n            var ctx = document.getElementById('tf_months'); // node\r\n            var ctx = document.getElementById('tf_months').getContext('2d'); // 2d context\r\n            var ctx = $('#tf_months'); // jQuery instance\r\n            var ctx = 'tf_months'; // element id\r\n\r\n            var chart = new Chart(ctx, {\r\n                type: 'line',\r\n                data: {\r\n                    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\r\n                    // Information about the dataset\r\n                    datasets: [{\r\n                        label: \"Completed Booking\",\r\n                        borderColor: '#003C79',\r\n                        tension: 0.1,\r\n                        data: tf_options.tf_complete_order,\r\n                        fill: false\r\n                    },\r\n                        {\r\n                            label: \"Cancelled Booking\",\r\n                            borderColor: 'red',\r\n                            tension: 0.1,\r\n                            data: tf_options.tf_cancel_orders,\r\n                            fill: false\r\n                        }\r\n                    ]\r\n                },\r\n\r\n                // Configuration options\r\n                options: {\r\n                    layout: {\r\n                        padding: 10,\r\n                    },\r\n                    legend: {\r\n                        display: true\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        text: \"\"\r\n                    }\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n        $(document).on('change', '#tf-month-report', function () {\r\n            var monthTarget = $(this).val();\r\n            if (monthTarget != 0) {\r\n                $(\"#tf-report-loader\").addClass('show');\r\n                $('.tf-order-report').find('iframe').remove();\r\n                var yearTarget = $(\"#tf-year-report\").val();\r\n                jQuery.ajax({\r\n                    type: 'post',\r\n                    url: tf_options.ajax_url,\r\n                    data: {\r\n                        action: 'tf_month_reports',\r\n                        month: monthTarget,\r\n                        year: yearTarget,\r\n                    },\r\n                    success: function (data) {\r\n                        var response = JSON.parse(data);\r\n                        var ctx = document.getElementById('tf_months'); // node\r\n                        var ctx = document.getElementById('tf_months').getContext('2d'); // 2d context\r\n                        var ctx = $('#tf_months'); // jQuery instance\r\n                        var ctx = 'tf_months'; // element id\r\n\r\n                        var chart = new Chart(ctx, {\r\n                            type: 'line',\r\n                            data: {\r\n                                labels: response.months_day_number,\r\n                                // Information about the dataset\r\n                                datasets: [{\r\n                                    label: \"Completed Booking\",\r\n                                    borderColor: '#003C79',\r\n                                    tension: 0.1,\r\n                                    data: response.tf_complete_orders,\r\n                                    fill: false\r\n                                },\r\n                                    {\r\n                                        label: \"Cancelled Booking\",\r\n                                        borderColor: 'red',\r\n                                        tension: 0.1,\r\n                                        data: response.tf_cancel_orders,\r\n                                        fill: false\r\n                                    }\r\n                                ]\r\n                            },\r\n\r\n                            // Configuration options\r\n                            options: {\r\n                                layout: {\r\n                                    padding: 10,\r\n                                },\r\n                                legend: {\r\n                                    display: true\r\n                                },\r\n                                title: {\r\n                                    display: true,\r\n                                    text: response.tf_search_month\r\n                                }\r\n                            }\r\n\r\n                        });\r\n                        $(\"#tf-report-loader\").removeClass('show');\r\n                    }\r\n                })\r\n            }\r\n        });\r\n\r\n\r\n        $(document).on('change', '#tf-year-report', function () {\r\n            var yearTarget = $(this).val();\r\n            var monthTarget = $(\"#tf-month-report\").val();\r\n            if (yearTarget != 0 && monthTarget != 0) {\r\n                $(\"#tf-report-loader\").addClass('show');\r\n                $('.tf-order-report').find('iframe').remove();\r\n                jQuery.ajax({\r\n                    type: 'post',\r\n                    url: tf_options.ajax_url,\r\n                    data: {\r\n                        action: 'tf_month_reports',\r\n                        month: monthTarget,\r\n                        year: yearTarget,\r\n                    },\r\n                    success: function (data) {\r\n                        var response = JSON.parse(data);\r\n                        var ctx = document.getElementById('tf_months'); // node\r\n                        var ctx = document.getElementById('tf_months').getContext('2d'); // 2d context\r\n                        var ctx = $('#tf_months'); // jQuery instance\r\n                        var ctx = 'tf_months'; // element id\r\n\r\n                        var chart = new Chart(ctx, {\r\n                            type: 'line',\r\n                            data: {\r\n                                labels: response.months_day_number,\r\n                                // Information about the dataset\r\n                                datasets: [{\r\n                                    label: \"Completed Booking\",\r\n                                    borderColor: '#003C79',\r\n                                    tension: 0.1,\r\n                                    data: response.tf_complete_orders,\r\n                                    fill: false\r\n                                },\r\n                                    {\r\n                                        label: \"Cancelled Booking\",\r\n                                        borderColor: 'red',\r\n                                        tension: 0.1,\r\n                                        data: response.tf_cancel_orders,\r\n                                        fill: false\r\n                                    }\r\n                                ]\r\n                            },\r\n\r\n                            // Configuration options\r\n                            options: {\r\n                                layout: {\r\n                                    padding: 10,\r\n                                },\r\n                                legend: {\r\n                                    display: true\r\n                                },\r\n                                title: {\r\n                                    display: true,\r\n                                    text: response.tf_search_month\r\n                                }\r\n                            }\r\n\r\n                        });\r\n                        $(\"#tf-report-loader\").removeClass('show');\r\n                    }\r\n                })\r\n            }\r\n        });\r\n\r\n    });\r\n})(jQuery);\r\n\r\n/**\r\n * Shortcode generator js\r\n * @author Abu Hena\r\n * @since 2.9.3\r\n */\r\n(function ($) {\r\n    //get each of the field value\r\n    $(document).on('click', '.tf-generate-tour .tf-btn', function (event) {\r\n        event.preventDefault();\r\n        var arr = [];\r\n\r\n        $(this).parents('.tf-shortcode-generator-single').find(\".tf-sg-field-wrap\").each(function () {\r\n            var $this = $(this);\r\n            var data = $this.find('.tf-setting-field').val();\r\n            var option_name = $this.find('.tf-setting-field').attr('data-term');\r\n            var post_count = $this.find('.post-count').attr('data-count');\r\n            var section_title = $this.find('.tf-shortcode-title-field ').attr('data-title');\r\n            var section_subtitle = $this.find('.tf-shortcode-subtitle-field ').attr('data-subtitle');\r\n\r\n            if (option_name != undefined && option_name != '') {\r\n                data = option_name + '=' + (data.length ? data : '\"\"');\r\n            }\r\n            if (post_count != undefined && post_count != '') {\r\n                data = post_count + '=' + (data.length ? data : '\"\"');\r\n            }\r\n            if (section_title != undefined && section_title != '') {\r\n                data = section_title + '=' + (data.length ? `\"${data}\"` : '\"\"');\r\n            }\r\n            if (section_subtitle != undefined && section_subtitle != '') {\r\n                data = section_subtitle + '=' + (data.length ? `\"${data}\"` : '\"\"');\r\n            }\r\n            arr.push(data);\r\n        });\r\n\r\n        var allData = arr.filter(Boolean);\r\n        var shortcode = \"[\" + allData.join(' ') + \"]\";\r\n\r\n        $(this).parents('.tf-shortcode-generator-single').find('.tf-shortcode-value').val(shortcode);\r\n        $(this).parents('.tf-shortcode-generator-single').find('.tf-copy-item').slideDown();\r\n    });\r\n\r\n    $(document).on('click', '.tf-sg-close', function (event) {\r\n        $(this).parents('.tf-shortcode-generators').find('.tf-sg-form-wrapper').fadeOut();\r\n    });\r\n\r\n    $(document).on('click', '.tf-shortcode-btn', function (event) {\r\n        var $this = $(this);\r\n        $this.parents('.tf-shortcode-generator-single').find('.tf-sg-form-wrapper').fadeIn();\r\n\r\n        $this.parents('.tf-shortcode-generator-single').mouseup(function (e) {\r\n            var container = $(this).find(\".tf-shortcode-generator-form\");\r\n            var container_parent = container.parent(\".tf-sg-form-wrapper\");\r\n            if (!container.is(e.target) && container.has(e.target).length === 0) {\r\n                container_parent.fadeOut();\r\n            }\r\n        });\r\n\r\n    });\r\n\r\n    //Copy the shortcode value\r\n    $(document).on('click', '.tf-copy-btn', function () {\r\n        var fieldIdValue = $(this).parent('.tf-shortcode-field').find('#tf-shortcode');\r\n        if (fieldIdValue) {\r\n            fieldIdValue.select();\r\n            document.execCommand(\"copy\");\r\n        }\r\n        //show the copied message\r\n        $(this).parents('.tf-copy-item').append('<div><span class=\"tf-copied-msg\">Copied<span></div>');\r\n        $(\"span.tf-copied-msg\").animate({opacity: 0}, 1000, function () {\r\n            $(this).slideUp('slow', function () {\r\n                $(this).remove();\r\n            });\r\n        });\r\n    });\r\n\r\n    // external listing dynamic location\r\n\r\n    $('[name=\"type-selector\"]').on(\"change\", function (e) {\r\n        const selectedValue = $(this).val();\r\n        let termName = \"hotel_location\";\r\n\r\n        if (selectedValue == \"type=apartment\") {\r\n            termName = \"apartment_location\";\r\n        } else if (selectedValue == \"type=tours\") {\r\n            termName = \"tour_destination\";\r\n        } else {\r\n            termName = \"hotel_location\"\r\n        }\r\n\r\n        $.ajax({\r\n            url: tf_options.ajax_url,\r\n            type: 'POST',\r\n            data: {\r\n                action: \"tf_shortcode_type_to_location\",\r\n                typeValue: selectedValue,\r\n                termName: termName\r\n            },\r\n            success: function (res) {\r\n                var select2 = $('#tf_listing_location_shortcode');\r\n                select2.empty();\r\n                select2.append('<option value=\"\">' + \"Select Type First\" + '</option>');\r\n                if (res.data.value.length > 0) {\r\n\r\n                    select2.append('<option value=\"all\">All</option>');\r\n\r\n                    $.each(res.data.value, function (key, value) {\r\n                        if (value.term_id && value.name) {\r\n                            select2.append('<option value=\"' + value.term_id + '\">' + value.name + '</option>');\r\n                        }\r\n                    })\r\n                }\r\n            },\r\n            error: function (response) {\r\n                console.log(response);\r\n            },\r\n        })\r\n    })\r\n    $(\"#tf_listing_location_shortcode\").on(\"select2:select\", function (e) {\r\n        var select_val = $(e.currentTarget).val();\r\n        if (select_val && select_val.includes(\"all\")) {\r\n            $(this).val([\"all\"]).trigger('change.select2');\r\n        }\r\n    });\r\n    \r\n    $(document).ready(function () {\r\n        $('.tf-import-btn').on('click', function (event) {\r\n            event.preventDefault();\r\n\r\n            // Get the import URL from the button's href attribute\r\n            var importUrl = $(this).attr('href');\r\n\r\n            // Get the import data from the textarea\r\n            var importData = $('textarea[name=\"tf_import_option\"]').val().trim();\r\n            if (importData == '') {\r\n                alert(tf_options.tf_export_import_msg.import_empty);\r\n                let importField = $('textarea[name=\"tf_import_option\"]');\r\n                importField.focus();\r\n                importField.css('border', '1px solid red');\r\n                return;\r\n            } else {\r\n                //confirm data before send\r\n                if (!confirm(tf_options.tf_export_import_msg.import_confirm)) {\r\n                    return;\r\n                }\r\n\r\n                $.ajax({\r\n                    url: importUrl,\r\n                    method: 'POST',\r\n                    data: {\r\n                        action: 'tf_import',\r\n                        tf_import_option: importData,\r\n                    },\r\n                    beforeSend: function () {\r\n                        $('.tf-import-btn').html('Importing...');\r\n                        $('.tf-import-btn').attr('disabled', 'disabled');\r\n                    },\r\n                    success: function (response) {\r\n                        if (response.success) {\r\n                            alert(tf_options.tf_export_import_msg.imported);\r\n                            $('.tf-import-btn').html('Imported');\r\n                            window.location.reload();\r\n                        } else {\r\n                            alert('Something went wrong!');\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        })\r\n    });\r\n\r\n    //export the data in txt file\r\n    jQuery(document).ready(function ($) {\r\n        $('.tf-export-btn').on('click', function (event) {\r\n            event.preventDefault();\r\n\r\n            // Get the textarea value\r\n            var textareaValue = $('textarea[name=\"tf_export_option\"]').val();\r\n\r\n            // Create a blob with the textarea value\r\n            var blob = new Blob([textareaValue], {type: 'text/plain'});\r\n\r\n            // Create a temporary URL for the blob\r\n            var url = window.URL.createObjectURL(blob);\r\n\r\n            // Create a temporary link element\r\n            var link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = 'tf-settings-export.txt';\r\n\r\n            // Programmatically click the link to initiate the file download\r\n            link.click();\r\n\r\n            // Clean up the temporary URL\r\n            window.URL.revokeObjectURL(url);\r\n        });\r\n    });\r\n\r\n})(jQuery);\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/tf-options.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_modules__["./sass/admin/js/free/admin.js"]();
/******/ 	__webpack_modules__["./sass/admin/js/free/backend-booking.js"]();
/******/ 	__webpack_modules__["./sass/admin/js/free/booking-details.js"]();
/******/ 	__webpack_modules__["./sass/admin/js/free/required-taxonomies-gutenberg.js"]();
/******/ 	__webpack_modules__["./sass/admin/js/free/required-taxonomies.js"]();
/******/ 	__webpack_modules__["./sass/admin/js/free/setup-wizard.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./sass/admin/js/free/tf-options.js"]();
/******/ 	
/******/ })()
;
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./sass/admin/js/free/admin.js":
/*!*************************************!*\
  !*** ./sass/admin/js/free/admin.js ***!
  \*************************************/
/***/ (() => {

eval("(function ($) {\n\n    $(document).ready(function () {\n\n        // Create an instance of Notyf\n        const notyf = new Notyf({\n            ripple: true,\n            dismissable: true,\n            duration: 3000,\n            position: {\n                x: 'right',\n                y: 'bottom',\n            },\n        });\n\n\n        /**\n         * Delete old review fields\n         * @author kabir, fida\n         */\n        $(document).on('click', '.tf-del-old-review-fields', function (e) {\n            e.preventDefault();\n            var $this = $(this);\n            var data = {\n                action: 'tf_delete_old_review_fields',\n                deleteAll: $(this).data('delete-all'),\n                _ajax_nonce: tf_admin_params.tf_nonce\n            };\n\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: data,\n                beforeSend: function (data) {\n                    notyf.success(tf_admin_params.deleting_old_review_fields);\n                },\n                success: function (data) {\n                    notyf.success(data.data);\n                },\n                error: function (data) {\n                    notyf.error(data.data);\n                },\n\n            });\n\n        });\n\n        /**\n         * Delete room order ids\n         * @author fida\n         */\n        $(document).on('click', '.remove-order-ids', function (e) {\n\n            e.preventDefault();\n\n            var $this = $(this);\n            var post_id = $(\"#post_ID\").val();\n            var meta_field = $this.closest('.tf-repeater-content-wrap').find('.tf-order_id input').attr('name');\n            var data = {\n                action: 'tf_remove_room_order_ids',\n                meta_field: meta_field,\n                post_id: post_id,\n                _ajax_nonce: tf_admin_params.tf_nonce\n            };\n\n            $.ajax({\n                type: 'post',\n                url: ajaxurl,\n                data: data,\n                beforeSend: function (data) {\n                    notyf.success(tf_admin_params.deleting_room_order_ids);\n                },\n                success: function (response) {\n                    notyf.success(response.data.message);\n                    location.reload();\n                },\n                error: function (data) {\n                    notyf.error(data.data);\n                },\n            });\n\n        });\n\n        /**\n         * Tour location required\n         *\n         * show notyf error\n         */\n        $(document).on('click', '.post-type-tf_tours #publish, .post-type-tf_tours #save-post', function (e) {\n            if ($('input[name=\"tf_tours_opt[location][address]\"]').val().length === 0) {\n                e.preventDefault;\n                e.stopImmediatePropagation();\n                notyf.error(tf_admin_params.tour_location_required);\n                return false;\n            }\n        });\n\n        /**\n         * Hotel location required\n         *\n         * show notyf error\n         */\n        $(document).on('click', '.post-type-tf_hotel #publish, .post-type-tf_hotel #save-post', function (e) {\n            if ($('input[name=\"tf_hotels_opt[map][address]\"]').val().length === 0) {\n                e.preventDefault;\n                e.stopImmediatePropagation();\n                notyf.error(tf_admin_params.hotel_location_required);\n                return false;\n            }\n        });\n\n        /**\n         * Apartment location required\n         *\n         * show notyf error\n         */\n        $(document).on('click', '.post-type-tf_apartment #publish, .post-type-tf_apartment #save-post', function (e) {\n            if ($('[name=\"tf_apartment_opt[map][address]\"]').val().length === 0) {\n                e.preventDefault;\n                e.stopImmediatePropagation();\n                notyf.error(tf_admin_params.apartment_location_required);\n                return false;\n            }\n        });\n\n        /**\n         * Ajax install\n         *\n         * @since 1.0\n         */\n        $(document).on('click', '.tf-install', function (e) {\n            e.preventDefault();\n\n            var current = $(this);\n            var plugin_slug = current.attr(\"data-plugin-slug\");\n\n            current.addClass('updating-message').text(tf_admin_params.installing);\n\n            var data = {\n                action: 'tf_ajax_install_plugin',\n                _ajax_nonce: tf_admin_params.tf_nonce,\n                slug: plugin_slug,\n            };\n\n            jQuery.post(tf_admin_params.ajax_url, data, function (response) {\n                current.removeClass('updating-message');\n                current.addClass('updated-message').text(tf_admin_params.installed);\n                current.attr(\"href\", response.data.activateUrl);\n            })\n                .fail(function () {\n                    current.removeClass('updating-message').text(tf_admin_params.install_failed);\n                })\n                .always(function () {\n                    current.removeClass('install-now updated-message').addClass('activate-now button-primary').text(tf_admin_params.activating);\n                    current.unbind(e);\n                    current[0].trigger(\"click\");\n                });\n        });\n\n        /**\n         * Pro Feature button link\n         */\n        $(document).on('click', '.tf-pro', function (e) {\n            e.preventDefault();\n            window.open('https://tourfic.com/');\n        });\n\n        $(window).on('load', function () {\n            $('.tf-field-disable').find('input, select, textarea, button, div, span').attr('disabled', 'disabled');\n        });\n\n        $(document).on('click', '.tf-field-pro', function (e) {\n            e.preventDefault();\n            window.open('https://tourfic.com/');\n        });\n\n        /**\n         * Generate & set unique id for hotel rooms\n         */\n        $(document).on('click', '.room-repeater > div.csf-fieldset > a.csf-repeater-add', function (e) {\n\n            var repeaterNumber = $('.room-repeater .csf-repeater-wrapper [data-depend-id=\"room\"]').length - 2;\n\n            $('.room-repeater .unique-id input').each(function () {\n                repeaterNumber++;\n                if ($('.room-repeater [data-depend-id=\"room\"] [data-depend-id=\"unique_id\"]').val().length === 0) {\n                    $('.room-repeater [name=\"tf_hotel[room][' + repeaterNumber + '][unique_id]\"]').val(new Date().valueOf() + repeaterNumber);\n                }\n            });\n\n        });\n\n        //documentation link open in new tab\n        $('.tf-go-docs').parent().attr('target', '_blank');\n\n        /*\n        * Author @Jahid\n        * Tour Booking Status\n        */\n\n        $('.tf-ticket-status').on(\"click\", function () {\n            if ($(this).is(':checked')) {\n                var order_unique_id = $(this).val();\n                $(\"#tf-booking-status-loader\").addClass('show');\n                jQuery.ajax({\n                    type: 'post',\n                    url: tf_admin_params.ajax_url,\n                    data: {\n                        action: 'tf_ticket_status_change',\n                        _ajax_nonce: tf_admin_params.tf_nonce,\n                        status: \"check in\",\n                        order_unique_id: order_unique_id,\n                    },\n                    success: function (data) {\n                        $(\"#tf-booking-status-loader\").removeClass('show');\n                    }\n                });\n            } else {\n                var order_unique_id = $(this).val();\n                $(\"#tf-booking-status-loader\").addClass('show');\n                jQuery.ajax({\n                    type: 'post',\n                    url: tf_admin_params.ajax_url,\n                    data: {\n                        action: 'tf_ticket_status_change',\n                        _ajax_nonce: tf_admin_params.tf_nonce,\n                        status: \"\",\n                        order_unique_id: order_unique_id,\n                    },\n                    success: function (data) {\n                        $(\"#tf-booking-status-loader\").removeClass('show');\n                    }\n                });\n            }\n        });\n\n        /*\n        * active tourfic affiliate plugin\n        */\n        $(document).on('click', '.tf-affiliate-active', function(e) {\n            e.preventDefault();\n\n            var btn = $(this);\n\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: {\n                    action: 'tf_affiliate_active',\n                    nonce: tf_admin_params.tf_nonce,\n                },\n                beforeSend: function (data) {\n                    btn.addClass('tf-btn-loading').css({'pointer-events': 'none'});\n                },\n                success: function (data) {\n                    let response = JSON.parse(data);\n                    if( response.status === 'success' ) {\n                        notyf.success(response.message);\n\n                        setTimeout(function() {\n                            location.reload();\n                        }, 500);\n                    }\n                    btn.removeClass('tf-btn-loading').css({'pointer-events': 'auto'});\n                },\n                error: function (data) {\n                    btn.removeClass('tf-btn-loading').css({'pointer-events': 'auto'});\n                },\n                complete: function (data) {\n                    btn.removeClass('tf-btn-loading').css({'pointer-events': 'auto'});\n                }\n            })\n        });\n\n        /*\n        * install tourfic affiliate plugin\n        */\n        $(document).on('click', '.tf-affiliate-install', function(e) {\n            e.preventDefault();\n\n            var btn = $(this);\n\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: {\n                    action: 'tf_affiliate_install',\n                    nonce: tf_admin_params.tf_nonce,\n                },\n                beforeSend: function (data) {\n                    btn.addClass('tf-btn-loading').css({'pointer-events': 'none'});\n                },\n                success: function (data) {\n                    let response = JSON.parse(data);\n                    if( response.status === 'success' ) {\n                        location.reload();\n                    }\n                    btn.removeClass('tf-btn-loading').css({'pointer-events': 'auto'});\n                },\n                error: function (data) {\n                    btn.removeClass('tf-btn-loading').css({'pointer-events': 'auto'});\n                }\n            })\n        });\n\n        /*\n        * Author @Jahid\n        * Hotel, Tour, Apartment Duplicator\n        */\n       \n        $('.tf-post-data-duplicate').on('click', function(e) {\n            e.preventDefault();\n            var postID = $(this).data('postid');\n            var postType = $(this).data('posttype');\n            var nonce = $(this).data('nonce');\n            $('#wpcontent').append('<div class=\"tf-duplicator-loader\"></div>');\n            // AJAX request to duplicate post\n            $.ajax({\n                type: 'POST',\n                url: tf_admin_params.ajax_url,\n                data: {\n                    action: 'tf_duplicate_post_data',\n                    postID: postID,\n                    postType: postType,\n                    security: nonce\n                },\n                success: function(response) {\n                    window.location.reload();\n                },\n                error: function(errorThrown) {\n                    // Handle errors (if any)\n                    console.error('Error duplicating post:', errorThrown);\n                }\n            });\n        });\n\n    });\n\n})(jQuery);\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/admin.js?");

/***/ }),

/***/ "./sass/admin/js/free/backend-booking.js":
/*!***********************************************!*\
  !*** ./sass/admin/js/free/backend-booking.js ***!
  \***********************************************/
/***/ (() => {

eval("(function ($) {\n    $(document).ready(function () {\n\n        // Create an instance of Notyf\n        const notyf = new Notyf({\n            ripple: true,\n            duration: 3000,\n            dismissable: true,\n            position: {\n                x: 'right',\n                y: 'bottom',\n            },\n        });\n\n        /*\n        * Check available hotel room from date to date\n        * Author @Foysal\n        */\n        $(document).on('change', '[name=\"tf_hotel_date[from]\"], [name=\"tf_hotel_date[to]\"]', function (e) {\n            e.preventDefault();\n\n            var from = $('[name=\"tf_hotel_date[from]\"]').val();\n            var to = $('[name=\"tf_hotel_date[to]\"]').val();\n\n            if (from.length > 0 && to.length > 0) {\n                jQuery.ajax({\n                    type: 'post',\n                    url: tf_admin_params.ajax_url,\n                    data: {\n                        action: 'tf_check_available_hotel',\n                        _nonce: tf_admin_params.tf_nonce,\n                        from: from,\n                        to: to,\n                    },\n                    beforeSend: function () {\n                        $('#tf-backend-hotel-book-btn').attr('disabled', 'disabled');\n                    },\n                    success: function (response) {\n                        if(!response.success){\n                            notyf.error(response.data)\n                        } else {\n                            var select2 = $('[name=\"tf_available_hotels\"]');\n                            select2.empty();\n                            select2.append('<option value=\"\">' + tf_admin_params.select_hotel + '</option>');\n                            $.each(response.data.hotels, function (key, value) {\n                                select2.append('<option value=\"' + key + '\">' + value + '</option>');\n                            });\n                            select2.select2();\n                            //select the first option\n                            select2.val(select2.find('option:eq(1)').val()).trigger('change');\n                            $('#tf-backend-hotel-book-btn').removeAttr('disabled');\n                            $('[name=\"tf_hotel_rooms_number\"]').removeAttr('disabled');\n                        }\n                    },\n                    error: function (response) {\n                        console.log(response);\n                    },\n                    complete: function (response) {\n                        $('#tf-backend-hotel-book-btn').removeAttr('disabled');\n                    }\n                });\n            }\n        });\n\n        /*\n        * Room filter on hotel change\n        * Author @Foysal\n        */\n        $(document).on('change', '[name=\"tf_available_hotels\"]', function (e) {\n            e.preventDefault();\n\n            var hotel_id = $('[name=\"tf_available_hotels\"]').val();\n            var from = $('[name=\"tf_hotel_date[from]\"]').val();\n            var to = $('[name=\"tf_hotel_date[to]\"]').val();\n\n            if (hotel_id.length > 0) {\n                jQuery.ajax({\n                    type: 'post',\n                    url: tf_admin_params.ajax_url,\n                    data: {\n                        action: 'tf_check_available_room',\n                        _nonce: tf_admin_params.tf_nonce,\n                        hotel_id: hotel_id,\n                        from: from,\n                        to: to,\n                    },\n                    beforeSend: function () {\n                        $('#tf-backend-hotel-book-btn').attr('disabled', 'disabled');\n                    },\n                    success: function (response) {\n                        if(!response.success){\n                            notyf.error(response.data)\n                        } else {\n                            var select2 = $('[name=\"tf_available_rooms\"]');\n                            var serviceSelect = $('[name=\"tf_hotel_service_type\"]');\n\n                            select2.removeAttr('disabled');\n                            select2.empty();\n                            select2.append('<option value=\"\">' + tf_admin_params.select_room + '</option>');\n                            $.each(response.data.rooms, function (key, value) {\n                                select2.append('<option value=\"' + key + '\">' + value + '</option>');\n                            });\n                            select2.select2();\n                            //auto select the first option\n                            select2.val(select2.find('option:eq(1)').val()).trigger('change');\n\n                            //service type select\n                            serviceSelect.empty();\n                            $.each(response.data.services, function (key, value) {\n                                serviceSelect.append('<option value=\"' + key + '\">' + value + '</option>');\n                            });\n\n                            $('#tf-backend-hotel-book-btn').removeAttr('disabled');\n                        }\n                    },\n                    error: function (response) {\n                        console.log(response);\n                    },\n                    complete: function (response) {\n                        $('#tf-backend-hotel-book-btn').removeAttr('disabled');\n                    }\n                });\n            }\n        });\n\n        /*\n        * Room adults, children, infants fields update on room change\n        * Author @Foysal\n        */\n        $(document).on('change', '[name=\"tf_available_rooms\"]', function (e) {\n            e.preventDefault();\n\n            let hotel_id = $('[name=\"tf_available_hotels\"]').val();\n            let room_id = $('[name=\"tf_available_rooms\"]').val();\n            var from = $('[name=\"tf_hotel_date[from]\"]').val();\n            var to = $('[name=\"tf_hotel_date[to]\"]').val();\n\n            if (room_id.length > 0) {\n                jQuery.ajax({\n                    type: 'post',\n                    url: tf_admin_params.ajax_url,\n                    data: {\n                        action: 'tf_update_room_fields',\n                        _nonce: tf_admin_params.tf_nonce,\n                        hotel_id: hotel_id,\n                        room_id: room_id,\n                        from: from,\n                        to: to,\n                    },\n                    beforeSend: function () {\n                        $('#tf-backend-hotel-book-btn').attr('disabled', 'disabled');\n                    },\n                    success: function (response) {\n                        if(!response.success){\n                            notyf.error(response.data)\n                        } else {\n                            var select = $('[name=\"tf_hotel_rooms_number\"]');\n                            select.empty();\n                            \n                            if(response.data.rooms > 0 ){\n                                for (var i = 1; i <= response.data.rooms; i++) {\n                                    if (i === 1) {\n                                        select.append('<option value=\"' + i + '\" selected>' + i + ' Room</option>');\n                                    } else {\n                                        select.append('<option value=\"' + i + '\">' + i + ' Rooms</option>');\n                                    }\n                                }\n                                \n                                $('#tf-backend-hotel-book-btn').removeAttr('disabled');\n                            } else {\n                                select.append('<option value=\"\" selected>No Room Available</option>');\n                                select.attr('disabled', 'disabled');\n                            }\n\n                            $('[name=\"tf_hotel_adults_number\"]').val(response.data.adults).attr('max', response.data.adults * response.data.rooms);\n                            $('[name=\"tf_hotel_children_number\"]').val(response.data.children).attr('max', response.data.children * response.data.rooms);\n                        }\n                    },\n                    error: function (response) {\n                        console.log(response);\n                        $('#tf-backend-hotel-book-btn').removeAttr('disabled');\n                    },\n                });\n            }\n        });\n\n        /*\n        * Backend Hotel Booking\n        * Author @Foysal\n        */\n        $(document).on('click', '#tf-backend-hotel-book-btn', function (e) {\n            e.preventDefault();\n\n            let btn = $(this);\n            let form = btn.closest('form.tf-backend-hotel-booking');\n            let formData = new FormData(form[0]);\n            formData.append('action', 'tf_backend_hotel_booking');\n            let requiredFields = [\n                'tf_hotel_booked_by', 'tf_customer_first_name', 'tf_customer_email', 'tf_customer_phone', 'tf_customer_country', 'tf_customer_address', 'tf_customer_city', 'tf_customer_state', 'tf_customer_zip', 'tf_hotel_date[from]', 'tf_hotel_date[to]', 'tf_available_hotels', 'tf_available_rooms', 'tf_hotel_rooms_number', 'tf_hotel_adults_number', 'tf_hotel_children_number'];\n\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: formData,\n                processData: false,\n                contentType: false,\n                beforeSend: function (response) {\n                    btn.addClass('tf-btn-loading');\n                },\n                success: function (response) {\n                    const obj = JSON.parse(response);\n                    if (!obj.success) {\n                        if (obj.message) {\n                            Swal.fire(\n                                'Error!',\n                                obj.message,\n                                'error'\n                            )\n                            form.find('input').removeClass('error-input');\n                            form.find('select').removeClass('error-input');\n                            form.find('textarea').removeClass('error-input');\n                            form.find('input').closest('.tf-fieldset').find('small.text-danger').remove();\n                            form.find('select').closest('.tf-fieldset').find('small.text-danger').remove();\n                            form.find('textarea').closest('.tf-fieldset').find('small.text-danger').remove();\n                        } else {\n\n                            for (const requiredField of requiredFields) {\n                                const errorField = obj['fieldErrors'][requiredField + '_error'];\n\n                                form.find('[name=\"' + requiredField + '\"]').removeClass('error-input');\n                                if (requiredField === 'tf_hotel_date[from]') {\n                                    form.find('[name=\"' + requiredField + '\"]').closest('.tf-date-from').find('small.text-danger').remove();\n                                } else if (requiredField === 'tf_hotel_date[to]') {\n                                    form.find('[name=\"' + requiredField + '\"]').closest('.tf-date-to').find('small.text-danger').remove();\n                                } else {\n                                    form.find('[name=\"' + requiredField + '\"]').closest('.tf-fieldset').find('small.text-danger').remove();\n                                }\n                                if (errorField) {\n                                    form.find('[name=\"' + requiredField + '\"]').addClass('error-input');\n                                    if (requiredField === 'tf_hotel_date[from]') {\n                                        form.find('[name=\"' + requiredField + '\"]').closest('.tf-date-from').append('<small class=\"text-danger\">' + errorField + '</small>');\n                                    } else if (requiredField === 'tf_hotel_date[to]') {\n                                        form.find('[name=\"' + requiredField + '\"]').closest('.tf-date-to').append('<small class=\"text-danger\">' + errorField + '</small>');\n                                    } else {\n                                        form.find('[name=\"' + requiredField + '\"]').closest('.tf-fieldset').append('<small class=\"text-danger\">' + errorField + '</small>');\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        Swal.fire(\n                            'Success!',\n                            obj.message,\n                            'success'\n                        )\n                        form[0].reset();\n                        form.find('input').removeClass('error-input');\n                        form.find('select').removeClass('error-input');\n                        form.find('textarea').removeClass('error-input');\n                        form.find('input').closest('.tf-fieldset').find('small.text-danger').remove();\n                        form.find('select').closest('.tf-fieldset').find('small.text-danger').remove();\n                        form.find('textarea').closest('.tf-fieldset').find('small.text-danger').remove();\n                    }\n                    btn.removeClass('tf-btn-loading');\n                },\n                error: function (response) {\n                    console.log(response);\n                },\n                complete: function (response) {\n                    btn.removeClass('tf-btn-loading');\n                }\n            })\n\n        });\n\n\n        /*\n        * Check available tour by date\n        * Author @Foysal\n        */\n        /*$(document).on('change', '[name=\"tf_tour_date\"], [name=\"tf_tour_adults_number\"], [name=\"tf_tour_children_number\"]', function (e) {\n            e.preventDefault();\n\n            var tourDate = $('[name=\"tf_tour_date\"]').val();\n            var adults = $('[name=\"tf_tour_adults_number\"]').val();\n            var children = $('[name=\"tf_tour_children_number\"]').val();\n\n            if (tourDate.length > 0 && adults.length > 0) {\n                jQuery.ajax({\n                    type: 'post',\n                    url: tf_admin_params.ajax_url,\n                    data: {\n                        action: 'tf_check_available_tour',\n                        tourDate: tourDate,\n                        adults: adults,\n                        children: children\n                    },\n                    beforeSend: function () {\n                        $('#tf-backend-tour-book-btn').attr('disabled', 'disabled');\n                    },\n                    success: function (response) {\n                        var select2 = $('[name=\"tf_available_tours\"]');\n                        select2.empty();\n                        select2.append('<option value=\"\">' + tf_admin_params.select_tour + '</option>');\n                        $.each(response.data.tours, function (key, value) {\n                            select2.append('<option value=\"' + key + '\">' + value + '</option>');\n                        });\n                        select2.select2();\n                        //select the first option\n                        select2.val(select2.find('option:eq(1)').val()).trigger('change');\n                        $('#tf-backend-tour-book-btn').removeAttr('disabled');\n                    }\n                });\n            }\n        });*/\n\n        /*\n        * Tour time and extra fields update\n        * Author @Foysal\n        */\n        $(document).on('change', '[name=\"tf_available_tours\"]', function (e) {\n            e.preventDefault();\n\n            var tourId = $('[name=\"tf_available_tours\"]').val();\n\n            if (tourId.length > 0) {\n                jQuery.ajax({\n                    type: 'post',\n                    url: tf_admin_params.ajax_url,\n                    data: {\n                        action: 'tf_tour_date_time_update',\n                        _nonce: tf_admin_params.tf_nonce,\n                        tour_id: tourId,\n                    },\n                    beforeSend: function () {\n                        $('#tf-backend-hotel-book-btn').attr('disabled', 'disabled');\n                    },\n                    success: function (response) {\n                        if(!response.success){\n                            notyf.error(response.data)\n                        } else {\n                            const obj = JSON.parse(response);\n\n                            if (obj.custom_avail !== '1') {\n                                populateTimeSelect(obj.allowed_times)\n                            }\n\n                            let flatpickerObj = {\n                                enableTime: false,\n                                // altInput: true,\n                                // altFormat: tf_admin_params.date_format_change_backend,\n                                dateFormat: \"Y/m/d\",\n                            };\n                            if (obj.tour_type === 'fixed') {\n                                flatpickerObj.mode = \"range\";\n                                flatpickerObj.defaultDate = [obj.departure_date, obj.return_date];\n                                flatpickerObj.enable = [\n                                    {\n                                        from: obj.departure_date,\n                                        to: obj.return_date\n                                    }\n                                ];\n                                flatpickerObj.onReady = function (selectedDates, dateStr, instance) {\n                                    instance.element.value = dateStr.replace(/[a-z]+/g, '-');\n                                };\n                            } else if (obj.tour_type === 'continuous') {\n                                flatpickerObj.minDate = \"today\";\n                                flatpickerObj.disableMobile = \"true\";\n                                if (obj.custom_avail === '1') {\n                                    flatpickerObj.enable = [];\n                                    if (obj.cont_custom_date) {\n                                        for (const item of obj.cont_custom_date) {\n                                            flatpickerObj.enable.push({\n                                                from: item.date.from,\n                                                to: item.date.to\n                                            });\n                                        }\n                                    }\n                                }\n                                if (obj.custom_avail !== '1') {\n                                    if (obj.disabled_day || obj.disable_range || obj.disable_specific) {\n                                        flatpickerObj.disable = [];\n                                        if (obj.disabled_day) {\n                                            flatpickerObj.disable.push(function (date) {\n                                                return (date.getDay() === 8 || obj.disabled_day.includes(date.getDay().toString()));\n                                            });\n                                        }\n                                        if (obj.disable_range) {\n                                            for (const d_item of obj.disable_range) {\n                                                flatpickerObj.disable.push({\n                                                    from: d_item.date.from,\n                                                    to: d_item.date.to\n                                                });\n                                            }\n                                        }\n                                        if (obj.disable_specific2) {\n                                            for (const d_item of obj.disable_specific2) {\n                                                flatpickerObj.disable.push(d_item);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            flatpickerObj.onChange = function (selectedDates, dateStr, instance) {\n                                if (obj.custom_avail === '1') {\n                                    let times = obj.allowed_times.filter((v) => {\n                                        let date_str = Date.parse(dateStr);\n                                        let start_date = Date.parse(v.date.from);\n                                        let end_date = Date.parse(v.date.to);\n                                        return start_date <= date_str && end_date >= date_str;\n                                    });\n                                    times = times.length > 0 && times[0].times ? times[0].times : null;\n                                    populateTimeSelect(times);\n                                }\n                                instance.element.value = dateStr.replace(/[a-z]+/g, '-');\n                            }\n\n                            $(\"[name='tf_tour_date']\").flatpickr(flatpickerObj);\n\n                            if (obj.tour_extras_array.length > 0) {\n                                let extras = $('[name=\"tf_tour_extras[]\"]');\n                                extras.removeAttr('disabled');\n                                extras.empty();\n                                $.each(obj.tour_extras_array, function (key, value) {\n                                    extras.append('<option value=\"' + key + '\">' + value + '</option>');\n                                });\n                                extras.select2();\n                            } else {\n                                let extras = $('[name=\"tf_tour_extras[]\"]');\n                                extras.empty();\n                                extras.attr('disabled', 'disabled');\n                            }\n\n                            $('#tf-backend-hotel-book-btn').removeAttr('disabled');\n                        }\n                    }\n                });\n            }\n        });\n\n        function populateTimeSelect(times) {\n            let timeSelect = $('[name=\"tf_tour_time\"]');\n            timeSelect.empty();\n            if (times.length > 0) {\n                timeSelect.removeAttr('disabled');\n                timeSelect.append(`<option value=\"\" selected>Select Time</option>`);\n                $.each(times, function (i, v) {\n                    timeSelect.append(`<option value=\"${i}\">${v}</option>`);\n                });\n            } else {\n                timeSelect.append(`<option value=\"\" selected>No Time Available</option>`);\n                timeSelect.attr('disabled', 'disabled');\n            }\n        }\n\n        /*\n        * Backend Tour Booking\n        * Author @Foysal\n        */\n        $(document).on('click', '#tf-backend-tour-book-btn', function (e) {\n            e.preventDefault();\n\n            let btn = $(this);\n            let form = btn.closest('form.tf-backend-tour-booking');\n            let formData = new FormData(form[0]);\n            formData.append('action', 'tf_backend_tour_booking');\n            let requiredFields = ['tf_tours_booked_by', 'tf_customer_first_name', 'tf_customer_email', 'tf_customer_phone', 'tf_customer_country', 'tf_customer_address', 'tf_customer_city', 'tf_customer_state', 'tf_customer_zip', 'tf_tour_date', 'tf_available_tours', 'tf_tour_adults_number', 'tf_tour_children_number'];\n\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: formData,\n                processData: false,\n                contentType: false,\n                beforeSend: function (response) {\n                    btn.addClass('tf-btn-loading');\n                },\n                success: function (response) {\n                    const obj = JSON.parse(response);\n                    if (!obj.success) {\n\n                        if (obj.errors) {\n                            obj.errors.forEach(function (text) {\n                                notyf.error(text);\n                            });\n                        }\n\n                        form.find('input').removeClass('error-input');\n                        form.find('select').removeClass('error-input');\n                        form.find('textarea').removeClass('error-input');\n                        form.find('input').closest('.tf-fieldset').find('small.text-danger').remove();\n                        form.find('select').closest('.tf-fieldset').find('small.text-danger').remove();\n                        form.find('textarea').closest('.tf-fieldset').find('small.text-danger').remove();\n\n                        if (obj['fieldErrors']) {\n                            for (const requiredField of requiredFields) {\n                                const errorField = obj['fieldErrors'][requiredField + '_error'];\n\n                                form.find('[name=\"' + requiredField + '\"]').removeClass('error-input');\n                                form.find('[name=\"' + requiredField + '\"]').closest('.tf-fieldset').find('small.text-danger').remove();\n                                if (errorField) {\n                                    form.find('[name=\"' + requiredField + '\"]').addClass('error-input');\n                                    form.find('[name=\"' + requiredField + '\"]').closest('.tf-fieldset').append('<small class=\"text-danger\">' + errorField + '</small>');\n                                }\n                            }\n                        }\n                    } else {\n                        Swal.fire(\n                            'Success!',\n                            obj.message,\n                            'success'\n                        )\n                        form[0].reset();\n                        form.find('input').removeClass('error-input');\n                        form.find('select').removeClass('error-input');\n                        form.find('textarea').removeClass('error-input');\n                        form.find('input').closest('.tf-fieldset').find('small.text-danger').remove();\n                        form.find('select').closest('.tf-fieldset').find('small.text-danger').remove();\n                        form.find('textarea').closest('.tf-fieldset').find('small.text-danger').remove();\n                    }\n                    btn.removeClass('tf-btn-loading');\n                },\n            })\n\n        });\n\n        /**\n         * Backend Apartments Booking\n        */\n        \n        // Chekck Available Apartment by Date\n\n        $(document).on('change', '[name=\"tf_apartment_date[from]\"], [name=\"tf_apartment_date[to]\"]', function (e) {\n            e.preventDefault();\n\n            var fromValue = $('[name=\"tf_apartment_date[from]\"]').val();\n            var toValue = $('[name=\"tf_apartment_date[to]\"]').val();\n            var apartment_id = $('[name=\"tf_available_apartments\"]').val()\n\n            if (fromValue.length > 0 && toValue.length > 0) {\n                jQuery.ajax({\n                    type: 'post',\n                    url: tf_admin_params.ajax_url,\n                    data: {\n                        action: 'tf_check_available_apartment',\n                        _nonce: tf_admin_params.tf_nonce,\n                        from: fromValue,\n                        to: toValue,\n                        apartment_id: apartment_id\n                    },\n                    beforeSend: function () {\n                        $('#tf-backend-apartment-book-btn').attr('disabled', 'disabled');\n                    },\n                    success: function (response) {\n                        if(!response.success){\n                            notyf.error(response.data)\n                        } else {\n                            var select2 = $('[name=\"tf_available_apartments\"]');\n                            select2.empty();\n                            select2.append('<option value=\"\">' + 'Select Apartment' + '</option>');\n                            $.each(response.data.apartments, function (key, value) {\n                                select2.append('<option value=\"' + key + '\">' + value + '</option>');\n                            });\n                            // select2.select2();\n\n                            //select the first option\n                            select2.val(select2.find('option:eq(1)').val()).trigger('change');\n                            $('#tf-backend-apartment-book-btn').removeAttr('disabled');\n                        }\n                    },\n                    error: function (response) {\n                        console.log(response);\n                    },\n                    complete: function (response) {\n                        $('#tf-backend-apartment-book-btn').removeAttr('disabled');\n                    }\n                });\n            }\n        })\n        \n        // Available Additional Fees\n\n        $(document).on('change', '[name=\"tf_available_apartments\"]', function (e) {\n            e.preventDefault();\n\n            var apartment_id = $('[name=\"tf_available_apartments\"]').val();\n            var from = $('[name=\"tf_apartment_date[from]\"]').val();\n            var to = $('[name=\"tf_apartment_date[to]\"]').val();\n\n            if (apartment_id.length > 0) {\n                jQuery.ajax({\n                    type: 'post',\n                    url: tf_admin_params.ajax_url,\n                    data: {\n                        action: 'tf_check_apartment_aditional_fees',\n                        _nonce: tf_admin_params.tf_nonce,\n                        apartment_id: apartment_id,\n                        from: from,\n                        to: to,\n                    },\n                    beforeSend: function () {\n                        $('#tf-backend-apartment-book-btn').attr('disabled', 'disabled');\n                    },\n                    success: function (response) {\n                        if(!response.success){\n                            notyf.error(response.data)\n                        } else {\n                            var serviceSelect = $('[name=\"tf_apartment_additional_fees\"]');\n\n                            serviceSelect.select2({multiple: true});\n\n                            //Additional fees auto selection\n                            serviceSelect.empty();\n\n                            if (response.data.additional_fees.length > 0) {\n                                $.each(response.data.additional_fees, function (key, value) {\n                                    serviceSelect.append('<option value=\"' + key + '\">' + value.label + ' - ' + value.price + '</option>');\n                                });\n                            } else {\n                                serviceSelect.append('<option value=\"' + 1 + '\">' + 'There are no additional fees' + '</option>');\n                            }\n\n                            serviceSelect.find('option').prop('selected', true).trigger('change');\n\n                            $('#tf-backend-apartment-book-btn').removeAttr('disabled');\n                        }\n                    },\n                    error: function (response) {\n                        console.log(response);\n                    },\n                    complete: function (response) {\n                        $('#tf-backend-apartment-book-btn').removeAttr('disabled');\n                    }\n                });\n            }\n        });\n\n        /*\n        * Backend Apartment Booking\n        */\n        $(document).on('click', '#tf-backend-apartment-book-btn', function (e) {\n            e.preventDefault();\n\n            let btn = $(this);\n            let form = btn.closest('form.tf-backend-apartment-booking');\n            let formData = new FormData(form[0]);\n            formData.append('action', 'tf_backend_apartment_booking');\n            let requiredFields = [\n                'tf_apartment_booked_by',\n                'tf_apartment_customer_first_name',\n                'tf_apartment_customer_email',\n                'tf_apartment_customer_phone',\n                'tf_apartment_customer_country',\n                'tf_apartment_customer_address',\n                'tf_apartment_customer_city',\n                'tf_apartment_customer_state',\n                'tf_apartment_customer_zip',\n                'tf_apartment_date[from]',\n                'tf_apartment_date[to]',\n                'tf_available_apartments',\n                'tf_apartment_adults_number',\n                'tf_apartment_children_number',\n                'tf_apartment_infant_number',\n            ];\n\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: formData,\n                processData: false,\n                contentType: false,\n                beforeSend: function (response) {\n                    btn.addClass('tf-btn-loading');\n                },\n                success: function (response) {\n                    const obj = JSON.parse(response);\n                    if (!obj.success) {\n                        if (obj.message) {\n                            Swal.fire(\n                                'Error!',\n                                obj.message,\n                                'error'\n                            )\n                            form.find('input').removeClass('error-input');\n                            form.find('select').removeClass('error-input');\n                            form.find('textarea').removeClass('error-input');\n                            form.find('input').closest('.tf-fieldset').find('small.text-danger').remove();\n                            form.find('select').closest('.tf-fieldset').find('small.text-danger').remove();\n                            form.find('textarea').closest('.tf-fieldset').find('small.text-danger').remove();\n                        } else {\n\n                            for (const requiredField of requiredFields) {\n                                const errorField = obj['fieldErrors'][requiredField + '_error'];\n\n                                form.find('[name=\"' + requiredField + '\"]').removeClass('error-input');\n                                if (requiredField === 'tf_apartment_date[from]') {\n                                    form.find('[name=\"' + requiredField + '\"]').closest('.tf-date-from').find('small.text-danger').remove();\n                                } else if (requiredField === 'tf_apartment_date[to]') {\n                                    form.find('[name=\"' + requiredField + '\"]').closest('.tf-date-to').find('small.text-danger').remove();\n                                } else {\n                                    form.find('[name=\"' + requiredField + '\"]').closest('.tf-fieldset').find('small.text-danger').remove();\n                                }\n                                if (errorField) {\n                                    form.find('[name=\"' + requiredField + '\"]').addClass('error-input');\n                                    if (requiredField === 'tf_apartment_date[from]') {\n                                        form.find('[name=\"' + requiredField + '\"]').closest('.tf-date-from').append('<small class=\"text-danger\">' + errorField + '</small>');\n                                    } else if (requiredField === 'tf_apartment_date[to]') {\n                                        form.find('[name=\"' + requiredField + '\"]').closest('.tf-date-to').append('<small class=\"text-danger\">' + errorField + '</small>');\n                                    } else {\n                                        form.find('[name=\"' + requiredField + '\"]').closest('.tf-fieldset').append('<small class=\"text-danger\">' + errorField + '</small>');\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        Swal.fire(\n                            'Success!',\n                            obj.message,\n                            'success'\n                        )\n                        form[0].reset();\n                        form.find('input').removeClass('error-input');\n                        form.find('select').removeClass('error-input');\n                        form.find('textarea').removeClass('error-input');\n                        form.find('input').closest('.tf-fieldset').find('small.text-danger').remove();\n                        form.find('select').closest('.tf-fieldset').find('small.text-danger').remove();\n                        form.find('textarea').closest('.tf-fieldset').find('small.text-danger').remove();\n                    }\n                    btn.removeClass('tf-btn-loading');\n                },\n                error: function (response) {\n                    console.log(response);\n                },\n                complete: function (response) {\n                    btn.removeClass('tf-btn-loading');\n                }\n            })\n        });\n    });\n\n})(jQuery);\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/backend-booking.js?");

/***/ }),

/***/ "./sass/admin/js/free/booking-details.js":
/*!***********************************************!*\
  !*** ./sass/admin/js/free/booking-details.js ***!
  \***********************************************/
/***/ (() => {

eval("(function ($) {\n    $(document).ready(function () {\n\n        // Create an instance of Notyf\n        const notyf = new Notyf({\n            ripple: true,\n            duration: 3000,\n            dismissable: true,\n            position: {\n                x: 'right',\n                y: 'bottom',\n            },\n        });\n\n        // Select Form\n        $('.tf-filter-selection').on(\"click\", function() {\n            $(this).toggleClass('active');\n        });\n\n        // Form Selection\n        $('.tf-filter-selection ul li').on(\"click\", function() {\n            let $this = $(this).closest('.tf-filter-selection');\n            // let selected_value = $(this).attr('data-id');\n            let selected_label = $(this).text();\n            $this.find('label span').text(selected_label);\n        });\n\n        // Pyment Status Section\n        if ($('.tf-order-payment-status, .tf-calendar-order-payment-status').length > 0 ) {\n            $('.tf-order-payment-status, .tf-calendar-order-payment-status').select2({\n                dropdownCssClass: 'tf-booking-filter-modal',\n                placeholder: \"Order Status\",\n                allowClear: true\n            });\n        }\n        // Bulk Section\n        if ( $('.tf-filter-bulk-option').length > 0 ) {\n            $('.tf-filter-bulk-option').select2({\n                dropdownCssClass: 'tf-booking-filter-modal',\n                placeholder: \"Bulk Action\",\n            });\n        }\n        \n        if ( $('.tf-filter-bulk-option-enquiry').length > 0 ) {\n            $('.tf-filter-bulk-option-enquiry').select2({\n                dropdownCssClass: 'tf-booking-filter-modal',\n                placeholder: \"Bulk Action\",\n                minimumResultsForSearch: -1,\n            });\n        }\n        if ( $('.tf-enquiry-filter-hotel-name').length > 0 ) {\n            $('.tf-enquiry-filter-hotel-name').select2({\n                dropdownCssClass: 'tf-booking-filter-modal',\n                placeholder: \"Hotel Name\",\n                allowClear: true\n            });\n        }\n        \n        if ( $('.tf-enquiry-filter-apartment-name').length > 0 ) {\n            $('.tf-enquiry-filter-apartment-name').select2({\n                dropdownCssClass: 'tf-booking-filter-modal',\n                placeholder: \"Apartment Name\",\n                allowClear: true\n            });\n        }\n        if ( $('.tf-enquiry-filter-tour-name ').length > 0 ) {\n            $('.tf-enquiry-filter-tour-name').select2({\n                dropdownCssClass: 'tf-booking-filter-modal',\n                placeholder: \"Tours Name\",\n                allowClear: true\n            });\n        }\n        if ( $('.tf-filter-mail-option-enquiry').length > 0 ) {\n            $('.tf-filter-mail-option-enquiry').select2({\n                dropdownCssClass: 'tf-booking-filter-modal',\n                placeholder: \"Filters\",\n                allowClear: true,\n                minimumResultsForSearch: -1,\n            });\n        }\n        \n        // Tour Post Section\n        if( $('.tf-post-id-filter-options, .tf-booking-post-id-filter-options').length > 0 ) {\n            $('.tf-post-id-filter-options, .tf-booking-post-id-filter-options').select2({\n                dropdownCssClass: 'tf-booking-filter-modal',\n                placeholder: \"Tour Name\",\n                allowClear: true\n            });\n        }\n        \n        // Hotel Post Section\n        if ( $('.tf-hotel-id-filter-options, .tf-booking-hotel-id-filter-options').length > 0 ) {\n            $('.tf-hotel-id-filter-options, .tf-booking-hotel-id-filter-options').select2({\n                dropdownCssClass: 'tf-booking-filter-modal',\n                placeholder: \"Hotel Name\",\n                allowClear: true\n            });\n        }\n        \n        // Apartment Post Section\n        if ( $('.tf-apartment-id-filter-options, .tf-booking-apartment-id-filter-options').length > 0 ) {\n            $('.tf-apartment-id-filter-options, .tf-booking-apartment-id-filter-options').select2({\n                dropdownCssClass: 'tf-booking-filter-modal',\n                placeholder: \"Apartment Name\",\n                allowClear: true\n            });\n        }\n\n        // Car Post Section\n        if ( $('.tf-car-id-filter-options').length > 0 ) {\n            $('.tf-car-id-filter-options').select2({\n                dropdownCssClass: 'tf-booking-filter-modal',\n                placeholder: \"Car Name\",\n                allowClear: true\n            });\n        }\n        \n\n        // Checked Section\n        if ( $('.tf-tour-checkinout-options, .tf-booking-checkinout-options').length > 0 ) {\n            $('.tf-tour-checkinout-options, .tf-booking-checkinout-options').select2({\n                dropdownCssClass: 'tf-booking-checkinout-filter-modal',\n                placeholder: \"Checked in status\",\n                allowClear: true\n            });\n        }\n\n        /**\n         * Visitor Details Popup Open\n         *\n         */\n        $(document).on('click', '.visitor_edit span', function (e) {\n            e.preventDefault();\n            $(\".visitor-details-edit-form\").show();\n        });\n\n        /**\n         * Visitor Details Popup Close\n         *\n         */\n        $(document).on('click', '.visitor-details-edit-popup .tf-booking-times span', function (e) {\n            e.preventDefault();\n            $(\".visitor-details-edit-form\").hide();\n        });\n\n        /**\n         * Ajax tour booking\n         *\n         * tf_visitor_details_edit\n         */\n        $(document).on('submit', 'form.visitor-details-edit-popup', function (e) {\n            e.preventDefault();\n            var $this = $(this);\n\n            var formData = new FormData(this);\n            formData.append('action', 'tf_visitor_details_edit');\n            formData.append('_ajax_nonce', tf_admin_params.tf_nonce);\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: formData,\n                processData: false,\n                contentType: false,\n                beforeSend: function (data) {\n                    $('.tf-preloader-box').show();\n                },\n                complete: function (data) {\n                    \n                },\n                success: function (data) {\n                    location.reload();\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n\n            });\n        });\n\n        /**\n         * Ajax Checkinout Status\n         *\n         * tf_checkinout_details_edit\n         */\n        $('.tf-order-checkinout-status ul li').on(\"click\", function() {\n            \n            let selected_value = $(this).attr('data-value');\n            let order_id = $('.tf_single_order_id').val();\n\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: {\n                    action: 'tf_checkinout_details_edit',\n                    order_id: order_id,\n                    checkinout: selected_value,\n                    _ajax_nonce: tf_admin_params.tf_nonce\n                },\n                beforeSend: function (data) {\n                    $('.tf-preloader-box').show();\n                },\n                complete: function (data) {\n                    \n                },\n                success: function (data) {\n                    location.reload();\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n\n            });\n        });\n\n        /**\n         * Ajax Order Status Status\n         *\n         * tf_order_status_edit\n         */\n        $('.tf-order-ostatus ul li').on(\"click\", function() {\n            \n            let selected_value = $(this).attr('data-value');\n            let order_id = $('.tf_single_order_id').val();\n\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: {\n                    action: 'tf_order_status_edit',\n                    order_id: order_id,\n                    status: selected_value,\n                    _ajax_nonce: tf_admin_params.tf_nonce\n                },\n                beforeSend: function (data) {\n                    $('.tf-preloader-box').show();\n                },\n                complete: function (data) {\n                    \n                },\n                success: function (data) {\n                    location.reload();\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n\n            });\n        });\n\n        /**\n         * Ajax Order Status Email Resend\n         *\n         * tf_order_status_email_resend\n         */\n        $('.tf-order-email-resend ul li').on(\"click\", function() {\n            \n            let selected_value = $(this).attr('data-value');\n            let order_id = $('#tf_email_order_id').val();\n            let db_id = $('.tf_single_order_id').val();\n\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: {\n                    action: 'tf_order_status_email_resend',\n                    order_id: order_id,\n                    status: selected_value,\n                    id : db_id,\n                    _ajax_nonce: tf_admin_params.tf_nonce\n                },\n                beforeSend: function (data) {\n                    $('.tf-preloader-box').show();\n                },\n                complete: function (data) {\n                    \n                },\n                success: function (data) {\n                    $('.tf-preloader-box').hide();\n                    notyf.success(\"Email Sucessfully Resend!\");\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n\n            });\n        });\n\n        /**\n         * Vouchers Popup Open\n         *\n         */\n        $(document).on('click', '.tf-voucher-preview .tf-preview-btn a', function (e) {\n            e.preventDefault();\n            $(\".tf-voucher-quick-view-box\").show();\n        });\n\n        /**\n         * Vouchers Popup Close\n         *\n         */\n        $(document).on('click', '.tf-voucher-quick-view-box .tf-quick-view-times span', function (e) {\n            e.preventDefault();\n            $(\".tf-voucher-quick-view-box\").hide();\n        });\n\n        // Filter Checkbox Selected\n\n        $(\"#cb #cb-select-all-1\").on(\"click\", function() {\n            $('input[name=\"order_id[]\"]').each(function() {\n                $(this).prop(\"checked\", !$(this).prop(\"checked\"));\n            });\n        });\n\n        /**\n         * Filter Bulk Action\n         *\n         * tf_order_bulk_action_edit\n         */\n        $('.tf-order-status-filter-btn').on(\"click\", function() {\n            \n            let order_list = [];\n            let bulk_action = $('.tf-filter-bulk-option').val();\n            $('.tf_booking_details_wrap input[name=\"order_id[]\"]:checked').each(function() {\n                order_list.push($(this).val());\n            });\n            \n            if(order_list.length > 0 && bulk_action!==''){\n                $.ajax({\n                    type: 'post',\n                    url: tf_admin_params.ajax_url,\n                    data: {\n                        action: 'tf_order_bulk_action_edit',\n                        orders: order_list,\n                        status: bulk_action,\n                        _ajax_nonce: tf_admin_params.tf_nonce\n                    },\n                    beforeSend: function (data) {\n                        $('.tf-preloader-box').show();\n                    },\n                    complete: function (data) {\n                        \n                    },\n                    success: function (data) {\n                        location.reload();\n                    },\n                    error: function (data) {\n                        console.log(data);\n                    },\n\n                });\n            }\n        });\n\n        /**\n         * Search Filter BY ID boly\n         *\n         * tf-right-search-filter\n         */\n        $(document).on('submit', 'form.tf-right-search-filter', function (e) {\n            e.preventDefault();\n\n            let id = $(\"#tf-searching-key\").val();\n            if(id!==\"\"){\n                $('.tf-preloader-box').show();\n                let currentURL = window.location.href;\n                let BaseURL = currentURL.split('?')[0];\n                let queryString = currentURL.split('?')[1];\n\n                let currentURLParams= new URLSearchParams(queryString);\n                currentURLParams.delete(\"paged\");\n                if (currentURLParams.has(\"post\")) {\n                    currentURLParams.set(\"post\", id);\n                    let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\n                    window.location.href = updatedUrl;\n                }else{\n                    let updatedUrl = currentURL + \"&post=\" + id;\n                    window.location.href = updatedUrl;\n                }\n            }\n        });\n\n        /**\n         * Filter Checked Perameter Passing\n         *\n         */\n        $('.tf-tour-checkinout-options').change(function() {\n            let changeValue = $(this).val();\n            $('.tf-preloader-box').show();\n            let currentURL = window.location.href;\n            let BaseURL = currentURL.split('?')[0];\n            let queryString = currentURL.split('?')[1];\n\n            let currentURLParams= new URLSearchParams(queryString);\n            currentURLParams.delete(\"paged\");\n            if (currentURLParams.has(\"checkinout\")) {\n                currentURLParams.set(\"checkinout\", changeValue);\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\n                window.location.href = updatedUrl;\n            }else{\n                currentURLParams.set(\"checkinout\", changeValue);\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\n                window.location.href = updatedUrl;\n            }\n\n            //Nonce\n            if (!currentURLParams.has(\"nonce\")) {\n                currentURLParams.set(\"nonce\", tf_admin_params.tf_nonce);\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\n                window.location.href = updatedUrl;\n            }\n        });\n\n        /**\n         * Filter Post Perameter Passing\n         *\n         */\n        $('.tf-post-id-filter-options, .tf-hotel-id-filter-options, .tf-apartment-id-filter-options').change(function() {\n            let changeValue = $(this).val();\n            $('.tf-preloader-box').show();\n            let currentURL = window.location.href;\n            let BaseURL = currentURL.split('?')[0];\n            let queryString = currentURL.split('?')[1];\n\n            let currentURLParams= new URLSearchParams(queryString);\n            currentURLParams.delete(\"paged\");\n            if (currentURLParams.has(\"post\")) {\n                currentURLParams.set(\"post\", changeValue);\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\n                window.location.href = updatedUrl;\n            }else{\n                currentURLParams.set(\"post\", changeValue);\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\n                window.location.href = updatedUrl;\n            }\n\n            //Nonce\n            if (!currentURLParams.has(\"nonce\")) {\n                currentURLParams.set(\"nonce\", tf_admin_params.tf_nonce);\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\n                window.location.href = updatedUrl;\n            }\n        });\n\n        /**\n         * Filter Post Perameter Passing\n         *\n         */\n        $('.tf-order-payment-status').change(function() {\n            let changeValue = $(this).val();\n            $('.tf-preloader-box').show();\n            let currentURL = window.location.href;\n            let BaseURL = currentURL.split('?')[0];\n            let queryString = currentURL.split('?')[1];\n\n            let currentURLParams= new URLSearchParams(queryString);\n            currentURLParams.delete(\"paged\");\n            if (currentURLParams.has(\"payment\")) {\n                currentURLParams.set(\"payment\", changeValue);\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\n                window.location.href = updatedUrl;\n            }else{\n                currentURLParams.set(\"payment\", changeValue);\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\n                window.location.href = updatedUrl;\n            }\n            \n            //Nonce\n            if (!currentURLParams.has(\"nonce\")) {\n                currentURLParams.set(\"nonce\", tf_admin_params.tf_nonce);\n                let updatedUrl = BaseURL.split('?')[0] + '?' + currentURLParams.toString();\n                window.location.href = updatedUrl;\n            }\n        });\n\n        // Booking View Change\n\n        $(\".tf_booking_views_button ul li\").on(\"click\", function() {\n            $(\".tf_booking_views_button ul li\").removeClass('active');\n            let $this =  $(this);\n            let view = $this.attr('data-view');\n            $this.addClass('active');\n            if('calendar'==view){\n                $('.tf-booking-header-filter').hide();\n                $('.tf-order-table-responsive').hide();\n                $('#tf-booking-calendar').css('padding', '24px');\n                $('.tf-calendar-booking-header-filter').css('display', 'flex');\n                $('#tf-booking-calendar').show();\n                \n                // Re-render the calendar\n                initializeCalendar();\n                \n            }\n            if('list'==view){\n                $('#tf-booking-calendar').hide();\n                $('.tf-calendar-booking-header-filter').hide();\n                $('.tf-booking-header-filter').css('display','flex');\n                $('.tf-order-table-responsive').show();\n            }\n        });\n\n        // Booking Details Popup close\n        $(document).on('click', '.tf-booking-calendar-popup-box .tf-popup-header .tf-close', function (e) {\n            $(\".tf-booking-calendar-popup-box\").hide();\n        });\n\n        // Booking Details Popup\n        $(document).on('click', '.tf-booking-single-popup', function (e) {\n            e.preventDefault();\n            let $this = $(this);\n            $('.tf-calendar-popup-box').html('');\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: {\n                    action: 'tf_booking_details_popup',\n                    id: $this.attr('data-id'),\n                    type: $this.attr('data-type'),\n                    page: $this.attr('data-page'),\n                    _ajax_nonce: tf_admin_params.tf_nonce\n                },\n                beforeSend: function (data) {\n                    $('.tf-preloader-box').show();\n                },\n                complete: function (data) {\n                    \n                },\n                success: function (data) {\n                    $('.tf-calendar-popup-box').html(data);\n                    $('.tf-preloader-box').hide();\n                    $('.tf-booking-calendar-popup-box').css('display', 'flex');\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n\n            });\n        });\n\n        // Booking Calendar Filter\n        $(document).on('change', '.tf-calendar-order-payment-status, .tf-booking-checkinout-options, .tf-filter-by-post', function (e) {\n            e.preventDefault();\n            let ostatus = $('.tf-calendar-order-payment-status').val();\n            let checkinout = $('.tf-booking-checkinout-options').val();\n            let post_id = $('.tf-filter-by-post').val();\n            \n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: {\n                    action: 'tf_booking_calendar_filter',\n                    ostatus: ostatus,\n                    checkinout: checkinout,\n                    post_id: post_id,\n                    post_type: $('#tf_booking_post_type').val(),\n                    _ajax_nonce: tf_admin_params.tf_nonce\n                },\n                beforeSend: function (data) {\n                    $('.tf-preloader-box').show();\n                },\n                complete: function (data) {\n                    \n                },\n                success: function (response) {\n                    let data = JSON.parse(response);\n                    $('.tf-preloader-box').hide();\n                    initializeCalendar(data.events);\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n            });\n        });\n\n    });\n\n})(jQuery);\n\n// Booking Calendar\nfunction initializeCalendar(eventsSource) {\n    var calendarEl = document.getElementById('tf-booking-calendar');\n    var currentPageUrl = window.location.href;\n\n    // Set the events based on the page URL\n    if (!eventsSource) {\n        if (currentPageUrl.includes('post_type=tf_tours&page=tf_tours_booking')) {\n            eventsSource = tf_options.tf_tours_orders;\n        } else if (currentPageUrl.includes('post_type=tf_hotel&page=tf_hotel_booking')) {\n            eventsSource = tf_options.tf_hotels_orders;\n        } else if (currentPageUrl.includes('post_type=tf_apartment&page=tf_apartment_booking')) {\n            eventsSource = tf_options.tf_apartments_orders;\n        } else if (currentPageUrl.includes('post_type=tf_carrental&page=tf_carrental_booking')) {\n            eventsSource = tf_options.tf_cars_orders;\n        } else {\n            eventsSource = []; // Fallback option if none of the conditions match\n        }\n    }\n\n    var calendar = new FullCalendar.Calendar(calendarEl, {\n        editable: false,\n        selectable: true,\n        dayMaxEvents: 3,\n        headerToolbar: {\n            left: 'prev,next',\n            center: 'title',\n            right: 'dayGridMonth,timeGridWeek,timeGridDay'\n        },\n        events: eventsSource,\n        eventContent: function(info) {\n            var customEl = document.createElement('div');\n            customEl.classList.add('tf-booking-single-popup');\n            customEl.setAttribute('data-id', info.event.id);\n            customEl.setAttribute('data-type', info.event.extendedProps.post_type);\n            customEl.setAttribute('data-page', info.event.extendedProps.page);\n            customEl.innerHTML = `<span>${info.event.title}</span>`;\n            return { domNodes: [customEl] };\n        }\n    });\n\n    calendar.render();\n}\n\n// Initialize the calendar when the DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    var tfcalendarEl = document.getElementById('tf-booking-calendar');\n    var eventsSource;\n    if (tfcalendarEl.dataset.set) {\n        initializeCalendar(eventsSource);\n        tfcalendarEl.style.display = 'none';\n    }else{\n        initializeCalendar(eventsSource);\n    }\n});\n\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/booking-details.js?");

/***/ }),

/***/ "./sass/admin/js/free/enquiry-details.js":
/*!***********************************************!*\
  !*** ./sass/admin/js/free/enquiry-details.js ***!
  \***********************************************/
/***/ (() => {

eval(";(function($) {\n\n    \"use strict\";\n\n    $(document).ready(function() {\n\n        // Create an instance of Notyf\n        const notyf = new Notyf({\n            ripple: true,\n            duration: 3000,\n            dismissable: true,\n            position: {\n                x: 'right',\n                y: 'bottom',\n            },\n        });\n\n        $(\".tf-enquiry-details-wrap .tf-order-status-filter-btn\").on(\"click\", function(e) {\n\n            e.preventDefault();\n\n            let $this = $(this);\n            let selected_items = [];\n            let actions = $this.closest(\".tf-enquiry-details-wrap\").find(\".tf-filter-bulk-option-enquiry\").val();\n            let hotelIdFilter = $this.closest(\".tf-enquiry-details-wrap\").find(\".tf-enquiry-filter-hotel-name\").val();\n            let mainWrap = $this.closest(\".tf-enquiry-details-wrap\");\n\n            mainWrap.find(\".tf-checkbox-listing #tf-enquiry-name-checkbox:checked\").each(function() {\n                selected_items.push($(this).val());\n            });\n\n            $.ajax({\n                url: tf_admin_params.ajax_url,\n                type: 'POST',\n                data: {\n                    action: 'tf_enquiry_bulk_action',\n                    selected_items: selected_items,\n                    bulk_action: actions,\n                    _ajax_nonce: tf_admin_params.tf_nonce\n                },\n                beforeSend: function() {\n                    $this.addClass(\"loading\");\n                },\n                success: function(response) {\n                    let data = $.parseJSON(response);\n                    $this.removeClass(\"loading\");\n                    if(data.status == \"success\") {\n                        notyf.success(data.msg);\n                    } else if (data.status == \"error\") {\n                        notyf.error(data.msg);\n                    }\n                    \n                }\n            });\n            \n        });\n\n        $(\".tf-enquiry-filter-hotel-name, .tf-enquiry-filter-tour-name, .tf-enquiry-filter-apartment-name\").on('change', function() {\n            let $this = $(this);\n            let post_id = $this.val() ? $this.val() : '';\n            let post_type = $(\".enquiry-post-type\").val();\n            let filter = $(\".tf-filter-mail-option-enquiry \").val();\n\n            $.ajax({\n                url: tf_admin_params.ajax_url,\n                type: 'POST',\n                data: {\n                    action: 'tf_enquiry_filter_post',\n                    post_id: post_id,\n                    post_type: post_type,\n                    filter: filter,\n                    _ajax_nonce: tf_admin_params.tf_nonce\n                },\n                beforeSend: function() {\n                    $(\"#tf-enquiry-status-loader\").addClass(\"show\");\n                },\n                success: function (response) {\n                    $(\"#tf-enquiry-status-loader\").removeClass(\"show\");\n                    if( response.status == \"error\" ) {\n                        $(\".tf-enquiry-details-wrap\").append(response.msg);\n                    } else {\n                        $(\".tf-enquiry-table\").remove();\n                        $(\".tf-enquiry-details-wrap\").append(response);\n                    }\n                }\n            });\n        });\n\n        $(\".tf-order-status-filter-reset-btn\").on('click', function() {\n            $(\".tf-filter-bulk-option-enquiry\").val('').trigger('change');\n            $(\".tf-filter-hotel-name\").val(\"\").trigger('change');\n            $(\".tf-filter-mail-option-enquiry\").val( \"\").trigger('change');\n        });\n\n        $(\".tf-filter-mail-option-enquiry\").on('change', function() {\n            let $this = $(this);\n            let filter = $this.val() ? $this.val() : '';\n            let post_id = $(\".tf-filter-hotel-name \").val()\n            let post_type = $(\".enquiry-post-type\").val();\n\n            $.ajax({\n                url: tf_admin_params.ajax_url,\n                type: 'POST',\n                data: {\n                    action: 'tf_enquiry_filter_mail',\n                    filter: filter,\n                    post_id : post_id,\n                    post_type: post_type,\n                    _ajax_nonce: tf_admin_params.tf_nonce\n                },\n                beforeSend: function() {\n                    $(\"#tf-enquiry-status-loader\").addClass(\"show\");\n                },\n                success: function (response) {\n                    $(\"#tf-enquiry-status-loader\").removeClass(\"show\");\n                    if( response.status == \"error\" ) {\n                        $(\".tf-enquiry-details-wrap\").append(response.msg);\n                    } else {\n                        $(\".tf-enquiry-table\").remove();\n                        $(\".tf-enquiry-details-wrap\").append(response);\n                    }\n                }\n            });\n        });\n\n        $(\"#tf-single-enquiry-reply-form\").on('submit', function(e) {\n            e.preventDefault();\n\n            let $this = $(this);\n            let reply_mail = $this.find(\".tf-enquiry-reply-email\").val();\n            let reply_message = tinyMCE.activeEditor && tinyMCE.activeEditor.getContent() ? tinyMCE.activeEditor.getContent() : $(\"#tf-enquiry-reply-editor\").val();\n            let userName = $this.find(\".tf-enquiry-reply-name\").val();\n            let subject = $this.find(\".tf-enquiry-reply-subject\").val();\n            let post_id = $this.find(\".tf-enquiry-reply-post-id\").val();\n            let enquiry_id = $this.find(\".tf-enquiry-reply-id\").val();\n\n            $.ajax({\n                url: tf_admin_params.ajax_url,\n                type: 'POST',\n                data: {\n                    action: 'tf_enquiry_reply_email',\n                    reply_mail: reply_mail,\n                    reply_message: reply_message,\n                    user_name: userName,\n                    subject: subject,\n                    post_id: post_id,\n                    enquiry_id: enquiry_id,\n                    _ajax_nonce: tf_admin_params.tf_nonce\n                },\n                beforeSend: function() {\n                    $(\"#tf-enquiry-status-loader\").addClass(\"show\");\n                },\n                success: function(response) {\n                    $(\"#tf-enquiry-status-loader\").removeClass(\"show\");\n\n                    let data = JSON.parse(response);\n                    \n                    if(data.status == \"success\") {\n                        notyf.success(data.msg);\n                        window.location.reload();\n                    } else if (data.status == \"error\") {\n                        notyf.error(data.msg);\n                    }\n                },\n                error: function(data) {\n                    console.log(data);\n                },\n            });\n        })\n\n        $(document).on(\"submit\", 'form.tf-enquiry-right-search-filter', function(e) {\n            e.preventDefault();\n\n            let post_id = $(\"#tf-searching-enquiry-key\").val();\n            let select_option = $(\".tf-filter-hotel-name option\");\n            var values = $.map(select_option ,function(option) {\n                return option.value;\n              }); \n\n            if( $.inArray(post_id, values) !== -1 ) {\n                $('.tf-filter-hotel-name').val(post_id).trigger('change');\n            } else {\n                notyf.error(tf_admin_params.no_data_found_with_id);\n            }\n            \n        })\n\n        $(document).on(\"click\", \".tf-single-enquiry-copy-btn\", function (e) {\n            let $this = $(this),\n                copy_text = $this.closest(\".tf-single-enquiry-details-value\").data(\"enquiry-copy-text\"),\n                $temp = $(\"<input>\"),\n                copy_ip_addr = $(this).parent().parent().find(\".tf-single-enquiry-log-details-single-value\").data(\"enquiry-copy-text\");\n            \n            copy_text = copy_text ? copy_text : copy_ip_addr;\n\n            $(\"body\").append($temp);\n            $temp.val(copy_text).select();\n            document.execCommand(\"copy\");\n            $temp.remove();\n            notyf.success(\"Copied to clipboard\");\n        });\n\n        $(document).on(\"click\", '.tf-single-enquiry-reply-mail-button', function (e) { \n            $(\".tf-single-enquiry-reply-wrapper\").slideDown();\n            $(this).hide();\n        });\n\n        $('.tf-single-enquiry-reply-another-mail-button').on('click', function(e) {\n            $('#tf-single-enquiry-reply-form').slideDown();\n            $(this).hide();\n        });\n\n        $(\".tf-single-enquiry-accordion-item.is-active\").children(\".tf-single-accordion-body\").slideDown();\n\n        $(\".tf-single-enquiry-accordion-head\").on(\"click\", function() {\n            let $this = $(this).parent();\n            $this.siblings(\".tf-single-enquiry-accordion-item\").removeClass(\"is-active\").find(\".tf-single-accordion-body\").slideUp();\n            $this.toggleClass(\"is-active\").find(\".tf-single-accordion-body\").slideToggle(\"ease-out\");\n\n        });\n\n        $(\".tf-enquiry-single-row\").on(\"click\", function(e) {\n\n            let currentURL = window.location.href;\n            let id = $(\".tf-enquiry-id\", this).val();\n\n            if( $(e.target)[0].className == 'check-column' || $(e.target)[0].className == 'tf-enquiry-name-checkbox'|| $(e.target)[0].className == 'table-name-column' ) {\n                return;\n            }\n\n            let updatedUrl = currentURL + \"&enquiry_id=\" + id + \"&action=preview\";\n            window.location.href = updatedUrl;\n        });\n    });\n\n})(jQuery);\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/enquiry-details.js?");

/***/ }),

/***/ "./sass/admin/js/free/required-taxonomies-gutenberg.js":
/*!*************************************************************!*\
  !*** ./sass/admin/js/free/required-taxonomies-gutenberg.js ***!
  \*************************************************************/
/***/ (() => {

eval("const {select, dispatch} = wp.data;\n\n//required taxonomies\n\nfunction TfPrePublishCheck() {\n    let lockPost = false;\n    tf_admin_params.error = false;\n    tf_admin_params.messages = [];\n\n    let tf_post_pre_save = Object.assign({}, select('core/editor').getCurrentPost(), select('core/editor').getPostEdits());\n\n    if (tf_post_pre_save.hasOwnProperty('categories')) {\n        tf_post_pre_save['categories'] = tf_post_pre_save['categories'].filter(function (ele) {\n            return ele !== 1;\n        });\n    }\n\n    jQuery.each(tf_admin_params.taxonomies, function (taxonomy, config) {\n        if (tf_post_pre_save.hasOwnProperty(taxonomy) && tf_post_pre_save[taxonomy].length === 0) {\n            dispatch('core/notices').createNotice(\n                'error',\n                config.message,\n                {\n                    id: 'tfNotice_' + taxonomy,\n                    isDismissible: false\n                }\n            );\n            tf_admin_params.error = lockPost = true;\n        }else{\n            dispatch('core/notices').removeNotice('tfNotice_' + taxonomy);\n        }\n    });\n\n    if (lockPost === true) {\n        dispatch('core/editor').lockPostSaving();\n    } else {\n        dispatch('core/editor').unlockPostSaving();\n    }\n\n}\n\nTfPrePublishCheck();\n\nlet rpc_check_interval = setInterval(TfPrePublishCheck, 500);\n\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/required-taxonomies-gutenberg.js?");

/***/ }),

/***/ "./sass/admin/js/free/required-taxonomies.js":
/*!***************************************************!*\
  !*** ./sass/admin/js/free/required-taxonomies.js ***!
  \***************************************************/
/***/ (() => {

eval("jQuery(function ($) {\n\n    //required taxonomies\n\t// Create an instance of Notyf\n\tconst notyf = new Notyf({\n\t\tripple: true,\n\t\tdismissable: true,\n\t\tduration: 3000,\n\t\tposition: {\n\t\t\tx: 'right',\n\t\t\ty: 'bottom',\n\t\t},\n\t});\n\n    function tf_event_handler(e) {\n        tf_admin_params.error = false;\n        $.each(tf_admin_params.taxonomies, function (taxonomy, config) {\n            if (config.type == 'hierarchical') {\n                if ($('#taxonomy-' + taxonomy + ' input:checked').length == 0) {\n                    //alert(config.message);\n\t\t\t\t\tnotyf.error(config.message);\n                    tf_admin_params.error = true;\n                }\n            } else {\n                if ($('#tagsdiv-' + taxonomy + ' .tagchecklist').is(':empty')) {\n                    //alert(config.message);\n                    notyf.error(config.message);\n                    tf_admin_params.error = true;\n                }\n            }\n        });\n        if (tf_admin_params.error) {\n            e.stopImmediatePropagation();\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    $('#publish, #save-post').on('click.require-post-category', tf_event_handler);\n    $('#post').on('submit.require-post-category', tf_event_handler);\n    if ($('#publish')[0] != null && $._data($('#publish')[0], \"events\") != null) {\n        var publish_click_events = $._data($('#publish')[0], \"events\").click;\n        if (publish_click_events) {\n            if (publish_click_events.length > 1) {\n                publish_click_events.unshift(publish_click_events.pop());\n            }\n        }\n    }\n    if ($('#save-post')[0] != null && $._data($('#save-post')[0], \"events\") != null) {\n        var save_click_events = $._data($('#save-post')[0], \"events\").click;\n        if (save_click_events) {\n            if (save_click_events.length > 1) {\n                save_click_events.unshift(save_click_events.pop());\n            }\n        }\n    }\n    if ($('#post')[0] != null && $._data($('#post')[0], \"events\") != null) {\n        var post_submit_events = $._data($('#post')[0], \"events\").submit;\n        if (post_submit_events) {\n            if (post_submit_events.length > 1) {\n                post_submit_events.unshift(post_submit_events.pop());\n            }\n        }\n    }\n});\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/required-taxonomies.js?");

/***/ }),

/***/ "./sass/admin/js/free/setup-wizard.js":
/*!********************************************!*\
  !*** ./sass/admin/js/free/setup-wizard.js ***!
  \********************************************/
/***/ (() => {

eval("(function ($) {\n    $(document).ready(function () {\n\n        // Create an instance of Notyf\n        const notyf = new Notyf({\n            ripple: true,\n            dismissable: true,\n            duration: 3000,\n            position: {\n                x: 'right',\n                y: 'bottom',\n            },\n        });\n\n        //if body has class .tourfic-settings_page_tf-setup-wizard then add background-color: #ecf5ff; to html\n        if ($('body').hasClass('tourfic-settings_page_tf-setup-wizard')) {\n            $('html').css('padding', '0');\n        }\n\n        $(document).on('click', '.tf-setup-start-btn', function (e) {\n            e.preventDefault();\n            $('.tf-welcome-step').hide();\n            if(tf_admin_params.is_woo_not_active) {\n                $('.tf-setup-step-1').fadeIn(600);\n            } else {\n                $('.tf-setup-step-2').fadeIn(600);\n            }\n        });\n\n        $(document).on('click', '.tf-setup-next-btn, .tf-setup-skip-btn', function (e) {\n            e.preventDefault();\n            let form = $('#tf-setup-wizard-form');\n            let skipSteps = form.find('input[name=\"tf-skip-steps\"]').val();\n            let step = $(this).closest('.tf-setup-step-container').data('step');\n            let nextStep = step + 1;\n\n            //min one service required\n            if (step === 2 && $(this).hasClass('tf-setup-next-btn')) {\n                let services = $('input[name=\"tf-services[]\"]:checked').length;\n\n                if (!services) {\n                    alert(tf_admin_params.i18n.no_services_selected);\n                    return false;\n                }\n\n                //if hotel service not checked, hide hotel settings\n                if (!$('input[name=\"tf-services[]\"][value=\"hotel\"]').is(':checked')) {\n                    $('.tf-hotel-setup-wizard').hide();\n                    $('.tf-add-new-hotel').hide();\n                } else {\n                    $('.tf-hotel-setup-wizard').show();\n                    $('.tf-add-new-hotel').show();\n                }\n\n                //if tour service not checked, hide tour settings\n                if (!$('input[name=\"tf-services[]\"][value=\"tour\"]').is(':checked')) {\n                    $('.tf-tour-setup-wizard').hide();\n                    $('.tf-add-new-tour').hide();\n                } else {\n                    $('.tf-tour-setup-wizard').show();\n                    $('.tf-add-new-tour').show();\n                }\n\n                //if apartment service not checked, hide apartment settings\n                if (!$('input[name=\"tf-services[]\"][value=\"apartment\"]').is(':checked')) {\n                    $('.tf-apartment-setup-wizard').hide();\n                    $('.tf-add-new-apartment').hide();\n                } else {\n                    $('.tf-apartment-setup-wizard').show();\n                    $('.tf-add-new-apartment').show();\n                }\n\n                //if car service not checked, hide car settings\n                if (!$('input[name=\"tf-services[]\"][value=\"carrentals\"]').is(':checked')) {\n                    $('.tf-car-setup-wizard').hide();\n                    $('.tf-add-new-car').hide();\n                } else {\n                    $('.tf-car-setup-wizard').show();\n                    $('.tf-add-new-car').show();\n                }\n            }\n\n            //skip steps add to input[name=\"tf-skip-steps\"]\n            if ($(this).hasClass('tf-setup-skip-btn')) {\n                skipSteps = !skipSteps ? step : skipSteps.indexOf(step) === -1 ? skipSteps + ',' + step : skipSteps;\n                form.find('input[name=\"tf-skip-steps\"]').val(skipSteps);\n\n                if(step === 1){\n                    $('.tf-hotel-setup-wizard').show();\n                    $('.tf-tour-setup-wizard').show();\n                }\n            }\n\n            //remove skip steps from input[name=\"tf-skip-steps\"] if user back to step and go to next step\n            if($(this).hasClass('tf-setup-next-btn') && skipSteps.indexOf(step) !== -1) {\n                skipSteps = skipSteps.replace(step, '');\n                form.find('input[name=\"tf-skip-steps\"]').val(skipSteps);\n            }\n\n            //hide current step and show next step (if not last step)\n            if(!$(this).hasClass('tf-setup-submit-btn')) {\n                $('.tf-setup-step-' + step).fadeOut(300, function () {\n                    $('.tf-setup-step-' + nextStep).fadeIn(300);\n                });\n            }\n        });\n\n        $(document).on('click', '.tf-setup-prev-btn', function (e) {\n            e.preventDefault();\n            let step = $(this).closest('.tf-setup-step-container').data('step');\n            let prevStep = step - 1;\n            if(step === 2 && !tf_admin_params.is_woo_not_active) {\n                $('.tf-setup-step-2').fadeOut(300, function () {\n                    $('.tf-setup-step-0').fadeIn(300);\n                });\n            } else {\n                $('.tf-setup-step-' + step).fadeOut(300, function () {\n                    $('.tf-setup-step-' + prevStep).fadeIn(300);\n                });\n            }\n        });\n\n        /*\n        * Setup Wizard form submit\n        * @author: Foysal\n        */\n        $(document).on('click', '.tf-setup-submit-btn', function (e) {\n            e.preventDefault();\n            let submitBtn = $('.tf-setup-submit-btn.tf-quick-setup-btn');\n            let form = $(this).closest('#tf-setup-wizard-form');\n            let step = $(this).closest('.tf-setup-step-container').data('step');\n            let skipSteps = form.find('input[name=\"tf-skip-steps\"]').val();\n\n            if($(this).hasClass('tf-quick-setup-btn') && skipSteps.indexOf(step) !== -1) {\n                skipSteps = skipSteps.replace(step, '');\n                form.find('input[name=\"tf-skip-steps\"]').val(skipSteps);\n            }\n\n            let formData = new FormData(form[0]);\n            formData.append('action', 'tf_setup_wizard_submit');\n\n            $.ajax({\n                url: tf_admin_params.ajax_url,\n                type: 'POST',\n                data: formData,\n                processData: false,\n                contentType: false,\n                beforeSend: function () {\n                    submitBtn.addClass('tf-btn-loading');\n                },\n                success: function (response) {\n                    let data = JSON.parse(response);\n                    submitBtn.removeClass('tf-btn-loading');\n                    if (data.success) {\n                        $('.tf-finish-step').show();\n                        $('.tf-setup-step-' + step).hide();\n                    }\n                },\n                complete: function () {\n                    submitBtn.removeClass('tf-btn-loading');\n                },\n                error: function (error) {\n                    submitBtn.removeClass('tf-btn-loading');\n                    console.log(error);\n                }\n            });\n        });\n\n        /*\n        * Travelfic Theme Installing\n        * @author: Jahid\n        */\n        let travelfic_toolkit_active_plugins = tf_admin_params.is_travelfic_toolkit_active;\n\n        $(document).on('click', '.tf-setup-travelfic-theme-btn', function (e) {\n            e.preventDefault();\n            \n            if(tf_admin_params.current_active_theme && \"travelfic\"!=tf_admin_params.current_active_theme && \"ultimate-hotel-booking\"!=tf_admin_params.current_active_theme){\n                let theme_slug = $('.tf-template-selection input[name=\"tf_theme_select\"]:checked').val();\n                if(\"travelfic\"==theme_slug){\n                    $('.tf-setup-travelfic-theme-btn').text(\"Travelfic Installing...\");\n                }\n                if(\"ultimate-hotel-booking\"==theme_slug){\n                    $('.tf-setup-travelfic-theme-btn').text(\"Hotel Booking Installing...\");\n                }\n                $('.tf-setup-travelfic-theme-btn').addClass('tf-btn-loading');\n                var data = {\n                    action: \"tf_theme_installing\",\n                    _ajax_nonce: tf_admin_params.tf_nonce,\n                    slug: theme_slug,\n                };\n                // Installing Function\n                jQuery.post(tf_admin_params.ajax_url, data, function (response) {\n                    $('.tf-setup-travelfic-theme-active').trigger(\"click\");\n                })\n            }else{\n                $('.tf-setup-travelfic-toolkit-btn').trigger(\"click\");\n            }\n            \n        });\n\n        /*\n        * Travelfic Theme Activating\n        * @author: Jahid\n        */\n\n        $(document).on('click', '.tf-setup-travelfic-theme-active', function (e) {\n\n            e.preventDefault();\n            let theme_slug = $('.tf-template-selection input[name=\"tf_theme_select\"]:checked').val();\n\n            if(\"travelfic\"==theme_slug){\n                $('.tf-setup-travelfic-theme-btn').text(\"Travelfic Activate...\");\n            }\n            if(\"ultimate-hotel-booking\"==theme_slug){\n                $('.tf-setup-travelfic-theme-btn').text(\"Hotel Booking Activate...\");\n            }\n\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: {\n                    action: \"tf_setup_travelfic_theme_active\",\n                    _ajax_nonce: tf_admin_params.tf_nonce,\n                    slug: theme_slug,\n                },\n                success: function(response) {\n                    if ($.inArray(\"travelfic-toolkit\", travelfic_toolkit_active_plugins) !== -1) {\n                        $('.tf-setup-travelfic-toolkit-btn').trigger(\"click\");\n                    }else{\n                        window.location.replace(tf_admin_params.toolkit_page_url);\n                    }\n                },\n                error: function(error) {\n                    \n                }\n            });\n\n        });\n\n        /*\n        * Travelfic Toolkit Installing\n        * @author: Jahid\n        */\n       \n        $(document).on('click', '.tf-setup-travelfic-toolkit-btn', function (e) {\n            e.preventDefault();\n            var $this = $(this);\n            if ($.inArray(\"travelfic-toolkit\", travelfic_toolkit_active_plugins) !== -1) {\n                let plugin_slug = $(this).attr('data-install');\n                $this.text(\"Toolkit Activate...\");\n                $this.addClass('tf-btn-loading');\n\n                var data = {\n                    action: \"tf_travelfic_toolkit_installing\",\n                    _ajax_nonce: tf_admin_params.tf_nonce,\n                    slug: plugin_slug,\n                };\n                // Installing Function\n                jQuery.post(tf_admin_params.ajax_url, data, function (response) {\n                    $('.tf-setup-travelfic-toolkit-active').trigger(\"click\");\n                })\n            }else{\n                window.location.replace(tf_admin_params.toolkit_page_url);\n            }\n        });\n\n        /*\n        * Travelfic Toolkit Activating\n        * @author: Jahid\n        */\n        $(document).on('click', '.tf-setup-travelfic-toolkit-active', function (e) {\n\n            e.preventDefault();\n            let plugin_slug = $(this).attr('data-install');\n            $('.tf-setup-travelfic-theme-btn').text(\"Toolkit Activate...\");\n\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: {\n                    action: \"tf_travelfic_toolkit_activate\",\n                    _ajax_nonce: tf_admin_params.tf_nonce,\n                    slug: plugin_slug,\n                },\n                success: function(response) {\n                    window.location.replace(tf_admin_params.toolkit_page_url);\n                },\n                error: function(error) {\n                    \n                }\n            });\n        });\n\n        /*\n        * WooCommerce Plugin Install\n        * @auther: Foysal\n        */\n        $(document).on('click', '.tf-install-woo-btn', function (e) {\n            e.preventDefault();\n            let btn = $(this);\n\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: {\n                    action: \"tf_ajax_install_woo\",\n                    _ajax_nonce: tf_admin_params.tf_nonce,\n                    slug: 'woocommerce',\n                },\n                beforeSend: function () {\n                    btn.text(tf_admin_params.installing)\n                    btn.addClass('tf-btn-loading');\n                },\n                success: function(response) {\n                    btn.text(tf_admin_params.activating);\n                    $('.tf-active-woo-btn').trigger(\"click\");\n                },\n                error: function(error) {\n                    console.log(error);\n                }\n            });\n        });\n\n        /*\n        * WooCommerce Plugin Activate\n        * @auther: Foysal\n        */\n        $(document).on('click', '.tf-active-woo-btn', function (e) {\n            e.preventDefault();\n            let btn = $(this);\n\n            $.ajax({\n                type: 'post',\n                url: tf_admin_params.ajax_url,\n                data: {\n                    action: \"tf_ajax_activate_woo\",\n                    _ajax_nonce: tf_admin_params.tf_nonce,\n                    slug: 'woocommerce',\n                },\n                beforeSend: function () {\n                    btn.text(tf_admin_params.activating)\n                    btn.addClass('tf-btn-loading');\n                },\n                success: function(response) {\n                    notyf.success(response.data);\n\n                    setTimeout(function(){\n                        btn.closest('.tf-setup-step-layout').find('.tf-setup-next-btn').trigger(\"click\");\n                    }, 500);\n\n                    btn.removeClass('tf-btn-loading');\n                    $('.tf-install-woo-btn').removeClass('tf-btn-loading');\n                },\n                error: function(error) {\n                    console.log(error);\n                }\n            });\n        });\n    });\n\n})(jQuery);\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/setup-wizard.js?");

/***/ }),

/***/ "./sass/admin/js/free/tf-options.js":
/*!******************************************!*\
  !*** ./sass/admin/js/free/tf-options.js ***!
  \******************************************/
/***/ (() => {

eval("(function ($) {\n    'use strict';\n    $(document).ready(function () {\n\n        // Create an instance of Notyf\n        const notyf = new Notyf({\n            ripple: true,\n            duration: 3000,\n            dismissable: true,\n            position: {\n                x: 'right',\n                y: 'bottom',\n            },\n        });\n\n        /*\n        * window url on change tab click\n        * @author: Foysal\n        */\n        $(window).on('hashchange load', function () {\n            let hash = window.location.hash;\n            let query = window.location.search;\n            let slug = hash.replace('#tab=', '');\n\n            if (hash) {\n                let selectedTab = $('.tf-tablinks[data-tab=\"' + slug + '\"]'),\n                    parentDiv = selectedTab.closest('.tf-admin-tab-item');\n\n                selectedTab.trigger('click');\n                parentDiv.trigger('click');\n            }\n\n            if (query.indexOf('dashboard') > -1) {\n                let submenu = $(\"#toplevel_page_tf_settings\").find(\".wp-submenu\");\n                submenu.find(\"a\").filter(function (a, e) {\n                    return e.href.indexOf(query) > -1;\n                }).parent().addClass(\"current\");\n            }\n\n            tfApartmentCalendar()\n            tfHotelCalendar()\n        });\n\n        /*\n        * Tab click\n        * @author: Foysal\n        */\n        $(document).on('click', '.tf-tablinks', function (e) {\n            e.preventDefault();\n            let firstTabId,\n                $this = $(this),\n                parentDiv = $this.closest('.tf-admin-tab-item'),\n                parentTabId = parentDiv.children('.tf-tablinks').attr('data-tab'),\n                tabcontent = $('.tf-tab-content'),\n                tablinks = $('.tf-tablinks');\n\n            tabcontent.hide();\n            tablinks.removeClass('active');\n\n            let tabId = $this.attr('data-tab');\n            $('#' + tabId).css('display', 'flex');\n\n            if ($this.next().hasClass('tf-submenu')) {\n                firstTabId = parentDiv.find('.tf-submenu li:first-child .tf-tablinks').data('tab');\n            }\n\n            if (firstTabId === tabId) {\n                parentDiv.find('.tf-submenu li:first-child .tf-tablinks').addClass('active');\n            } else {\n                $this.addClass('active');\n            }\n            // url hash update\n            window.location.hash = '#tab=' + tabId;\n\n            $(\".tf-admin-tab\").removeClass('active');\n\n            let submenu = $(\"#toplevel_page_tf_settings\").find(\".wp-submenu\");\n            submenu.find(\"a\").filter(function (a, e) {\n                let slug = e.hash.replace('#tab=', '');\n                return tabId === slug || parentTabId === slug;\n            }).parent().addClass(\"current\").siblings().removeClass(\"current\")\n\n            roomOptionsArr();\n        });\n\n        /*\n        * Submenu toggle\n        * @author: Foysal\n        */\n        $(document).on('click', '.tf-admin-tab-item', function (e) {\n            e.preventDefault();\n            let $this = $(this);\n\n            $this.addClass('open');\n            $this.children('ul').slideDown();\n            $this.siblings('.tf-admin-tab-item').children('ul').slideUp();\n            $this.siblings('.tf-admin-tab-item').removeClass('open');\n            $this.siblings('.tf-admin-tab-item').find('li').removeClass('open');\n            $this.siblings('.tf-admin-tab-item').find('ul').slideUp();\n        });\n\n        /*\n        * Each date field initialize flatpickr\n        * @author: Foysal\n        */\n        const tfDateInt = dateSelector => {\n            $(dateSelector).each(function () {\n                let $this = $(this),\n                    dateField = $this.find('input.flatpickr'),\n                    format = dateField.data('format'),\n                    multiple = dateField.data('multiple'),\n                    minDate = dateField.data('min-date');\n\n                if (dateField.length === 2) {\n                    let startDate = $this.find('.tf-date-from input.flatpickr').flatpickr({\n                        dateFormat: format,\n                        minDate: minDate,\n                        altInput: true,\n                        altFormat: tf_options.tf_admin_date_format,\n                        onChange: function (selectedDates, dateStr, instance) {\n                            endDate.set('minDate', dateStr);\n                        }\n                    });\n                    let endDate = $this.find('.tf-date-to input.flatpickr').flatpickr({\n                        dateFormat: format,\n                        minDate: minDate,\n                        altInput: true,\n                        altFormat: tf_options.tf_admin_date_format,\n                        onChange: function (selectedDates, dateStr, instance) {\n                            startDate.set('maxDate', dateStr);\n                        }\n                    });\n                } else {\n                    dateField.flatpickr({\n                        dateFormat: format,\n                        minDate: minDate,\n                        altInput: true,\n                        altFormat: tf_options.tf_admin_date_format,\n                        mode: multiple ? 'multiple' : 'single',\n                    });\n                }\n            });\n        }\n        tfDateInt('.tf-field-date');\n\n        /*\n        * Each time field initialize flatpickr\n        * @author: Foysal\n        */\n        const tfTimeInt = timeSelector => {\n            $(timeSelector).each(function () {\n                let $this = $(this),\n                    timeField = $this.find('input.flatpickr'),\n                    format = timeField.data('format');\n\n                timeField.flatpickr({\n                    enableTime: true,\n                    noCalendar: true,\n                    dateFormat: format,\n                });\n            });\n        }\n        tfTimeInt('.tf-field-time');\n\n\n        /*\n        * Each color field initialize wpColorPicker\n        * @author: Foysal\n        */\n        const tfColorInt = colorSelector => {\n            $(colorSelector).each(function () {\n                let $this = $(this),\n                    colorField = $this.find('input.tf-color');\n\n                colorField.wpColorPicker();\n            });\n        }\n        tfColorInt('.tf-field-color');\n\n        /*\n        * Custom modal\n        * @author: Foysal\n        */\n        TF_dependency();\n\n        function TF_dependency() {\n            $('.tf-tab-content, .tf-taxonomy-metabox').each(function () {\n                var $this = $(this);\n                $this.find('[data-controller]').each(function () {\n                    var $tffields = $(this);\n                    if ($tffields.length) {\n                        // alert($tffields.length);\n                        var normal_ruleset = $.tf_deps.createRuleset(),\n                            global_ruleset = $.tf_deps.createRuleset(),\n                            normal_depends = [],\n                            global_depends = [];\n\n                        $tffields.each(function () {\n\n                            var $field = $(this),\n                                controllers = $field.data('controller').split('|'),\n                                conditions = $field.data('condition').split('|'),\n                                values = $field.data('value').toString().split('|'),\n                                is_global = $field.data('depend-global') ? true : false,\n                                ruleset = normal_ruleset;\n\n                            $.each(controllers, function (index, depend_id) {\n\n                                var value = values[index] || '',\n                                    condition = conditions[index] || conditions[0];\n\n                                ruleset = ruleset.createRule($this.find('[data-depend-id=\"' + depend_id + '\"]'), condition, value);\n\n                                ruleset.include($field);\n\n                                if (is_global) {\n                                    global_depends.push(depend_id);\n                                } else {\n                                    normal_depends.push(depend_id);\n                                }\n\n                            });\n\n                        });\n\n                        if (normal_depends.length) {\n                            $.tf_deps.enable($this, normal_ruleset, normal_depends);\n                        }\n\n                        if (global_depends.length) {\n                            $.tf_deps.enable(TF.vars.$body, global_ruleset, global_depends);\n                        }\n                    }\n                });\n\n\n            });\n        }\n\n\n        /*\n        * Custom modal\n        * @author: Foysal\n        */\n        $(document).on('click', '.tf-modal-btn', function (e) {\n            e.preventDefault();\n            let $this = $(this),\n                modal = $('#tf-icon-modal');\n\n            if (modal.length > 0 && modal.hasClass('tf-modal-show')) {\n                modal.removeClass('tf-modal-show');\n                $('body').removeClass('tf-modal-open');\n            } else {\n                modal.addClass('tf-modal-show');\n                $('body').addClass('tf-modal-open');\n            }\n        });\n        $(document).on(\"click\", '.tf-modal-close', function () {\n            $('.tf-modal').removeClass('tf-modal-show');\n            $('body').removeClass('tf-modal-open');\n        });\n        $(document).on('click', function (event) {\n            if(!$('.tf-map-modal').length) {\n                if (!$(event.target).closest(\".tf-modal-content,.tf-modal-btn\").length) {\n                    $(\"body\").removeClass(\"tf-modal-open\");\n                    $(\".tf-modal\").removeClass(\"tf-modal-show\");\n                }\n            }\n        });\n\n        /*\n        * Icon tab\n        * @author: Foysal\n        */\n        $(document).on('click', '.tf-icon-tab', function (e) {\n            e.preventDefault();\n            let $this = $(this),\n                tab = $this.data('tab');\n\n            $('.tf-icon-tab').removeClass('active');\n            $this.addClass('active');\n\n            $('#' + tab).addClass('active').siblings().removeClass('active');\n            let searchVal = $('.tf-icon-search-input').val();\n\n            tfIconInfiniteScroll();\n            tfIconFilter(searchVal);\n        });\n\n        /*\n        * Icon select\n        * @author: Foysal\n        */\n        $(document).on('click', '.tf-icon-select .tf-admin-btn, .tf-icon-select .tf-icon-preview', function (e) {\n            e.preventDefault();\n            let btn = $(this);\n\n            let fieldId = btn.closest('.tf-icon-select').attr('id');\n            $('#tf-icon-modal').data('icon-field', fieldId);\n        });\n\n        /*\n        * Icon select\n        * @author: Foysal\n        */\n        $(document).on('click', '.tf-icon-list li', function (e) {\n            e.preventDefault();\n            let $this = $(this);\n\n            $('.tf-icon-list li').removeClass('active');\n            $this.addClass('active');\n\n            //remove disabled class\n            $('.tf-icon-insert').removeClass('disabled');\n        });\n\n        /*\n        * Icon insert\n        * @author: Foysal\n        */\n        $(document).on('click', '.tf-icon-insert', function (e) {\n            e.preventDefault();\n            let $this = $(this),\n                fieldId = $('#tf-icon-modal').data('icon-field'),\n                field = $('#' + fieldId),\n                preview = field.find('.tf-icon-preview'),\n                icon = $('.tf-icon-list li.active').data('icon');\n\n            if (icon) {\n                preview.removeClass('tf-hide');\n                field.find('.tf-icon-preview-wrap i').attr('class', icon);\n                field.find('.tf-icon-value').val(icon).trigger('change');\n\n                //Close modal\n                $('.tf-modal').removeClass('tf-modal-show');\n                $('body').removeClass('tf-modal-open');\n            }\n        })\n\n        /*\n        * Icon remove\n        * @author: Foysal\n        */\n        $(document).on('click', '.tf-icon-preview .remove-icon', function (e) {\n            e.preventDefault();\n            let $this = $(this),\n                preview = $this.closest('.tf-icon-preview'),\n                iconSelect = $this.closest('.tf-icon-select'),\n                iconLi = $('#tf-icon-modal').find('.tf-icon-list li');\n\n            preview.addClass('tf-hide');\n            iconSelect.find('.tf-icon-preview-wrap i').attr('class', '');\n            iconSelect.find('.tf-icon-value').val('').trigger('change');\n\n            //remove active class\n            iconLi.removeClass('active');\n        })\n\n        /*\n        * Icon search\n        * @author: Foysal\n        */\n        //debounce\n        const debounce = (func, delay) => {\n            let debounceTimer;\n            return function () {\n                const context = this;\n                const args = arguments;\n                clearTimeout(debounceTimer);\n                debounceTimer = setTimeout(() => func.apply(context, args), delay);\n            }\n        }\n\n        $(document).on('keyup', '.tf-icon-search-input', debounce(function (e) {\n            let searchVal = $(this).val();\n            tfIconFilter(searchVal);\n        }, 500));\n\n        const tfIconFilter = (searchVal) => {\n            let type = $('.tf-icon-tab-pane.active').data('type');\n            let iconList = $('.tf-icon-tab-pane.active .tf-icon-list');\n\n            $.ajax({\n                url: tf_options.ajax_url,\n                type: 'POST',\n                data: {\n                    action: 'tf_icon_search',\n                    _nonce: tf_admin_params.tf_nonce,\n                    search: searchVal,\n                    type: type,\n                },\n                beforeSend: function () {\n                    iconList.html('<div class=\"tf-icon-loading\">Loading...</div>');\n                },\n                success: function (response) {\n                    if(!response.success){\n                        notyf.error(response.data)\n                    } else {\n                        iconList.html(response.data.html);\n                        $('.tf-icon-tab-pane.active').attr('data-max', response.data.count);\n                    }\n                },\n                error: function (xhr, status, error) {\n                    console.error(error);\n                }\n            });\n        }\n\n        /*\n        * Icon Infinite Scroll\n        * @author: Foysal\n        */\n        const tfIconInfiniteScroll = () => {\n            var loading = false;\n            var startIndex = 100;\n            let iconList = $('.tf-icon-tab-pane.active .tf-icon-list');\n            let iconListBottom = 0;\n            let searchVal = $('.tf-icon-search-input').val();\n\n            iconList.on(\"scroll\", function () {\n                let type = $('.tf-icon-tab-pane.active').data('type');\n                let max = $('.tf-icon-tab-pane.active').data('max');\n                iconListBottom = iconList[0].scrollHeight - iconList.height();\n\n                if (iconList.scrollTop() >= iconListBottom && !loading && startIndex < max) {\n                    loading = true;\n                    $.ajax({\n                        url: tf_options.ajax_url,\n                        type: 'POST',\n                        data: {\n                            action: 'tf_load_more_icons',\n                            _nonce: tf_admin_params.tf_nonce,\n                            start_index: startIndex,\n                            type: type,\n                            search: searchVal,\n                        },\n                        beforeSend: function () {\n                            $('.tf-icon-list').append('<div class=\"tf-icon-loading\">Loading...</div>');\n                        },\n                        success: function (response) {\n                            if(!response.success){\n                                $('.tf-icon-loading').remove();\n                                notyf.error(response.data)\n                            } else {\n                                loading = false;\n                                $('#tf-icon-tab-'+type+' .tf-icon-list').append(response.data);\n                                $('.tf-icon-loading').remove();\n                                startIndex += 100;\n                            }\n\n                        },\n                        error: function (xhr, status, error) {\n                            loading = false;\n                            console.error(error);\n                            $('.tf-icon-loading').remove();\n                        }\n                    });\n                }\n            });\n        }\n        tfIconInfiniteScroll();\n\n        /*\n        * Options ajax save\n        * @author: Foysal\n        */\n\n        $(document).on(\"click\", '.tf-setting-save-btn .tf-submit-btn', function (e) {\n            e.preventDefault();\n            $('.tf-option-form.tf-ajax-save').submit();\n\n        })\n\n        $(document).on('click', '.tf-setting-save-btn .tf-reset-btn', function (e) {\n\n            Swal.fire({\n                title: tf_options.swal_reset_title_text,\n                text: tf_options.swal_reset_other_text,\n                icon: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: tf_options.swal_reset_btn_text,\n                customClass: \"tf-swal-settings-reset-alert\",\n              }).then((result) => {\n                if (result.isConfirmed) {\n                    $.ajax({\n                        url: tf_options.ajax_url,\n                        type: 'POST',\n                        data: {\n                            action: 'tf_options_reset',\n                            tf_option_nonce: tf_admin_params.tf_nonce,\n                        },\n                        beforeSend: function () {\n                            $('.tf-setting-save-btn .tf-reset-btn').addClass('tf-btn-loading');\n                        },\n                        success: function (response) {\n\n                            let data = JSON.parse(response)\n                            \n                            if (data.status === 'success') {\n                                notyf.success(data.message);\n                                window.location.reload();\n                            } else {\n                                notyf.error(data.message);\n                            }\n                            \n                            $('.tf-setting-save-btn .tf-reset-btn').removeClass('tf-btn-loading');\n                        },\n                        error: function (xhr, status, error) {\n                            console.log(error);\n                        }\n                    }).done(function () {\n                        // window.location.reload();\n                    });\n                }\n              });\n\n        });\n\n        $(document).find(\"#tf-settings-header-search-filed\").on(\"keyup\", debounce(\n            function () {\n                var value = $(this).val().toLowerCase();\n                let div = document.createElement('div');\n                div.classList.add('tf-search-results');\n                if( value.length >= 3 ) {\n                    $.ajax({\n                        url: tf_options.ajax_url,\n                        type: 'POST',\n                        data: {\n                            action: 'tf_search_settings_autocomplete',\n                            tf_option_nonce: tf_admin_params.tf_nonce,\n                            search: value,\n                        },\n                        success: function (response) {\n                            let data = JSON.parse(response)\n                            let notfound = 0;\n                            let resultDiv = document.createElement('ul');\n                            if (data.status === 'success') {\n                                $.each( data.message, function( key, obj ) {\n                                    if( obj.field_title.toLowerCase().indexOf(value) != -1 ) {\n                                        let textDiv = document.createElement('li');\n                                        let titleDiv = document.createElement('div');\n                                        titleDiv.classList.add('tf-search-result-title');\n                                        let link = document.createElement('a');\n                                        link.href = `#tab=${obj.parent_id}`;\n                                        let icon = document.createElement('i');\n                                        let title = document.createElement('p');\n                                        let path = document.createElement('span');\n                                        title.innerHTML = obj.field_title;\n                                        path.innerHTML = obj.path;\n                                        icon.classList.add(...obj.icon.split(' '));\n                                        resultDiv.classList.add('tf-search-result');\n                                        textDiv.setAttribute('data-id', obj.id);\n                                        textDiv.setAttribute('data-tab-id', obj.tab_id);\n                                        link.append(icon);\n                                        titleDiv.append(title);\n                                        titleDiv.append(path);\n                                        link.append(titleDiv);\n                                        textDiv.append(link);\n                                        resultDiv.append(textDiv);\n                                    } else {\n                                        notfound = 1;\n                                    }\n                                    if( $('.tf-search-results').length || value < 3 ) {\n                                        $('.tf-search-results').remove();\n                                    } else {\n                                        div.append(resultDiv);\n                                    }\n                                });\n\n                                if( notfound == 1 ) {\n                                    let not_found = document.createElement(\"p\");\n                                    not_found.classList.add('tf-search-not-found');\n                                    not_found.innerHTML = tf_admin_params.setting_search_no_result;\n                                    resultDiv.append(not_found);\n                                }\n                                $(\".tf-setting-search\").append(div);\n                            } else {\n                                console.log(\"Something went wrong!\");\n                            }\n                        }\n                    })\n                    \n                } else {\n                    $(\".tf-search-results\").hide();\n                }\n            }, 700 \n        ));\n\n        $(document).on('click', function (e) {\n            if( e.target.id !== 'tf-settings-header-search-filed' && $('.tf-search-results').length ) {\n                $('.tf-search-results').hide();\n            }\n        });\n\n\n        $(\"#tf-settings-header-search-filed\").on('focus', function (e) {\n            if( $('.tf-search-results').length ) {\n                $('.tf-search-results').show();\n            }\n        });\n\n        $(document).on('click', '.tf-search-result li', function (e) {\n            let id = $(this).data('id');\n            let selector = `label[for='tf_settings\\\\[${id}\\\\]']`;\n            let tabId = $(this).closest('li').data('tab-id');\n            if( tabId ) {\n                $('.tf-tab-item[data-tab-id=\"'+tabId+'\"]').trigger('click');\n            }\n            $('html, body').animate({\n                scrollTop: $(document).find(selector).closest('.tf-field').offset().top\n            }, 100);\n        \n        });\n\n        $(document).on('submit', '.tf-option-form.tf-ajax-save', function (e) {\n            e.preventDefault();\n            let $this = $(this),\n                submitBtn = $this.find('.tf-submit-btn'),\n                data = new FormData(this);\n            var fontsfile = $('.itinerary-fonts-file').prop(\"files\");\n            if (typeof fontsfile !== \"undefined\") {\n                for (var i = 0; i < fontsfile.length; i++) {\n                    data.append('file[]', fontsfile[i]);\n                }\n            }\n            // get tf_import_option from data\n            let tf_import_option =  false\n            if (typeof data.get('tf_import_option') !== \"undefined\" && data.get('tf_import_option').trim() != '') {\n\n                //  confirm data before send\n                if (!confirm(tf_options.tf_export_import_msg.import_confirm)) {\n                    return;\n                }\n\n                tf_import_option = true;\n            }\n            data.append('action', 'tf_options_save');\n\n            $.ajax({\n                url: tf_options.ajax_url,\n                type: 'POST',\n                data: data,\n                processData: false,\n                contentType: false,\n                beforeSend: function () {\n                    if(tf_import_option == true ){\n                        $this.find('.tf-import-btn').addClass('tf-btn-loading');\n                    }\n                    submitBtn.addClass('tf-btn-loading');\n                    $('.tf-setting-save-btn .tf-submit-btn').addClass('tf-btn-loading');\n                },\n                success: function (response) {\n                    let obj = JSON.parse(response);\n                    if (obj.status === 'success') {\n                        \n                        notyf.success(obj.message);\n\n                        if(tf_import_option == true ){\n                            window.location.reload();;\n                        }\n                    } else {\n                        notyf.error(obj.message);\n                    }\n                    submitBtn.removeClass('tf-btn-loading');\n                    $(\".tf-setting-save-btn .tf-submit-btn\").removeClass('tf-btn-loading');\n                    if(tf_import_option == true ){\n                        $this.find('.tf-import-btn').removeClass('tf-btn-loading');\n                    }\n                },\n                error: function (error) {\n                    submitBtn.removeClass('tf-btn-loading');\n                    console.log(error['responseText']);\n                    //if error msg contain max_input_vars then show a proper msg\n                    if(error['responseText'].includes('max_input_vars')) {\n                        notyf.error({\n                            message: tf_admin_params.max_input_vars_notice,\n                            duration: 15000,\n                            dismissible: true\n                        });\n                    } else {\n                        notyf.error({\n                            message: error['responseText'],\n                            duration: 6000\n                        });\n                    }\n                }\n            });\n        });\n\n        /*\n        * Each select2 field initialize select2\n        * @author: Foysal, Sydur\n        */\n        const tfSelect2Int = select2Selector => {\n            let $this = select2Selector,\n                id = $this.attr('id'),\n                placeholder = $this.data('placeholder'),\n                deleteData = $this.data('delete');\n\n            if(deleteData === 'yes'){\n                $('#' + id + '').select2({\n                    placeholder: placeholder,\n                    allowClear: true,\n                    templateResult: TfFormatOption,\n                    templateSelection: function (state) {\n                        if (!state.id) {\n                            return state.text;\n                        }\n                \n                        // Get the edit URL from the option's data attribute\n                        var editUrl = $(state.element).data('edit-url');\n                        if(editUrl){\n                            var $state = $(\n                                '<span>' + state.text + ' <a target=\"_blank\" href=\"'+editUrl+'\" class=\"tf-edit-room\"><i class=\"fa-regular fa-pen-to-square\"></i></a></span>'\n                            );\n                            return $state;\n                        }\n                \n                        return state.text;\n                    }\n                });\n            }else{\n                $('#' + id + '').select2({\n                    placeholder: placeholder,\n                    allowClear: true,\n                    templateSelection: function (state) {\n                        if (!state.id) {\n                            return state.text;\n                        }\n                \n                        // Get the edit URL from the option's data attribute\n                        var editUrl = $(state.element).data('edit-url');\n                        if(editUrl){\n                            var $state = $(\n                                '<span>' + state.text + ' <a target=\"_blank\" href=\"'+editUrl+'\" class=\"tf-edit-room\"><i class=\"fa-regular fa-pen-to-square\"></i></a></span>'\n                            );\n                            return $state;\n                        }\n                \n                        return state.text;\n                    }\n                });\n            }\n        \n        }\n\n        $('select.tf-select2').each(function () {\n            var $this = $(this);\n            tfSelect2Int($this);\n        });\n\n        function TfFormatOption(option) {\n            if (!option.id) {\n              return option.text;\n            }\n\n           var $option = $(\n              '<span style=\"display: flex; justify-content: space-between;\">' + option.text + '<span class=\"tf-remove-button\" data-id=\"' + option.id + '\">Remove</span></span>'\n            );\n    \n            return $option;\n        }\n        $(document).on('select2:selecting', '.tf-select2', function (e) {\n\n            if (e.params.args.originalEvent.target.className === 'tf-remove-button') {\n                e.stopPropagation();\n                e.preventDefault();\n\n                let $this = $(this);\n                let parentDiv = $this.closest('.tf-fieldset');\n                let categoryName = parentDiv.find('#category_name').val();\n                let categorySelect = parentDiv.find('#category_select_field_name').val();\n                var termId=$(e.params.args.originalEvent.target).data(\"id\");\n\n                $.ajax({\n                    url: tf_options.ajax_url,\n                    method: 'POST',\n                    data: {\n                        action: 'tf_delete_category_data',\n                        _nonce: tf_admin_params.tf_nonce,\n                        term_id: termId,\n                        categoryName: categoryName\n                    },\n                    success: function (response) {\n                        var data = JSON.parse(response);\n                        if (data.success) {\n                            // Remove the option and trigger the change event\n                            let $selectField = $('#' + categorySelect);\n\n                            // Remove the option from Select2\n                            $selectField.find('option[value=\"' + termId + '\"]').remove();\n\n                            // Close the Select2 dropdown\n                            $selectField.select2('close');\n\n                        } else {\n                            \n                        }\n                    }\n                });\n            }\n        });\n\n\n        $('select.tf-shortcode-select2').each(function(e) {\n            let $this = $(this);\n            let id = $this.attr(\"id\");\n            tfSelect2Int($this);\n\n            $(this).on(\"select2:select\", function (e) { \n                var select_val = $(e.currentTarget).val();\n                if(select_val && select_val.includes(\"'all'\")) {\n                    $(this).val([\"'all'\"]).trigger('change.select2');\n                }\n            });\n        })\n\n        /*\n        * Room options count\n        */\n        function roomOptionsArr(){\n            var optionsArr = [];\n            $('.tf-repeater-wrap-room-options .tf-single-repeater-room-options').each(function(index){\n                let optionType = $('[name=\"tf_room_opt[room-options]['+index+'][option_pricing_type]\"]').val();\n                let optionTitle = $('[name=\"tf_room_opt[room-options]['+index+'][option_title]\"]').val();\n\n                // Add the option title, option type, and index to the options array\n                optionsArr[index] = {\n                    index: index,\n                    title: optionTitle,\n                    type: optionType\n                };\n            })\n            return optionsArr;\n        }\n\n        $(window).on('load', function () {\n            roomOptionsArr();\n        });\n\n        /*\n        * Room Availability Calendar\n        * @since 2.10.2\n        * @auther: Foysal\n        */\n        var roomCal = function (container) {\n            var self = this;\n            this.container = container;\n            this.calendar = null\n            this.roomCalData = null;\n            this.fullCalendar;\n            this.timeOut;\n            this.fullCalendarOptions = {\n                initialView: 'dayGridMonth',\n                firstDay: 1,\n                headerToolbar: {\n                    start: 'today',\n                    center: 'title',\n                    end: 'prev,next'\n                },\n                displayEventTime: true,\n                selectable: true,\n                select: function ({start, end, startStr, endStr, allDay, jsEvent, view, resource}) {\n                    if (moment(start).isBefore(moment(), 'day') || moment(end).isBefore(moment(), 'day')) {\n                        self.fullCalendar.unselect();\n                        setRoomCheckInOut(\"\", \"\", self.roomCalData);\n                    } else {\n                        var zone = moment(start).format(\"Z\");\n                        zone = zone.split(\":\");\n                        zone = \"\" + parseInt(zone[0]) + \":00\";\n                        var check_in = moment(start).utcOffset(zone).format(String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase());\n                        var check_out = moment(end).utcOffset(zone).subtract(1, 'day').format(String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase());\n                        setRoomCheckInOut(check_in, check_out, self.roomCalData);\n                    }\n                },\n                events: function ({start, end, startStr, endStr, timeZone}, successCallback, failureCallback) {\n                    $.ajax({\n                        url: tf_options.ajax_url,\n                        dataType: \"json\",\n                        type: \"POST\",\n                        data: {\n                            action: \"tf_get_hotel_room_availability\",\n                            _nonce: tf_admin_params.tf_nonce,\n                            new_post: $(self.container).find('[name=\"new_post\"]').val(),\n                            room_id: $(self.container).find('[name=\"room_id\"]').val(),\n                            avail_date: $(self.container).find('.avail_date').val(),\n                            option_arr: roomOptionsArr(),\n                        },\n                        beforeSend: function () {\n                            $(self.container).css({'pointer-events': 'none', 'opacity': '0.5'});\n                            $(self.calendar).addClass('tf-content-loading');\n                        },\n                        success: function (doc) {\n                            if (typeof doc == \"object\") {\n                                successCallback(doc?.avail_data);\n                            }\n\n                            $('.tf-single-options').html(doc?.options_html);\n\n                            $(self.container).css({'pointer-events': 'auto', 'opacity': '1'});\n                            $(self.calendar).removeClass('tf-content-loading');\n                        },\n                        error: function (e) {\n                            console.log(e);\n                        }\n                    });\n                },\n                eventContent: function (arg) {\n                    const title = arg.event.title;\n                    const eventTitleElement = document.createElement('div');\n                    eventTitleElement.classList.add('fc-event-title');\n                    eventTitleElement.innerHTML = title;\n                    return {domNodes: [eventTitleElement]};\n                },\n                eventClick: function ({event, el, jsEvent, view}) {\n                    let startTime = moment(event.start, String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase())\n                        .format(String(tf_options.tf_admin_date_format || 'MM/DD/YYYY').toUpperCase());\n                    let endTime;\n                    if (event.end) {\n                        endTime = moment(event.end, String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase())\n                            .format(String(tf_options.tf_admin_date_format || 'MM/DD/YYYY').toUpperCase());\n                    } else {\n                        endTime = startTime;\n                    }\n                    setRoomCheckInOut(startTime, endTime, self.roomCalData);\n                    let priceBy = $('.tf_room_pricing_by').val();\n                    if (priceBy === '1') {\n                        if (typeof event.extendedProps.price != 'undefined') {\n                            $(\"[name='tf_room_price']\", self.roomCalData).val(event.extendedProps.price);\n                        }\n                    } else if(priceBy === '2'){\n                        if (typeof event.extendedProps.adult_price != 'undefined') {\n                            $(\"[name='tf_room_adult_price']\", self.roomCalData).val(event.extendedProps.adult_price);\n                        }\n                        if (typeof event.extendedProps.child_price != 'undefined') {\n                            $(\"[name='tf_room_child_price']\", self.roomCalData).val(event.extendedProps.child_price);\n                        }\n                    } else {\n                        if(event.extendedProps.options_count != 0) {\n                            for (var i = 0; i <= event.extendedProps.options_count - 1; i++) {\n                                $(\"[name='tf_room_option_\" + i + \"']\", self.roomCalData).prop('checked', event.extendedProps[\"tf_room_option_\" + i] == 1);\n\n                                $(\"[name='tf_option_room_price_\" + i + \"']\", self.roomCalData).val(event.extendedProps[\"tf_option_room_price_\" + i]);\n                                $(\"[name='tf_option_adult_price_\" + i + \"']\", self.roomCalData).val(event.extendedProps[\"tf_option_adult_price_\" + i]);\n                                $(\"[name='tf_option_child_price_\" + i + \"']\", self.roomCalData).val(event.extendedProps[\"tf_option_child_price_\" + i]);\n                            }\n                        }\n                    }\n                    if (event.extendedProps.status) {\n                        $(\"[name='tf_room_status'] option[value=\" + event.extendedProps.status + \"]\", self.roomCalData).prop(\"selected\", true);\n                    }\n                },\n            };\n            this.init = function () {\n                self.container = jQuery(container);\n                self.calendar = container.querySelector('.tf-room-cal');\n                self.roomCalData = $('.tf-room-cal-field', self.container);\n                setRoomCheckInOut('', '', self.roomCalData);\n                self.initCalendar();\n            }\n            this.initCalendar = function () {\n                if (typeof FullCalendar != 'undefined') {\n                    self.fullCalendar = new FullCalendar.Calendar(self.calendar, self.fullCalendarOptions);\n                    self.fullCalendar.render();\n                }\n            }\n        };\n\n        function setRoomCheckInOut(check_in, check_out, roomCalData) {\n            $('.tf_room_check_in', roomCalData).val(check_in);\n            $('.tf_room_check_out', roomCalData).val(check_out);\n        }\n\n        function roomResetForm(roomCalData) {\n            $('.tf_room_check_in', roomCalData).val('');\n            $('.tf_room_check_out', roomCalData).val('');\n            $('[name=\"tf_room_price\"]', roomCalData).val('');\n            $('[name=\"tf_room_adult_price\"]', roomCalData).val('');\n            $('[name=\"tf_room_child_price\"]', roomCalData).val('');\n        }\n\n        const tfHotelCalendar = () => {\n            $('.tf-room-cal-wrap').each(function (index, el) {\n                var room = new roomCal(el);\n                room.init();\n            });\n        }\n        tfHotelCalendar();\n\n        $('.tf-room-cal-wrap').each(function (index, el) {\n            let checkIn = $(el).find('[name=\"tf_room_check_in\"]').flatpickr({\n                dateFormat: 'Y-m-d',\n                minDate: 'today',\n                altInput: true,\n                altFormat: tf_options.tf_admin_date_format,\n                onChange: function (selectedDates, dateStr, instance) {\n                    checkOut.set('minDate', dateStr);\n                }\n            });\n\n            let checkOut = $(el).find('[name=\"tf_room_check_out\"]').flatpickr({\n                dateFormat: 'Y-m-d',\n                minDate: 'today',\n                altInput: true,\n                altFormat: tf_options.tf_admin_date_format,\n                onChange: function (selectedDates, dateStr, instance) {\n                    checkIn.set('maxDate', dateStr);\n                }\n            });\n        });\n\n        $(document).on('click', '.tf_room_cal_update', function (e) {\n            e.preventDefault();\n\n            let btn = $(this);\n            let container = btn.closest('.tf-room-cal-wrap');\n            let containerEl = btn.closest('.tf-room-cal-wrap')[0];\n            let cal = container.find('.tf-room-cal');\n            let data = $('input, select', container.find('.tf-room-cal-field')).serializeArray();\n            let priceBy = $('.tf_room_pricing_by').val();\n            let avail_date = container.find('.avail_date');\n            data.push({name: 'action', value: 'tf_add_hotel_room_availability'});\n            data.push({name: '_nonce', value: tf_admin_params.tf_nonce});\n            data.push({name: 'price_by', value: priceBy});\n            data.push({name: 'avail_date', value: avail_date.val()});\n            data.push({name: 'options_count', value: roomOptionsArr().length});\n\n            $.ajax({\n                url: tf_options.ajax_url,\n                type: 'POST',\n                data: data,\n                beforeSend: function () {\n                    container.css({'pointer-events': 'none', 'opacity': '0.5'})\n                    cal.addClass('tf-content-loading');\n                    btn.addClass('tf-btn-loading');\n                },\n                success: function (response) {\n                    if (typeof response == 'object') {\n                        if (response.data.status === true) {\n                            avail_date.val(response.data.avail_date)\n                            notyf.success(response.data.message);\n                            roomResetForm(container);\n\n                            var room = new roomCal(containerEl);\n                            room.init();\n                            if (room.fullCalendar) {\n                                room.fullCalendar.refetchEvents();\n                            }\n                        } else {\n                            notyf.error(response.data.message);\n                        }\n\n                        container.css({'pointer-events': 'auto', 'opacity': '1'})\n                        cal.removeClass('tf-content-loading');\n                        btn.removeClass('tf-btn-loading');\n                    }\n                },\n                error: function (e) {\n                    console.log(e);\n                    container.css({'pointer-events': 'auto', 'opacity': '1'})\n                    cal.removeClass('tf-content-loading');\n                    btn.removeClass('tf-btn-loading');\n                },\n                complete: function () {\n                    container.css({'pointer-events': 'auto', 'opacity': '1'});\n                    cal.removeClass('tf-content-loading');\n                    btn.removeClass('tf-btn-loading');\n                },\n            });\n        });\n\n        $(document).on('change', '.tf_room_pricing_by', function (e) {\n            let pricing_by = $(this).val();\n\n            if (pricing_by === '1') {\n                $('.tf-price-by-room').show();\n                $('.tf-price-by-person').hide();\n                $('.tf-room-cal-field .tf-single-option').hide();\n            } else if (pricing_by === '2') {\n                $('.tf-price-by-person').show();\n                $('.tf-price-by-room').hide();\n                $('.tf-room-cal-field .tf-single-option').hide();\n            } else if(pricing_by === '3') {\n                $('.tf-price-by-room').hide();\n                $('.tf-price-by-person').hide();\n                $('.tf-room-cal-field .tf-single-option').show();\n            }\n        });\n\n        // Switcher Value Changed\n        $(document).on(\"change\", \".tf-switch\", function (e) {\n            var $this = $(this);\n            if (this.checked) {\n                var value = $this.val(1);\n            } else {\n                var value = $this.val('');\n            }\n\n            if ($this.hasClass('tf_room_availability_by_date')) {\n                tfHotelCalendar();\n            }\n            if ($this.hasClass('tf_apartment_availability_by_date')){\n                tfApartmentCalendar();\n            }\n        });\n\n        /*\n        * Apartment Availability Calendar\n        * @since 2.10.2\n        * @auther: Foysal\n        */\n        var apartmentCal = function (container) {\n            var self = this;\n            this.container = container;\n            this.calendar = null\n            this.apartmentCalData = null;\n            this.fullCalendar;\n            this.timeOut;\n            this.fullCalendarOptions = {\n                initialView: 'dayGridMonth',\n                firstDay: 1,\n                headerToolbar: {\n                    start: 'today',\n                    center: 'title',\n                    end: 'prev,next'\n                },\n                displayEventTime: true,\n                selectable: true,\n                select: function ({start, end, startStr, endStr, allDay, jsEvent, view, resource}) {\n                    if (moment(start).isBefore(moment(), 'day') || moment(end).isBefore(moment(), 'day')) {\n                        self.fullCalendar.unselect();\n                        setAptCheckInOut(\"\", \"\", self.apartmentCalData);\n                    } else {\n                        var zone = moment(start).format(\"Z\");\n                        zone = zone.split(\":\");\n                        zone = \"\" + parseInt(zone[0]) + \":00\";\n                        var check_in = moment(start).utcOffset(zone).format(String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase());\n                        var check_out = moment(end).utcOffset(zone).subtract(1, 'day').format(String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase());\n                        setAptCheckInOut(check_in, check_out, self.apartmentCalData);\n                    }\n                },\n                events: function ({start, end, startStr, endStr, timeZone}, successCallback, failureCallback) {\n                    $.ajax({\n                        url: tf_options.ajax_url,\n                        dataType: \"json\",\n                        type: \"POST\",\n                        data: {\n                            action: \"tf_get_apartment_availability\",\n                            _nonce: tf_admin_params.tf_nonce,\n                            new_post: $('[name=\"new_post\"]').val(),\n                            apartment_id: $('[name=\"apartment_id\"]').val(),\n                            apt_availability: $('.apt_availability').val(),\n                        },\n                        beforeSend: function () {\n                            $(self.container).css({'pointer-events': 'none', 'opacity': '0.5'});\n                            $(self.calendar).addClass('tf-content-loading');\n                        },\n                        success: function (doc) {\n                            if (typeof doc == \"object\") {\n                                successCallback(doc);\n                            }\n\n                            $(self.container).css({'pointer-events': 'auto', 'opacity': '1'});\n                            $(self.calendar).removeClass('tf-content-loading');\n                        },\n                        error: function (e) {\n                            console.log(e);\n                        }\n                    });\n                },\n                eventContent: function (arg) {\n                    const title = arg.event.title;\n                    const eventTitleElement = document.createElement('div');\n                    eventTitleElement.classList.add('fc-event-title');\n                    eventTitleElement.innerHTML = title;\n                    return {domNodes: [eventTitleElement]};\n                },\n                eventClick: function ({event, el, jsEvent, view}) {\n                    let startTime = moment(event.start, String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase())\n                        .format(String(tf_options.tf_admin_date_format || 'MM/DD/YYYY').toUpperCase());\n                    let endTime;\n                    if (event.end) {\n                        endTime = moment(event.end, String(tf_options.tf_admin_date_format || \"MM/DD/YYYY\").toUpperCase())\n                            .format(String(tf_options.tf_admin_date_format || 'MM/DD/YYYY').toUpperCase());\n                    } else {\n                        endTime = startTime;\n                    }\n                    setAptCheckInOut(startTime, endTime, self.apartmentCalData);\n                    let pricingType = $('.tf_apt_pricing_type').val();\n                    if (pricingType === 'per_night') {\n                        if (typeof event.extendedProps.price != 'undefined') {\n                            $(\"[name='tf_apt_price']\", self.apartmentCalData).val(event.extendedProps.price);\n                        }\n                    } else {\n                        if (typeof event.extendedProps.adult_price != 'undefined') {\n                            $(\"[name='tf_apt_adult_price']\", self.apartmentCalData).val(event.extendedProps.adult_price);\n                        }\n                        if (typeof event.extendedProps.child_price != 'undefined') {\n                            $(\"[name='tf_apt_child_price']\", self.apartmentCalData).val(event.extendedProps.child_price);\n                        }\n                        if (typeof event.extendedProps.infant_price != 'undefined') {\n                            $(\"[name='tf_apt_infant_price']\", self.apartmentCalData).val(event.extendedProps.infant_price);\n                        }\n                    }\n                    if (event.extendedProps.status) {\n                        $(\"[name='tf_apt_status'] option[value=\" + event.extendedProps.status + \"]\", self.apartmentCalData).prop(\"selected\", true);\n                    }\n                },\n            };\n            this.init = function () {\n                self.container = jQuery(container);\n                self.calendar = container.querySelector('.tf-apt-cal');\n                self.apartmentCalData = $('.tf-apt-cal-field', self.container);\n                setAptCheckInOut('', '', self.apartmentCalData);\n                self.initCalendar();\n            }\n            this.initCalendar = function () {\n                if (typeof FullCalendar != 'undefined') {\n                    self.fullCalendar = new FullCalendar.Calendar(self.calendar, self.fullCalendarOptions);\n                    self.fullCalendar.render();\n                }\n            }\n        };\n\n        function setAptCheckInOut(check_in, check_out, apartmentCalData) {\n            $('.tf_apt_check_in', apartmentCalData).val(check_in);\n            $('.tf_apt_check_out', apartmentCalData).val(check_out);\n        }\n\n        function aptResetForm(apartmentCalData) {\n            $('.tf_apt_check_in', apartmentCalData).val('');\n            $('.tf_apt_check_out', apartmentCalData).val('');\n            $('[name=\"tf_apt_price\"]', apartmentCalData).val('');\n            $('[name=\"tf_apt_adult_price\"]', apartmentCalData).val('');\n            $('[name=\"tf_apt_child_price\"]', apartmentCalData).val('');\n            $('[name=\"tf_apt_infant_price\"]', apartmentCalData).val('');\n        }\n\n        const tfApartmentCalendar = () => {\n            $('.tf-apt-cal-wrap').each(function (index, el) {\n                var apt = new apartmentCal(el);\n                apt.init();\n\n                let checkIn = $(el).find('[name=\"tf_apt_check_in\"]').flatpickr({\n                    dateFormat: 'Y-m-d',\n                    minDate: 'today',\n                    altInput: true,\n                    altFormat: tf_options.tf_admin_date_format,\n                    onChange: function (selectedDates, dateStr, instance) {\n                        checkOut.set('minDate', dateStr);\n                    }\n                });\n\n                let checkOut = $(el).find('[name=\"tf_apt_check_out\"]').flatpickr({\n                    dateFormat: 'Y-m-d',\n                    minDate: 'today',\n                    altInput: true,\n                    altFormat: tf_options.tf_admin_date_format,\n                    onChange: function (selectedDates, dateStr, instance) {\n                        checkIn.set('maxDate', dateStr);\n                    }\n                });\n            });\n        }\n        tfApartmentCalendar();\n\n        $(document).on('click', '.tf_apt_cal_update', function (e) {\n            e.preventDefault();\n\n            let btn = $(this);\n            let container = btn.closest('.tf-apt-cal-wrap');\n            let containerEl = btn.closest('.tf-apt-cal-wrap')[0];\n            let cal = container.find('.tf-apt-cal');\n            let data = $('input, select', container.find('.tf-apt-cal-field')).serializeArray();\n            let pricingType = $('.tf_apt_pricing_type').val();\n            let aptAvailability = container.find('.apt_availability');\n            data.push({name: 'action', value: 'tf_add_apartment_availability'});\n            data.push({name: '_nonce', value: tf_admin_params.tf_nonce});\n            data.push({name: 'pricing_type', value: pricingType});\n            data.push({name: 'apt_availability', value: aptAvailability.val()});\n\n            $.ajax({\n                url: tf_options.ajax_url,\n                type: 'POST',\n                data: data,\n                beforeSend: function () {\n                    container.css({'pointer-events': 'none', 'opacity': '0.5'})\n                    cal.addClass('tf-content-loading');\n                    btn.addClass('tf-btn-loading');\n                },\n                success: function (response) {\n                    if (typeof response == 'object') {\n                        if (response.data.status === true) {\n                            aptAvailability.val(response.data.apt_availability)\n                            notyf.success(response.data.message);\n                            aptResetForm(container);\n\n                            var apt = new apartmentCal(containerEl);\n                            apt.init();\n                            if (apt.fullCalendar) {\n                                apt.fullCalendar.refetchEvents();\n                            }\n                        } else {\n                            notyf.error(response.data.message);\n                        }\n\n                        container.css({'pointer-events': 'auto', 'opacity': '1'})\n                        cal.removeClass('tf-content-loading');\n                        btn.removeClass('tf-btn-loading');\n                    }\n                },\n                error: function (e) {\n                    console.log(e);\n                    container.css({'pointer-events': 'auto', 'opacity': '1'})\n                    cal.removeClass('tf-content-loading');\n                    btn.removeClass('tf-btn-loading');\n                },\n                complete: function () {\n                    container.css({'pointer-events': 'auto', 'opacity': '1'});\n                    cal.removeClass('tf-content-loading');\n                    btn.removeClass('tf-btn-loading');\n                },\n            });\n        });\n\n        $(document).on('change', '.tf_apt_pricing_type', function (e) {\n            let pricingType = $(this).val();\n\n            if (pricingType === 'per_night') {\n                $('.tf-price-by-night').show();\n                $('.tf-price-by-person').hide();\n            } else if (pricingType === '2') {\n                $('.tf-price-by-person').show();\n                $('.tf-price-by-night').hide();\n            }\n        });\n\n\n        /*\n        * Options WP editor\n        * @author: Sydur\n        */\n        function TF_wp_editor($id) {\n            wp.editor.initialize($id, {\n                tinymce: {\n                    wpautop: true,\n                    plugins: 'charmap colorpicker hr lists paste tabfocus textcolor fullscreen wordpress wpautoresize wpeditimage wpemoji wpgallery wplink wptextpattern',\n                    toolbar1: 'formatselect,bold,italic,bullist,numlist,blockquote,alignleft,aligncenter,alignright,link,wp_more,spellchecker,fullscreen,wp_adv,listbuttons',\n                    toolbar2: 'styleselect,strikethrough,hr,forecolor,pastetext,removeformat,charmap,outdent,indent,undo,redo,wp_help',\n                    //   textarea_rows : 20\n                },\n                quicktags: {buttons: 'strong,em,link,block,del,ins,img,ul,ol,li,code,more,close'},\n                mediaButtons: false,\n            });\n        }\n\n        $('textarea.wp_editor, textarea.tf_wp_editor').each(function () {\n            let $id = $(this).attr('id');\n\n            setTimeout(function() { \n                TF_wp_editor($id);\n            }, 1000);\n            \n        });\n\n        /*\n        * Booking Confirmation Field Fixed\n        * @since 2.9.28\n        * @author: Jahid\n        */\n        TF_Booking_Confirmation();\n\n        function TF_Booking_Confirmation() {\n            if ($('.tf-repeater-wrap .tf-single-repeater-book-confirm-field').length > 0) {\n                $('.tf-repeater-wrap .tf-single-repeater-book-confirm-field').each(function () {\n                    let $this = $(this);\n                    let repeaterCount = $this.find('input[name=\"tf_repeater_count\"]').val();\n                    if (0 == repeaterCount || 1 == repeaterCount || 2 == repeaterCount) {\n                        $this.find('.tf_hidden_fields').hide();\n                        $this.find('.tf-repeater-icon-clone').hide();\n                        $this.find('.tf-repeater-icon-delete').hide();\n                    }\n                });\n            }\n            if ($('.tf-repeater-wrap .tf-single-repeater-hotel-book-confirm-field').length > 0) {\n                $('.tf-repeater-wrap .tf-single-repeater-hotel-book-confirm-field').each(function () {\n                    let $this = $(this);\n                    let repeaterCount = $this.find('input[name=\"tf_repeater_count\"]').val();\n                    if (0 == repeaterCount || 1 == repeaterCount || 2 == repeaterCount) {\n                        $this.find('.tf_hidden_fields').hide();\n                        $this.find('.tf-repeater-icon-clone').hide();\n                        $this.find('.tf-repeater-icon-delete').hide();\n                    }\n                });\n            }\n            if ($('.tf-repeater-wrap .tf-single-repeater-car-book-confirm-field').length > 0) {\n                $('.tf-repeater-wrap .tf-single-repeater-car-book-confirm-field').each(function () {\n                    let $this = $(this);\n                    let repeaterCount = $this.find('input[name=\"tf_repeater_count\"]').val();\n                    if (0 == repeaterCount || 1 == repeaterCount || 2 == repeaterCount) {\n                        $this.find('.tf_hidden_fields').hide();\n                        $this.find('.tf-repeater-icon-clone').hide();\n                        $this.find('.tf-repeater-icon-delete').hide();\n                    }\n                });\n            }\n        }\n\n        /*\n        * Add New Repeater Item\n        * @author: Sydur\n        */\n        $(document).on('click', '.tf-repeater-icon-add', function () {\n            var $this = $(this);\n            var $this_parent = $this.parent().parent();\n            var id = $(this).attr(\"data-repeater-id\");\n            var max = $(this).attr(\"data-repeater-max\");\n            var add_value = $this_parent.find('.tf-single-repeater-clone-' + id + ' .tf-single-repeater-' + id + '').clone();\n            var count = $this_parent.find('.tf-repeater-wrap-' + id + ' .tf-single-repeater-' + id + '').length;\n            var parent_field = add_value.find(':input[name=\"tf_parent_field\"]').val();\n            var current_field = add_value.find(':input[name=\"tf_current_field\"]').val();\n            var maxIndex = parseInt($(this).closest('.tf-repeater').attr(\"data-max-index\")) + 1;\n            $(this).closest('.tf-repeater').attr(\"data-max-index\", maxIndex);\n\n            $this_parent.find('.tf-repeater-wrap .tf-field-notice-inner').remove();\n            // Chacked maximum repeater\n            if (!tf_admin_params.is_pro && max != '' && count >= max) {\n                $this_parent.find('.tf-repeater-wrap').append('<div class=\"tf-field-notice-inner tf-notice-danger\" style=\"display: block;\">You have reached limit in free version. Please subscribe to Pro for unlimited access</div>');\n                return false;\n            }\n\n            // Repeater Count Add Value\n            add_value.find(':input[name=\"tf_repeater_count\"]').val(maxIndex);\n\n            let repeatDateField = add_value.find('.tf-field-date');\n            if (repeatDateField.length > 0) {\n                repeatDateField.find('input').each(function () {\n\n                    if ($(this).attr('name') == '' || typeof $(this).attr('name') === \"undefined\") {\n                        $(this).remove()\n                    }\n                });\n                tfDateInt(repeatDateField);\n            }\n\n            let repeatTimeField = add_value.find('.tf-field-time');\n            if (repeatTimeField.length > 0) {\n                tfTimeInt(repeatTimeField);\n            }\n\n            let repeatColorField = add_value.find('.tf-field-color');\n            if (repeatColorField.length > 0) {\n                repeatColorField.find('input.tf-color').each(function () {\n                    var color_field =  $(this).clone(); \n                    if($(this).closest('li').length > 0){\n                        $(this).closest('li').append(color_field);\n                    }else{\n                        $(this).closest('.tf-fieldset').append(color_field);\n                    }\n                    $(this).closest('.wp-picker-container').remove();\n                 });\n                tfColorInt(repeatColorField);\n            }\n\n            if (parent_field == '') {\n                // Update  repeater name And id\n                add_value.find(':input').each(function () {\n                    this.name = this.name.replace('_____', '').replace('[' + current_field + '][00]', '[' + current_field + '][' + maxIndex + ']');\n                    this.id = this.id.replace('_____', '').replace('[' + current_field + '][00]', '[' + current_field + '][' + maxIndex + ']');\n                });\n                var update_paren = add_value.find('.tf-repeater input[name=\"tf_parent_field\"]').val();\n                if (typeof update_paren !== \"undefined\") {\n                    var update_paren = update_paren.replace('[' + current_field + '][00]', '[' + current_field + '][' + maxIndex + ']');\n                }\n                add_value.find('.tf-repeater input[name=\"tf_parent_field\"]').val(update_paren);\n\n            } else {\n                // Update  repeater name And id\n                var update_paren = add_value.find(':input[name=\"tf_parent_field\"]').val();\n                add_value.find(':input').each(function () {\n                    this.name = this.name.replace('_____', '').replace('[' + current_field + '][00]', '[' + current_field + '][' + maxIndex + ']');\n                    this.id = this.id.replace('_____', '').replace('[' + current_field + '][00]', '[' + current_field + '][' + maxIndex + ']');\n                });\n            }\n            // Update Repeaterr label\n            add_value.find('label').each(function () {\n                var for_value = $(this).attr(\"for\");\n                if (typeof for_value !== \"undefined\") {\n                    for_value = for_value.replace('_____', '').replace('[' + current_field + '][00]', '[' + current_field + '][' + maxIndex + ']');\n                    $(this).attr(\"for\", for_value);\n                }\n            });\n            // Update Icon select id\n            add_value.find('.tf-icon-select').each(function (index) {\n                var icon_id = $(this).attr(\"id\");\n                if (typeof icon_id !== \"undefined\") {\n                    icon_id = icon_id + index + maxIndex;\n                    $(this).attr(\"id\", icon_id)\n\n                }\n            });\n            // Update Data depend id\n            add_value.find('[data-depend-id]').each(function () {\n                var data_depend_id = $(this).attr(\"data-depend-id\");\n                if (typeof data_depend_id !== \"undefined\") {\n                    data_depend_id = data_depend_id.replace('[' + current_field + '][00]', '[' + current_field + '][' + maxIndex + ']');\n                    $(this).attr(\"data-depend-id\", data_depend_id);\n                }\n            });\n            // Update Data Controller\n            add_value.find('[data-controller]').each(function () {\n                var data_controller = $(this).attr(\"data-controller\");\n                if (typeof data_controller !== \"undefined\") {\n                    data_controller = data_controller.replace('[' + current_field + '][00]', '[' + current_field + '][' + maxIndex + ']');\n                    $(this).attr(\"data-controller\", data_controller);\n                }\n            });\n\n            // Replace Old editor\n            add_value.find('.wp-editor-wrap').each(function () {\n                var textarea = $(this).find('.tf_wp_editor').show();\n                // Get content of a specific editor:\n                var tf_editor_ex_data = $('#' + textarea.attr('id') + '').val();\n                if (tf_editor_ex_data && typeof tf_editor_ex_data !== \"undefined\") {\n                    var textarea_content = tinymce.get(textarea.attr('id')).getContent();\n                } else {\n                    var textarea_content = '';\n                }\n                textarea.val(textarea_content);\n                $(this).closest('.tf-field-textarea').append(textarea);\n                $(this).remove();\n            });\n\n            // Update Data Append value\n            var append = $this_parent.find('.tf-repeater-wrap-' + id + '');\n\n            add_value.appendTo(append).show();\n\n            // replace new editor\n            add_value.find('textarea.parent_wp_editor').each(function () {\n                var count = Math.random().toString(36).substring(3, 9) + 1;\n                // this.id = this.id.replace('' + current_field + '__00', '' + current_field + '__' + count + '');\n                $(this).attr('id', current_field + count);\n                $(this).attr('data-count-id', count);\n                var parent_repeater_id = $(this).attr('id');\n                TF_wp_editor(parent_repeater_id);\n            });\n\n            // replace new Select 2\n            add_value.find('select.tf-select2-parent').each(function () {\n                this.id = this.id.replace('' + current_field + '__00', '' + current_field + '__' + maxIndex + '');\n                var parent_repeater_id = $(this).attr('id');\n                var $this = $(this);\n                tfSelect2Int($this);\n            });\n\n            // repeater dependency repeater\n            TF_dependency();\n\n            // Booking Confirmation repeater Hidden field\n            TF_Booking_Confirmation();\n        });\n\n        // Repeater Delete Value\n        $(document).on('click', '.tf-repeater-icon-delete', function () {\n            var max = $(this).attr(\"data-repeater-max\");\n            var $this_parent = $(this).closest('.tf-repeater-wrap');\n            var count = $this_parent.find('.tf-single-repeater').length;\n            // Chacked maximum repeater\n\n            if (confirm(\"Are you sure to delete this item?\")) {\n                $this_parent.find('.tf-field-notice-inner').remove();\n                $(this).closest('.tf-single-repeater').remove();\n            }\n            return false;\n        });\n\n        /*\n        * Clone Repeater Item\n        * @author: Sydur\n        */\n        $(document).on('click', '.tf-repeater-icon-clone', function () {\n            var $this_parent = $(this).closest('.tf-repeater-wrap');\n            let clone_value = $(this).closest('.tf-single-repeater').clone();\n            var max = $(this).attr(\"data-repeater-max\");\n            var parent_field = clone_value.find('input[name=\"tf_parent_field\"]').val();\n            var current_field = clone_value.find('input[name=\"tf_current_field\"]').val();\n            var repeater_count = clone_value.find('input[name=\"tf_repeater_count\"]').val();\n            var count = $this_parent.find('.tf-single-repeater-' + current_field + '').length;\n            var maxIndex = parseInt($(this).closest('.tf-repeater').attr(\"data-max-index\")) + 1;\n            $(this).closest('.tf-repeater').attr(\"data-max-index\", maxIndex);\n\n            $this_parent.find('.tf-field-notice-inner').remove();\n            // Chacked maximum repeater\n            if (!tf_admin_params.is_pro && max != '' && count >= max) {\n                $this_parent.append('<div class=\"tf-field-notice-inner tf-notice-danger\" style=\"display: block;\">You have reached limit in free version. Please subscribe to Pro for unlimited access</div>');\n                return false;\n            }\n\n            let repeatDateField = clone_value.find('.tf-field-date');\n\n            if (repeatDateField.length > 0) {\n                repeatDateField.find('input').each(function () {\n                    if ($(this).attr('name') == '' || typeof $(this).attr('name') === \"undefined\") {\n                        $(this).remove();\n                    }\n                });\n                tfDateInt(repeatDateField);\n            }\n\n            let repeatTimeField = clone_value.find('.tf-field-time');\n            if (repeatTimeField.length > 0) {\n                tfTimeInt(repeatTimeField);\n            }\n\n            let repeatColorField = clone_value.find('.tf-field-color');\n            if (repeatColorField.length > 0) {\n                repeatColorField.find('input.tf-color').each(function () {\n                    var color_field =  $(this).clone(); \n                    if($(this).closest('li').length > 0){\n                        $(this).closest('li').append(color_field);\n                    }else{\n                        $(this).closest('.tf-fieldset').append(color_field);\n                    }\n                    $(this).closest('.wp-picker-container').remove();\n                 });\n                tfColorInt(repeatColorField);\n            }\n\n            if (parent_field == '') {\n                // Replace input id and name\n                clone_value.find(':input').each(function () {\n                    if ($(this).closest('.tf-single-repeater-clone').length == 0) {\n                        this.name = this.name.replace('_____', '').replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + maxIndex + ']');\n                        this.id = this.id.replace('_____', '').replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + maxIndex + ']');\n                    }\n                });\n                var update_paren = clone_value.find('.tf-repeater input[name=\"tf_parent_field\"]').val();\n                if (typeof update_paren !== \"undefined\") {\n                    var update_paren = update_paren.replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + maxIndex + ']');\n                }\n                clone_value.find('.tf-repeater input[name=\"tf_parent_field\"]').val(update_paren);\n\n            } else {\n                // Replace input id and name\n                clone_value.find(':input').each(function () {\n                    if ($(this).closest('.tf-single-repeater-clone').length == 0) {\n                        this.name = this.name.replace('_____', '').replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + maxIndex + ']');\n                        this.id = this.id.replace('_____', '').replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + maxIndex + ']');\n                    }\n                });\n            }\n            clone_value.find('label').each(function () {\n                var for_value = $(this).attr(\"for\");\n                if (typeof for_value !== \"undefined\") {\n                    for_value = for_value.replace('_____', '').replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + maxIndex + ']');\n                    var for_value = $(this).attr(\"for\", for_value);\n                }\n            });\n            // Update Icon select id\n            clone_value.find('.tf-icon-select').each(function (index) {\n                var icon_id = $(this).attr(\"id\");\n                if (typeof icon_id !== \"undefined\") {\n                    icon_id = icon_id + index + maxIndex;\n                    $(this).attr(\"id\", icon_id)\n\n                }\n            });\n            // Replace Data depend id ID\n            clone_value.find('[data-depend-id]').each(function () {\n                var data_depend_id = $(this).attr(\"data-depend-id\");\n                if (typeof data_depend_id !== \"undefined\") {\n                    data_depend_id = data_depend_id.replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + maxIndex + ']');\n                    $(this).attr(\"data-depend-id\", data_depend_id);\n                }\n            });\n            // Replace Data depend id ID\n            clone_value.find('[data-controller]').each(function () {\n                var data_controller = $(this).attr(\"data-controller\");\n                if (typeof data_controller !== \"undefined\") {\n                    data_controller = data_controller.replace('[' + current_field + '][' + repeater_count + ']', '[' + current_field + '][' + maxIndex + ']');\n                    $(this).attr(\"data-controller\", data_controller);\n                }\n            });\n            // Replace Data repeter Count id ID\n            clone_value.find('input[name=\"tf_repeater_count\"]').val(maxIndex)\n\n            // Replace Old editor\n            clone_value.find('.wp-editor-wrap').each(function () {\n                var textarea = $(this).find('.tf_wp_editor').show();\n                // Get content of a specific editor:\n                var tf_editor_ex_data = $('#' + textarea.attr('id') + '').val();\n                var textarea_id = textarea.attr('id');\n                if (textarea_id != '' && typeof textarea_id !== \"undefined\") {\n                    // var textarea_content = tinymce.get(textarea.attr('id')).getContent();\n                    var textarea_content = tinymce.editors[textarea_id].getContent();\n                } else {\n                    var textarea_content = '';\n                }\n                textarea.val(textarea_content);\n                $(this).closest('.tf-field-textarea').append(textarea);\n                $(this).remove();\n            });\n\n            // Replace Old Select 2\n            clone_value.find('.tf-field-select2').each(function () {\n\n                var get_selected_value = $(this).find('select.tf-select-two').select2('val')\n                $(this).find('select.tf-select-two').removeAttr(\"data-select2-id aria-hidden tabindex\");\n                $(this).find('select.tf-select-two option').removeAttr(\"data-select2-id\");\n                $(this).find('select.tf-select-two').removeClass(\"select2-hidden-accessible\");\n                var select2 = $(this).find('select.tf-select-two').show();\n\n                select2.val(get_selected_value);\n                $(this).find('.tf-fieldset').append(select2);\n                $(this).find('span.select2-container').remove();\n            });\n\n            //Append Value\n            $(this).closest('.tf-repeater-wrap').append(clone_value).show();\n\n            // Clone Wp Editor\n            clone_value.find('textarea.parent_wp_editor, textarea.wp_editor').each(function () {\n                var count = Math.random().toString(36).substring(3, 9) + 1;\n                $(this).attr('id', current_field + count);\n                $(this).attr('data-count-id', count);\n                var parent_repeater_id = $(this).attr('id');\n                TF_wp_editor(parent_repeater_id);\n            });\n\n            // Clone Select 2\n            clone_value.find('select.tf-select2-parent, select.tf-select2').each(function () {\n                this.id = this.id.replace('' + current_field + '__' + repeater_count, '' + current_field + '__' + maxIndex + '');\n                var $this = $(this);\n                tfSelect2Int($this);\n            });\n\n            // Dependency value\n            TF_dependency();\n        });\n\n        // Repeater show hide\n        $(document).on('click', '.tf-repeater-title, .tf-repeater-icon-collapse', function () {\n            var tf_repater_fieldname = $(this).closest('.tf-single-repeater').find('input[name=tf_current_field]').val();\n            $(this).closest('.tf-single-repeater-' + tf_repater_fieldname + '').find('.tf-repeater-content-wrap').slideToggle();\n            $(this).closest('.tf-single-repeater-' + tf_repater_fieldname + '').children('.tf-repeater-content-wrap').toggleClass('hide');\n            if ($(this).closest('.tf-single-repeater-' + tf_repater_fieldname + '').children('.tf-repeater-content-wrap').hasClass('hide') == true) {\n                $(this).closest('.tf-single-repeater-' + tf_repater_fieldname + ' .tf-repeater-header').children('.tf-repeater-icon-collapse').html('<i class=\"fa-solid fa-angle-down\"></i>');\n            } else {\n                $(this).closest('.tf-single-repeater-' + tf_repater_fieldname + ' .tf-repeater-header').children('.tf-repeater-icon-collapse').html('<i class=\"fa-solid fa-angle-up\"></i>');\n            }\n        });\n\n        // Repeater Drag and  show\n        $(\".tf-repeater-wrap\").sortable({\n            handle: '.tf-repeater-icon-move',\n            start: function (event, ui) { // turn TinyMCE off while sorting (if not, it won't work when resorted)\n                var textareaID = $(ui.item).find('.tf_wp_editor').attr('id');\n\n            },\n            stop: function (event, ui) { // re-initialize TinyMCE when sort is completed\n                $(ui.item).find('.tf_wp_editor').each(function () {\n                    var textareaID = $(this).attr('id');\n                    tinyMCE.execCommand('mceRemoveEditor', false, textareaID);\n                    tinyMCE.execCommand('mceAddEditor', false, textareaID);\n                });\n\n                // $(this).find('.update-warning').show();\n            }\n        });\n\n\n        // TAB jquery\n        $(document).on('click', '.tf-tab-item', function () {\n            var $this = $(this);\n            var tab_id = $this.data('tab-id');\n            if ($this.parent().parent().find('.tf-tab-item-content').hasClass(\"show\") == true) {\n                $this.parent().parent().find('.tf-tab-item-content').removeClass('show');\n            }\n\n            $this.parent().find('.tf-tab-item').removeClass('show');\n\n            $this.addClass('show');\n            $this.parent().parent().find('.tf-tab-item-content[data-tab-id = ' + tab_id + ']').addClass('show');\n\n            tfHotelCalendar();\n            tfApartmentCalendar();\n        });\n\n        // Select 2 add new category\n        $(document).on('click', '.tf-add-category span', function (event) { \n            event.preventDefault();\n            var $this = $(this);\n            var parentDiv = $this.closest('.tf-fieldset');\n            parentDiv.children('.tf-popup-box').css('display', 'flex');\n        });\n\n        // Close Popup\n        $(document).on('click', '.tf-add-category-box-close', function (event) { \n            event.preventDefault();\n            $('.tf-popup-box').hide();\n        });\n\n        // Create Category\n        $(document).on('click', '.tf-category-button', function (event) { \n            event.preventDefault();\n            var $this = $(this);\n            var parentDiv = $this.closest('.tf-add-category-box');\n            let categoryName = parentDiv.find('#category_name').val();\n            let categoryTitle = parentDiv.find('#category_title').val();\n            let parentCategory = parentDiv.find('#parent_category').val();\n            let categorySelect = parentDiv.find('#category_select_field_name').val();\n\n            $.ajax({\n                url: tf_options.ajax_url,\n                method: 'POST',\n                data: {\n                    action: 'tf_insert_category_data',\n                    _nonce: tf_admin_params.tf_nonce,\n                    categoryName: categoryName,\n                    categoryTitle: categoryTitle,\n                    parentCategory: parentCategory\n                },\n                success: function (response) {\n                    var data = JSON.parse(response);\n                    if (data.insert_category) {\n                        // Store to List and Selected\n                        var newOption = new Option(data.insert_category.title, data.insert_category.id, true, true);\n                        $('#'+categorySelect).append(newOption).trigger('change');\n\n                        // Store to Popup List\n                        var newPopuOption = new Option(data.insert_category.title, data.insert_category.id, false, false);\n                        parentDiv.find('#parent_category').append(newPopuOption).trigger('change');\n                    }\n                    $('.tf-popup-box').hide();\n                    parentDiv.find('#category_title').val('');\n                    parentDiv.find('#parent_category').val('');\n                }\n            });\n\n        });\n\n        // Create Post\n        $(document).on('click', '.tf-add-new-post-button', function (event) { \n            event.preventDefault();\n            var $this = $(this);\n            var parentDiv = $this.closest('.tf-add-category-box');\n            let postType = parentDiv.find('.post_type').val();\n            let postTitle = parentDiv.find('.post_title').val();\n            let postSelect = parentDiv.find('.post_select_field_name').val();\n            let fieldId = parentDiv.find('.field_id').val();\n            let postId = parentDiv.find('.post_id').val();\n\n            if(postTitle){\n                $.ajax({\n                    url: tf_options.ajax_url,\n                    method: 'POST',\n                    data: {\n                        action: 'tf_insert_post_data',\n                        _nonce: tf_admin_params.tf_nonce,\n                        postType: postType,\n                        postTitle: postTitle,\n                        fieldId: fieldId,\n                        postId: postId\n                    },\n                    beforeSend: function(){\n                        $this.addClass('tf-btn-loading');\n                    },\n                    success: function (response) {\n                        var data = JSON.parse(response);\n                        if (data.insert_post) {\n                            // Store to List and Selected\n                            var newOption = new Option(data.insert_post.title, data.insert_post.id, true, true);\n                            \n                            if(fieldId == 'tf_rooms'){\n                                $(newOption).attr('data-edit-url', data.insert_post.edit_url);\n                            }\n                            \n                            $('#'+postSelect).append(newOption).trigger('change');\n                        }\n                        $this.removeClass('tf-btn-loading');\n                        $('.tf-popup-box').hide();\n                        parentDiv.find('.post_title').val('');\n                    }\n                });\n            } else {\n                notyf.error('Please enter title');\n            }\n\n        });\n\n    });\n})(jQuery);\n\n\nfunction openTab(evt, tabName) {\n    evt.preventDefault();\n    var i, tabcontent, tablinks;\n    tabcontent = document.getElementsByClassName(\"tf-tab-content\");\n    for (i = 0; i < tabcontent.length; i++) {\n        tabcontent[i].style.display = \"none\";\n    }\n    tablinks = document.getElementsByClassName(\"tf-tablinks\");\n    for (i = 0; i < tablinks.length; i++) {\n        tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\n    }\n    document.getElementById(tabName).style.display = \"block\";\n    evt.target.className += \" active\";\n    jQuery(\".tf-admin-tab\").removeClass('active');\n}\n\nvar frame, gframe;\n(function ($) {\n    // Single Image remove\n    $(document).on(\"click\", \".tf-image-close\", function (e) {\n        e.preventDefault();\n        $this = $(this);\n        var fieldname = $(this).attr(\"tf-field-name\");\n        var tf_preview_class = fieldname.replace(/[.[\\]_-]/g, '_');\n\n        $this.parent().parent().find('input').val('');\n        $this.parent().html('');\n\n    });\n\n    // Gallery Image remove\n    $(document).on(\"click\", \".tf-gallery-remove\", function (e) {\n        e.preventDefault();\n        $this = $(this);\n        var fieldname = $(this).attr(\"tf-field-name\");\n        var tf_preview_class = fieldname.replace(/[.[\\]_-]/g, '_');\n\n        $this.parent().parent().find('input').val('');\n        $this.parent().parent().find('.tf-fieldset-gallery-preview').html('');\n        $('a.tf-gallery-edit, a.tf-gallery-remove').css(\"display\", \"none\");\n\n    });\n\n    $(document).ready(function () {\n\n        // Single Image Upload\n\n        $('body').on('click', '.tf-media-upload', function (e) {\n            var $this = $(this);\n            var fieldname = $(this).attr(\"tf-field-name\");\n            var tf_preview_class = fieldname.replace(/[.[\\]_-]/g, '_');\n\n            frame = wp.media({\n                title: \"Select Image\",\n                button: {\n                    text: \"Insert Image\"\n                },\n                multiple: false\n            });\n            frame.on('select', function () {\n\n                var attachment = frame.state().get('selection').first().toJSON();\n                $this.parent().parent().find('input').val(attachment.url);\n                $this.parent().parent().find('.tf-fieldset-media-preview').html(`<div class=\"tf-image-close\" tf-field-name='${fieldname}'>✖</div><img src='${attachment.url}' />`);\n            });\n            frame.open();\n            return false;\n        });\n\n        // Gallery Image Upload\n\n        $('body').on('click', '.tf-gallery-upload, .tf-gallery-edit', function (e) {\n            var $this = $(this);\n            var fieldname = $(this).attr(\"tf-field-name\");\n            var tf_preview_class = fieldname.replace(/[.[\\]_-]/g, '_');\n            gframe = wp.media({\n                title: \"Select Gallery\",\n                button: {\n                    text: \"Insert Gallery\"\n                },\n                multiple: 'add'\n            });\n\n            gframe.on('open', function () {\n                var selection = gframe.state().get('selection');\n                var ids_value = $this.parent().parent().find('input').val();\n\n                if (ids_value.length > 0) {\n                    var ids = ids_value.split(',');\n\n                    ids.forEach(function (id) {\n                        attachment = wp.media.attachment(id);\n                        attachment.fetch();\n                        selection.add(attachment ? [attachment] : []);\n                    });\n                }\n            });\n\n            gframe.on('select', function () {\n                var image_ids = [];\n                var image_urls = [];\n                var attachments = gframe.state().get('selection').toJSON();\n                $this.parent().parent().find('.tf-fieldset-gallery-preview').html('');\n                for (i in attachments) {\n                    var attachment = attachments[i];\n                    image_ids.push(attachment.id);\n                    image_urls.push(attachment.url);\n                    $this.parent().parent().find('.tf-fieldset-gallery-preview').append(`<img src='${attachment.url}' />`);\n                }\n                $this.parent().parent().find('input').val(image_ids.join(\",\"));\n                $this.parent().find('a.tf-gallery-edit, a.tf-gallery-remove').css(\"display\", \"inline-block\");\n            });\n\n            gframe.open();\n            return false;\n        });\n\n\n        // Texonomy submit event\n        $('#addtag > .submit #submit').on(\"click\", function () {\n            $(\".tf-fieldset-media-preview\").html(\"\");\n        });\n\n        if (tf_options.gmaps != \"googlemap\") {\n            $(\".tf-field-map\").each(function () {\n                var $this = $(this),\n                    $map = $this.find('.tf--map-osm'),\n                    $search_input = $this.find('.tf--map-search input'),\n                    $latitude = $this.find('.tf--latitude'),\n                    $longitude = $this.find('.tf--longitude'),\n                    $zoom = $this.find('.tf--zoom'),\n                    map_data = $map.data('map');\n\n                var mapInit = L.map($map.get(0), map_data);\n\n\n                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                }).addTo(mapInit);\n\n                var mapMarker = L.marker(map_data.center, {draggable: true}).addTo(mapInit);\n\n                var update_latlng = function (data) {\n                    $latitude.val(data.lat);\n                    $longitude.val(data.lng);\n                    $zoom.val(mapInit.getZoom());\n                };\n\n                $latitude.on('change', function () {\n\n                })\n\n                function updateLocationField(latitude, longitude) {\n                    var apiUrl = 'https://nominatim.openstreetmap.org/reverse?format=json&lat=' + latitude + '&lon=' + longitude;\n\n                    $.ajax({\n                        url: apiUrl,\n                        dataType: 'json',\n                        success: function (data) {\n                            $search_input.val(data.display_name)\n                        },\n                        error: function (jqXHR, textStatus, errorThrown) {\n                            console.error('Error:', textStatus, errorThrown);\n                        }\n                    });\n                }\n\n                mapInit.on('click', function (data) {\n                    mapMarker.setLatLng(data.latlng);\n                    update_latlng(data.latlng);\n                    updateLocationField(data.latlng.lat, data.latlng.lng)\n                });\n\n                mapInit.on('zoom', function () {\n                    update_latlng(mapMarker.getLatLng());\n                });\n\n                mapMarker.on('drag', function () {\n                    update_latlng(mapMarker.getLatLng());\n                });\n\n                mapMarker.on('dragend', function (e) {\n                    let currentLng = e.target._latlng.lng\n                    let currentLat = e.target._latlng.lat\n\n                    updateLocationField(currentLat, currentLng)\n                })\n\n                if (!$search_input.length) {\n                    $search_input = $('[data-depend-id=\"' + $this.find('.tf--address-field').data('address-field') + '\"]');\n                }\n\n\n                var cache = {};\n\n                $search_input.autocomplete({\n                    source: function (request, response) {\n\n                        var term = request.term;\n\n                        if (term in cache) {\n                            response(cache[term]);\n                            return;\n                        }\n\n                        $.get('https://nominatim.openstreetmap.org/search', {\n                            format: 'json',\n                            q: term,\n                        }, function (results) {\n\n                            var data;\n\n                            if (results.length) {\n                                data = results.map(function (item) {\n                                    return {\n                                        value: item.display_name,\n                                        label: item.display_name,\n                                        lat: item.lat,\n                                        lon: item.lon\n                                    };\n                                }, 'json');\n                            } else {\n                                data = [{\n                                    value: 'no-data',\n                                    label: 'No Results.'\n                                }];\n                            }\n\n\n                            cache[term] = data;\n                            response(data);\n\n                        });\n\n                    },\n                    select: function (event, ui) {\n\n                        if (ui.item.value === 'no-data') {\n                            return false;\n                        }\n\n                        var latLng = L.latLng(ui.item.lat, ui.item.lon);\n\n                        mapInit.panTo(latLng);\n                        mapMarker.setLatLng(latLng);\n                        update_latlng(latLng);\n\n                    },\n                    create: function (event, ui) {\n                        $(this).autocomplete('widget').addClass('tf-map-ui-autocomplate');\n                    }\n                });\n\n                var input_update_latlng = function () {\n\n                    var latLng = L.latLng($latitude.val(), $longitude.val());\n\n                    mapInit.panTo(latLng);\n                    mapMarker.setLatLng(latLng);\n\n                };\n\n                $latitude.on('change', input_update_latlng);\n                $longitude.on('change', input_update_latlng);\n\n                setInterval(function () {\n                    mapInit.invalidateSize();\n                }, 100);\n            });\n        }\n\n        $('.tf-mobile-tabs').on(\"click\", function (e) {\n            e.preventDefault();\n            $(\".tf-admin-tab\").toggleClass('active');\n        });\n\n\n        $('.tf-faq-title').on(\"click\", function () {\n            var $this = $(this);\n            if (!$this.hasClass(\"active\")) {\n                $(\".tf-faq-desc\").slideUp(400);\n                $(\".tf-faq-title\").removeClass(\"active\");\n            }\n            $this.toggleClass(\"active\");\n            $this.next().slideToggle();\n        });\n    });\n\n\n})(jQuery);\n\n\n// Field Dependency\n\n(function ($) {\n\n    'use strict';\n\n    function Rule(controller, condition, value) {\n        this.init(controller, condition, value);\n    }\n\n    $.extend(Rule.prototype, {\n\n        init: function (controller, condition, value) {\n\n            this.controller = controller;\n            this.condition = condition;\n            this.value = value;\n            this.rules = [];\n            this.controls = [];\n\n        },\n\n        evalCondition: function (context, control, condition, val1, val2) {\n\n            if (condition == '==') {\n\n                return this.checkBoolean(val1) == this.checkBoolean(val2);\n\n            } else if (condition == '!=') {\n\n                return this.checkBoolean(val1) != this.checkBoolean(val2);\n\n            } else if (condition == '>=') {\n\n                return Number(val2) >= Number(val1);\n\n            } else if (condition == '<=') {\n\n                return Number(val2) <= Number(val1);\n\n            } else if (condition == '>') {\n\n                return Number(val2) > Number(val1);\n\n            } else if (condition == '<') {\n\n                return Number(val2) < Number(val1);\n\n            } else if (condition == '()') {\n\n                return window[val1](context, control, val2);\n\n            } else if (condition == 'any') {\n\n                if ($.isArray(val2)) {\n                    for (var i = val2.length - 1; i >= 0; i--) {\n                        if ($.inArray(val2[i], val1.split(',')) !== -1) {\n                            return true;\n                        }\n                    }\n                } else {\n                    if ($.inArray(val2, val1.split(',')) !== -1) {\n                        return true;\n                    }\n                }\n\n            } else if (condition == 'not-any') {\n\n                if ($.isArray(val2)) {\n                    for (var i = val2.length - 1; i >= 0; i--) {\n                        if ($.inArray(val2[i], val1.split(',')) == -1) {\n                            return true;\n                        }\n                    }\n                } else {\n                    if ($.inArray(val2, val1.split(',')) == -1) {\n                        return true;\n                    }\n                }\n\n            }\n\n            return false;\n\n        },\n\n        checkBoolean: function (value) {\n\n            switch (value) {\n\n                case true:\n                case 'true':\n                case 1:\n                case '1':\n                    value = true;\n                    break;\n\n                case null:\n                case false:\n                case 'false':\n                case 0:\n                case '0':\n                    value = false;\n                    break;\n\n            }\n\n            return value;\n        },\n\n        checkCondition: function (context) {\n\n            if (!this.condition) {\n                return true;\n            }\n\n            var control = context.find(this.controller);\n\n            var control_value = this.getControlValue(context, control);\n\n            if (control_value === undefined) {\n                return false;\n            }\n\n            control_value = this.normalizeValue(control, this.value, control_value);\n\n            return this.evalCondition(context, control, this.condition, this.value, control_value);\n        },\n\n        normalizeValue: function (control, baseValue, control_value) {\n\n            if (typeof baseValue == 'number') {\n                return parseFloat(control_value);\n            }\n\n            return control_value;\n        },\n\n        getControlValue: function (context, control) {\n\n            if (control.length > 1 && (control.attr('type') == 'radio' || control.attr('type') == 'checkbox')) {\n\n                return control.filter(':checked').map(function () {\n                    return this.value;\n                }).get();\n\n            } else if (control.attr('type') == 'checkbox' || control.attr('type') == 'radio') {\n\n                return control.is(':checked');\n\n            }\n\n            return control.val();\n\n        },\n\n        createRule: function (controller, condition, value) {\n            var rule = new Rule(controller, condition, value);\n            this.rules.push(rule);\n            return rule;\n        },\n\n        include: function (input) {\n            this.controls.push(input);\n        },\n\n        applyRule: function (context, enforced) {\n\n            var result;\n\n            if (typeof (enforced) == 'undefined') {\n                result = this.checkCondition(context);\n            } else {\n                result = enforced;\n            }\n\n            var controls = $.map(this.controls, function (elem, idx) {\n                return context.find(elem);\n            });\n\n            if (result) {\n\n                $(controls).each(function () {\n                    $(this).removeClass('tf-depend-on');\n                });\n\n                $(this.rules).each(function () {\n                    this.applyRule(context);\n                });\n\n            } else {\n\n                $(controls).each(function () {\n                    $(this).addClass('tf-depend-on');\n                });\n\n                $(this.rules).each(function () {\n                    this.applyRule(context, false);\n                });\n\n            }\n        }\n    });\n\n    function Ruleset() {\n        this.rules = [];\n    };\n\n    $.extend(Ruleset.prototype, {\n\n        createRule: function (controller, condition, value) {\n            var rule = new Rule(controller, condition, value);\n            this.rules.push(rule);\n            return rule;\n        },\n\n        applyRules: function (context) {\n            $(this.rules).each(function () {\n                this.applyRule(context);\n            });\n        }\n    });\n\n    $.tf_deps = {\n\n        createRuleset: function () {\n            return new Ruleset();\n        },\n\n        enable: function (selection, ruleset, depends) {\n\n            selection.on('change keyup', function (elem) {\n\n                var depend_id = elem.target.getAttribute('data-depend-id') || elem.target.getAttribute('data-sub-depend-id');\n\n                if (depends.indexOf(depend_id) !== -1) {\n                    ruleset.applyRules(selection);\n                }\n\n            });\n\n            ruleset.applyRules(selection);\n\n            return true;\n        }\n    };\n\n})(jQuery);\n\n/*\n* Author @Jahid\n* Report Chart\n*/\n\n(function ($) {\n    $(document).ready(function () {\n        if (tf_options.tf_chart_enable == 1) {\n            var ctx = document.getElementById('tf_months'); // node\n            var ctx = document.getElementById('tf_months').getContext('2d'); // 2d context\n            var ctx = $('#tf_months'); // jQuery instance\n            var ctx = 'tf_months'; // element id\n\n            var chart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n                    // Information about the dataset\n                    datasets: [{\n                        label: \"Completed Booking\",\n                        borderColor: '#003C79',\n                        tension: 0.1,\n                        data: tf_options.tf_complete_order,\n                        fill: false\n                    },\n                        {\n                            label: \"Cancelled Booking\",\n                            borderColor: 'red',\n                            tension: 0.1,\n                            data: tf_options.tf_cancel_orders,\n                            fill: false\n                        }\n                    ]\n                },\n\n                // Configuration options\n                options: {\n                    layout: {\n                        padding: 10,\n                    },\n                    legend: {\n                        display: true\n                    },\n                    title: {\n                        display: true,\n                        text: \"\"\n                    }\n                }\n\n            });\n        }\n\n        $(document).on('change', '#tf-month-report', function () {\n            var monthTarget = $(this).val();\n            if (monthTarget != 0) {\n                $(\"#tf-report-loader\").addClass('show');\n                $('.tf-order-report').find('iframe').remove();\n                var yearTarget = $(\"#tf-year-report\").val();\n                jQuery.ajax({\n                    type: 'post',\n                    url: tf_options.ajax_url,\n                    data: {\n                        action: 'tf_month_reports',\n                        _nonce: tf_admin_params.tf_nonce,\n                        month: monthTarget,\n                        year: yearTarget,\n                    },\n                    success: function (data) {\n                        if(!data.success){\n                            $(\"#tf-report-loader\").removeClass('show');\n                            notyf.error(data.data)\n                        } else {\n                            var response = JSON.parse(data);\n                            var ctx = document.getElementById('tf_months'); // node\n                            var ctx = document.getElementById('tf_months').getContext('2d'); // 2d context\n                            var ctx = $('#tf_months'); // jQuery instance\n                            var ctx = 'tf_months'; // element id\n\n                            var chart = new Chart(ctx, {\n                                type: 'line',\n                                data: {\n                                    labels: response.months_day_number,\n                                    // Information about the dataset\n                                    datasets: [{\n                                        label: \"Completed Booking\",\n                                        borderColor: '#003C79',\n                                        tension: 0.1,\n                                        data: response.tf_complete_orders,\n                                        fill: false\n                                    },\n                                        {\n                                            label: \"Cancelled Booking\",\n                                            borderColor: 'red',\n                                            tension: 0.1,\n                                            data: response.tf_cancel_orders,\n                                            fill: false\n                                        }\n                                    ]\n                                },\n\n                                // Configuration options\n                                options: {\n                                    layout: {\n                                        padding: 10,\n                                    },\n                                    legend: {\n                                        display: true\n                                    },\n                                    title: {\n                                        display: true,\n                                        text: response.tf_search_month\n                                    }\n                                }\n\n                            });\n                            $(\"#tf-report-loader\").removeClass('show');\n                        }\n                    }\n                })\n            }\n        });\n\n\n        $(document).on('change', '#tf-year-report', function () {\n            var yearTarget = $(this).val();\n            var monthTarget = $(\"#tf-month-report\").val();\n            if (yearTarget != 0 && monthTarget != 0) {\n                $(\"#tf-report-loader\").addClass('show');\n                $('.tf-order-report').find('iframe').remove();\n                jQuery.ajax({\n                    type: 'post',\n                    url: tf_options.ajax_url,\n                    data: {\n                        action: 'tf_month_reports',\n                        _nonce: tf_admin_params.tf_nonce,\n                        month: monthTarget,\n                        year: yearTarget,\n                    },\n                    success: function (data) {\n                        var response = JSON.parse(data);\n                        var ctx = document.getElementById('tf_months'); // node\n                        var ctx = document.getElementById('tf_months').getContext('2d'); // 2d context\n                        var ctx = $('#tf_months'); // jQuery instance\n                        var ctx = 'tf_months'; // element id\n\n                        var chart = new Chart(ctx, {\n                            type: 'line',\n                            data: {\n                                labels: response.months_day_number,\n                                // Information about the dataset\n                                datasets: [{\n                                    label: \"Completed Booking\",\n                                    borderColor: '#003C79',\n                                    tension: 0.1,\n                                    data: response.tf_complete_orders,\n                                    fill: false\n                                },\n                                    {\n                                        label: \"Cancelled Booking\",\n                                        borderColor: 'red',\n                                        tension: 0.1,\n                                        data: response.tf_cancel_orders,\n                                        fill: false\n                                    }\n                                ]\n                            },\n\n                            // Configuration options\n                            options: {\n                                layout: {\n                                    padding: 10,\n                                },\n                                legend: {\n                                    display: true\n                                },\n                                title: {\n                                    display: true,\n                                    text: response.tf_search_month\n                                }\n                            }\n\n                        });\n                        $(\"#tf-report-loader\").removeClass('show');\n                    }\n                })\n            }\n        });\n\n    });\n})(jQuery);\n\n/**\n * Shortcode generator js\n * @author Abu Hena\n * @since 2.9.3\n */\n(function ($) {\n    //get each of the field value\n    $(document).on('click', '.tf-generate-tour .tf-btn', function (event) {\n        event.preventDefault();\n        var arr = [];\n\n        $(this).parents('.tf-shortcode-generator-single').find(\".tf-sg-field-wrap\").each(function () {\n            var $this = $(this);\n            var data = $this.find('.tf-setting-field').val();\n            var option_name = $this.find('.tf-setting-field').attr('data-term');\n            var post_count = $this.find('.post-count').attr('data-count');\n            var section_title = $this.find('.tf-shortcode-title-field ').attr('data-title');\n            var section_subtitle = $this.find('.tf-shortcode-subtitle-field ').attr('data-subtitle');\n\n            var tour_tab_title = $this.find('.tf-shortcode-tour-tab-title-field ').attr('data-tour-tab-title');\n            var hotel_tab_title = $this.find('.tf-shortcode-hotel-tab-title-field ').attr('data-hotel-tab-title');\n            var apartment_tab_title = $this.find('.tf-shortcode-apartment-tab-title-field ').attr('data-apartment-tab-title');\n            var car_tab_title = $this.find('.tf-shortcode-car-tab-title-field ').attr('data-car-tab-title');\n\n            if (option_name != undefined && option_name != '') {\n                data = option_name + '=' + (data.length ? data : '\"\"');\n            }\n            if (post_count != undefined && post_count != '') {\n                data = post_count + '=' + (data.length ? data : '\"\"');\n            }\n            if (section_title != undefined && section_title != '' && data.length) {\n                data = section_title + '=' + (data.length ? `\"${data}\"` : '\"\"');\n            }\n            if (section_subtitle != undefined && section_subtitle != '' && data.length ) {\n                data = section_subtitle + '=' + (data.length ? `\"${data}\"` : '\"\"');\n            }\n            if (tour_tab_title != undefined && tour_tab_title != '' && data.length) {\n                data = tour_tab_title + '=' + (data.length ? `\"${data}\"` : '\"\"');\n            }\n            if (hotel_tab_title != undefined && hotel_tab_title != '' && data.length ) {\n                data = hotel_tab_title + '=' + (data.length ? `\"${data}\"` : '\"\"');\n            }\n            if (apartment_tab_title != undefined && apartment_tab_title != '' && data.length ) {\n                data = apartment_tab_title + '=' + (data.length ? `\"${data}\"` : '\"\"');\n            }\n            if (car_tab_title != undefined && car_tab_title != '' && data.length ) {\n                data = car_tab_title + '=' + (data.length ? `\"${data}\"` : '\"\"');\n            }\n            arr.push(data);\n        });\n\n        var allData = arr.filter(Boolean);\n        var shortcode = \"[\" + allData.join(' ') + \"]\";\n\n        $(this).parents('.tf-shortcode-generator-single').find('.tf-shortcode-value').val(shortcode);\n        $(this).parents('.tf-shortcode-generator-single').find('.tf-copy-item').slideDown();\n    });\n\n    $(document).on('click', '.tf-sg-close', function (event) {\n        $(this).parents('.tf-shortcode-generators').find('.tf-sg-form-wrapper').fadeOut();\n    });\n\n    $(document).on('click', '.tf-shortcode-btn', function (event) {\n        var $this = $(this);\n        $this.parents('.tf-shortcode-generator-single').find('.tf-sg-form-wrapper').fadeIn();\n\n        $this.parents('.tf-shortcode-generator-single').on(\"mouseup\", function (e) {\n            var container = $(this).find(\".tf-shortcode-generator-form\");\n            var container_parent = container.parent(\".tf-sg-form-wrapper\");\n            if (!container.is(e.target) && container.has(e.target).length === 0) {\n                container_parent.fadeOut();\n            }\n        });\n\n    });\n\n    //Copy the shortcode value\n    $(document).on('click', '.tf-copy-btn', function () {\n        var fieldIdValue = $(this).parent('.tf-shortcode-field').find('#tf-shortcode');\n        if (fieldIdValue) {\n            fieldIdValue.select();\n            document.execCommand(\"copy\");\n        }\n        //show the copied message\n        $(this).parents('.tf-copy-item').append('<div><span class=\"tf-copied-msg\">Copied<span></div>');\n        $(\"span.tf-copied-msg\").animate({opacity: 0}, 1000, function () {\n            $(this).slideUp('slow', function () {\n                $(this).remove();\n            });\n        });\n    });\n\n    // external listing dynamic location\n\n    /*$('[name=\"type-selector\"]').on(\"change\", function (e) {\n        const selectedValue = $(this).val();\n        let termName = \"hotel_location\";\n\n        if (selectedValue == \"type=apartment\") {\n            termName = \"apartment_location\";\n        } else if (selectedValue == \"type=tours\") {\n            termName = \"tour_destination\";\n        } else {\n            termName = \"hotel_location\"\n        }\n\n        $.ajax({\n            url: tf_options.ajax_url,\n            type: 'POST',\n            data: {\n                action: \"tf_shortcode_type_to_location\",\n                _nonce: tf_admin_params.tf_nonce,\n                typeValue: selectedValue,\n                termName: termName\n            },\n            success: function (res) {\n                var select2 = $('#tf_listing_location_shortcode');\n                select2.empty();\n                select2.append('<option value=\"\">' + \"Select Type First\" + '</option>');\n                if (res.data.value.length > 0) {\n\n                    select2.append('<option value=\"all\">All</option>');\n\n                    $.each(res.data.value, function (key, value) {\n                        if (value.term_id && value.name) {\n                            select2.append('<option value=\"' + value.term_id + '\">' + value.name + '</option>');\n                        }\n                    })\n                }\n            },\n            error: function (response) {\n                console.log(response);\n            },\n        })\n    })\n    $(\"#tf_listing_location_shortcode\").on(\"select2:select\", function (e) {\n        var select_val = $(e.currentTarget).val();\n        if (select_val && select_val.includes(\"all\")) {\n            $(this).val([\"all\"]).trigger('change.select2');\n        }\n    });*/\n    \n    $(document).ready(function () {\n        // $('.tf-import-btn').on('click', function (event) {\n        //     event.preventDefault();\n        //     // Get the import URL from the button's href attribute\n        //     var importUrl = $(this).attr('href');\n        //     // Get the import data from the textarea\n        //     var importData = $('textarea[name=\"tf_import_option\"]').val().trim();\n        //     if (importData == '') {\n        //         alert(tf_options.tf_export_import_msg.import_empty);\n        //         let importField = $('textarea[name=\"tf_import_option\"]');\n        //         importField.focus();\n        //         importField.css('border', '1px solid red');\n        //         return;\n        //     } else {\n        //         //confirm data before send\n        //         if (!confirm(tf_options.tf_export_import_msg.import_confirm)) {\n        //             return;\n        //         }\n        //         $.ajax({\n        //             url: importUrl,\n        //             method: 'POST',\n        //             data: {\n        //                 action: 'tf_import',\n        //                 nonce: tf_admin_params.tf_nonce,\n        //                 tf_import_option: importData,\n        //             },\n        //             beforeSend: function () {\n        //                 $('.tf-import-btn').html('Importing...');\n        //                 $('.tf-import-btn').attr('disabled', 'disabled');\n        //             },\n        //             success: function (response) {\n        //                 if (response.success) {\n        //                     alert(tf_options.tf_export_import_msg.imported);\n        //                     $('.tf-import-btn').html('Imported');\n        //                     window.location.reload();\n        //                 } else {\n        //                     alert('Something went wrong!');\n        //                 }\n        //             }\n        //         });\n        //     }\n        // })\n        $(document).on('click', '.tf-import-btn', function (event) { \n            event.preventDefault();\n            var textarea = $('textarea[name=\"tf_import_option\"]'); \n            var importData = textarea.val().trim();\n            if (importData == '') {\n                alert(tf_options.tf_export_import_msg.import_empty);\n                let importField = $('textarea[name=\"tf_import_option\"]');\n                importField.focus();\n                importField.css('border', '1px solid red');\n                return;\n            } \n            // Triger the form submit\n            $(\".tf-option-form\").submit(); \n        });\n\n        $(document).on('click', '.tf-export-btn', function (event) {\n            event.preventDefault();\n\n            $.ajax({\n                url: tf_options.ajax_url,\n                method: 'POST',\n                data: {\n                    action: 'tf_export_data',\n                    _nonce: tf_admin_params.tf_nonce,\n                },\n                beforeSend: function () {\n                    $('.tf-export-btn').html('Exporting...');\n                    $('.tf-export-btn').attr('disabled', 'disabled');\n                },\n                success: function (response) {\n                    let obj = JSON.parse(response);\n\n                    if (obj.status === 'success') {\n                        // Create a blob with the response value\n                        var blob = new Blob([obj.data], {type: 'text/plain'});\n\n                        // Create a temporary URL for the blob\n                        var url = window.URL.createObjectURL(blob);\n\n                        // Create a temporary link element\n                        var link = document.createElement('a');\n                        link.href = url;\n                        link.download = 'tf-settings-export.json';\n\n                        // Programmatically click the link to initiate the file download\n                        link.click();\n\n                        // Clean up the temporary URL\n                        window.URL.revokeObjectURL(url);\n                    } else {\n                        notyf.error(obj.message);\n                    }\n                    $('.tf-export-btn').html('Export');\n                    $('.tf-export-btn').removeAttr('disabled');\n                },\n                error: function (response) {\n                    console.log(response);\n                    $('.tf-export-btn').html('Export');\n                    $('.tf-export-btn').removeAttr('disabled');\n                }\n            });\n\n\n        });\n\n        // Select 2 add new category\n        $(document).on('click', '.tf-add-category i', function (event) { \n            event.preventDefault();\n            $this = $(this);\n            parentDiv = $this.closest('.tf-fieldset');\n            parentDiv.children('#tf-popup-box').css('display', 'flex');\n        });\n\n        // Close Popup\n        $(document).on('click', '.tf-add-category-box-close', function (event) { \n            event.preventDefault();\n            $('#tf-popup-box').hide();\n        });\n\n    });\n\n})(jQuery);\n\n//# sourceURL=webpack://tourfic/./sass/admin/js/free/tf-options.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_modules__["./sass/admin/js/free/admin.js"]();
/******/ 	__webpack_modules__["./sass/admin/js/free/backend-booking.js"]();
/******/ 	__webpack_modules__["./sass/admin/js/free/booking-details.js"]();
/******/ 	__webpack_modules__["./sass/admin/js/free/enquiry-details.js"]();
/******/ 	__webpack_modules__["./sass/admin/js/free/required-taxonomies-gutenberg.js"]();
/******/ 	__webpack_modules__["./sass/admin/js/free/required-taxonomies.js"]();
/******/ 	__webpack_modules__["./sass/admin/js/free/setup-wizard.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./sass/admin/js/free/tf-options.js"]();
/******/ 	
/******/ })()
;
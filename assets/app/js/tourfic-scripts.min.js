/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./sass/app/js/free/apartment.js":
/*!***************************************!*\
  !*** ./sass/app/js/free/apartment.js ***!
  \***************************************/
/***/ (() => {

eval("(function ($, win) {\n    $(document).ready(function () {\n\n        // Create an instance of Notyf\n        const notyf = new Notyf({\n            ripple: true,\n            duration: 3000,\n            dismissable: true,\n            position: {\n                x: 'right',\n                y: 'bottom',\n            },\n        });\n\n        // Apartment Location Autocomplete\n        function tourfic_autocomplete(inp, arr) {\n            /*the autocomplete function takes two arguments,\n            the text field element and an array of possible autocompleted values:*/\n\n            // Executes when some one click in the search form location\n            inp.addEventListener(\"focus\", function () {\n                if (this.value == '' || !this.value) {\n                    // alert(\"Working....\")\n                    let a = document.createElement(\"DIV\");\n                    a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n                    a.classList.add(\"autocomplete-items\")\n                    this.parentNode.appendChild(a);\n                    for (const [key, value] of Object.entries(arr)) {\n                        let b = document.createElement(\"DIV\");\n                        b.innerHTML = value;\n                        b.innerHTML += `<input type='hidden' value=\"${value}\" data-slug='${key}'>`;\n                        b.addEventListener(\"click\", function (e) {\n                            let source = this.getElementsByTagName(\"input\")[0];\n                            inp.value = source.value;\n                            inp.closest('input').nextElementSibling.value = source.dataset.slug\n                        });\n                        a.appendChild(b);\n                    }\n                }\n            })\n\n            var currentFocus;\n            /*execute a function when someone writes in the text field:*/\n            inp.addEventListener(\"keyup\", function (e) {\n                var a, b, i, val = this.value;\n                /*close any already open lists of autocompleted values*/\n                closeAllLists();\n                currentFocus = -1;\n                /*create a DIV element that will contain the items (values):*/\n                a = document.createElement(\"DIV\");\n                a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n                a.setAttribute(\"class\", \"autocomplete-items\");\n                /*append the DIV element as a child of the autocomplete container:*/\n                this.parentNode.appendChild(a);\n                var $notfound = [];\n                /*for each item in the array...*/\n                for (const [key, value] of Object.entries(arr)) {\n                    if (value.substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n                        $notfound.push('found');\n                        /*create a DIV element for each matching element:*/\n                        b = document.createElement(\"DIV\");\n                        /*make the matching letters bold:*/\n                        b.innerHTML = \"<strong>\" + value.substr(0, val.length) + \"</strong>\";\n                        b.innerHTML += value.substr(val.length);\n                        /*insert a input field that will hold the current array item's value:*/\n                        b.innerHTML += `<input type='hidden' value=\"${value}\" data-slug='${key}'> `;\n                        /*execute a function when someone clicks on the item value (DIV element):*/\n                        b.addEventListener(\"click\", function (e) {\n                            let source = this.getElementsByTagName(\"input\")[0];\n                            /*insert the value for the autocomplete text field:*/\n                            inp.value = source.value;\n                            inp.closest('input').nextElementSibling.value = source.dataset.slug //source.dataset.slug\n                            /*close the list of autocompleted values,\n                            (or any other open lists of autocompleted values:*/\n                            closeAllLists();\n                        });\n                        a.appendChild(b);\n\n                    } else {\n                        $notfound.push('notfound');\n                    }\n                }\n\n                if ($notfound.indexOf('found') == -1) {\n                    /*create a DIV element for each matching element:*/\n                    b = document.createElement(\"DIV\");\n                    /*make the matching letters bold:*/\n\n                    b.innerHTML += tf_params.no_found;\n                    /*insert a input field that will hold the current array item's value:*/\n                    b.innerHTML += \"<input type='hidden' value=''>\";\n                    /*execute a function when someone clicks on the item value (DIV element):*/\n                    b.addEventListener(\"click\", function (e) {\n                        /*insert the value for the autocomplete text field:*/\n                        inp.value = this.getElementsByTagName(\"input\")[0].value;\n                        /*close the list of autocompleted values,\n                        (or any other open lists of autocompleted values:*/\n                        closeAllLists();\n                    });\n                    a.appendChild(b);\n                }\n            });\n            /*execute a function presses a key on the keyboard:*/\n            inp.addEventListener(\"keydown\", function (e) {\n                var x = document.getElementById(this.id + \"autocomplete-list\");\n                if (x) x = x.getElementsByTagName(\"div\");\n                if (e.keyCode == 40) {\n                    /*If the arrow DOWN key is pressed,\n                    increase the currentFocus variable:*/\n                    currentFocus++;\n                    /*and and make the current item more visible:*/\n                    addActive(x);\n                } else if (e.keyCode == 38) { //up\n                    /*If the arrow UP key is pressed,\n                    decrease the currentFocus variable:*/\n                    currentFocus--;\n                    /*and and make the current item more visible:*/\n                    addActive(x);\n                } else if (e.keyCode == 13) {\n                    /*If the ENTER key is pressed, prevent the form from being submitted,*/\n                    e.preventDefault();\n                    if (currentFocus > -1) {\n                        /*and simulate a click on the \"active\" item:*/\n                        if (x) x[currentFocus].trigger(\"click\");\n                    }\n                }\n            });\n\n            function addActive(x) {\n                /*a function to classify an item as \"active\":*/\n                if (!x) return false;\n                /*start by removing the \"active\" class on all items:*/\n                removeActive(x);\n                if (currentFocus >= x.length) currentFocus = 0;\n                if (currentFocus < 0) currentFocus = (x.length - 1);\n                /*add class \"autocomplete-active\":*/\n                x[currentFocus].classList.add(\"autocomplete-active\");\n            }\n\n            function removeActive(x) {\n                /*a function to remove the \"active\" class from all autocomplete items:*/\n                for (var i = 0; i < x.length; i++) {\n                    x[i].classList.remove(\"autocomplete-active\");\n                }\n            }\n\n            function closeAllLists(elmnt) {\n                /*close all autocomplete lists in the document,\n                except the one passed as an argument:*/\n                var x = document.getElementsByClassName(\"autocomplete-items\");\n                for (var i = 0; i < x.length; i++) {\n                    if (elmnt != x[i] && elmnt != inp) {\n                        x[i].parentNode.removeChild(x[i]);\n                    }\n                }\n            }\n\n            /*execute a function when someone clicks in the document:*/\n            document.addEventListener(\"click\", function (e) {\n                // closeAllLists(e.target);\n                if (e.target.id == \"content\" || e.target.id == \"\") {\n                    closeAllLists(e.target);\n                }\n            });\n        }\n\n        /**\n         * Ajax apartment booking\n         * @author Foysal\n         */\n        $(document).on('submit', 'form#tf-apartment-booking', function (e) {\n            e.preventDefault();\n\n            var $this = $(this);\n\n            var formData = new FormData(this);\n            formData.append('action', 'tf_apartment_booking');\n\n            $.ajax({\n                type: 'post',\n                url: tf_params.ajax_url,\n                data: formData,\n                processData: false,\n                contentType: false,\n                beforeSend: function (data) {\n                    $this.block({\n                        message: null,\n                        overlayCSS: {\n                            background: \"#fff\",\n                            opacity: .5\n                        }\n                    });\n\n                    $('.tf-notice-wrapper').html(\"\").hide();\n                },\n                complete: function (data) {\n                    $this.unblock();\n                },\n                success: function (data) {\n                    $this.unblock();\n\n                    var response = JSON.parse(data);\n\n                    if (response.status === 'error') {\n                        $.fancybox.close();\n                        if (response.errors) {\n                            response.errors.forEach(function (text) {\n                                notyf.error(text);\n                            });\n                        }\n\n                        return false;\n                    } else {\n\n                        if (response.redirect_to) {\n                            window.location.replace(response.redirect_to);\n                        } else {\n                            jQuery(document.body).trigger('added_to_cart');\n                        }\n\n                    }\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n\n            });\n        });\n\n\n        /*\n        * Apartment Search submit\n        * @since 2.9.7\n        * @author Jahid\n        */\n        $(document).on('submit', '#tf_apartment_booking', function (e) {\n            e.preventDefault();\n            let form = $(this),\n                submitBtn = form.find('.tf-submit'),\n                formData = new FormData(form[0]);\n\n            formData.append('action', 'tf_apartments_search');\n            formData.append('_nonce', tf_params.nonce);\n\n            if (formData.get('from') == null || formData.get('to') == null) {\n                formData.append('from', tf_params.tf_apartment_min_price);\n                formData.append('to', tf_params.tf_apartment_max_price);\n            }\n\n            $.ajax({\n                url: tf_params.ajax_url,\n                type: 'POST',\n                data: formData,\n                contentType: false,\n                processData: false,\n                beforeSend: function () {\n                    form.css({'opacity': '0.5', 'pointer-events': 'none'});\n                    submitBtn.addClass('tf-btn-loading');\n                },\n                success: function (response) {\n                    let obj = JSON.parse(response);\n                    form.css({'opacity': '1', 'pointer-events': 'all'});\n                    submitBtn.removeClass('tf-btn-loading');\n                    if (obj.status === 'error') {\n                        notyf.error(obj.message);\n                    }\n                    if (obj.status === 'success') {\n                        //location redirect to form action url with query string\n                        location.href = form.attr('action') + '?' + obj.query_string;\n                    }\n                }\n            });\n        });\n\n        /*\n        * Apartment room quick view\n        * */\n        $(document).on('click', '.tf-apt-room-qv', function (e) {\n            e.preventDefault();\n            $(\"#tour_room_details_loader\").show();\n            let post_id = $(this).data(\"post-id\");\n            let id = $(this).data(\"id\");\n            let data = {\n                action: 'tf_apt_room_details_qv',\n                _nonce: tf_params.nonce,\n                post_id: post_id,\n                id: id\n            };\n\n            $.ajax({\n                type: 'post',\n                url: tf_params.ajax_url,\n                data: data,\n                success: function (response) {\n                    $(\"#tf_apt_room_details_qv\").html(response);\n\n                    $(\"#tour_room_details_loader\").hide();\n                    $.fancybox.open({\n                        src: '#tf_apt_room_details_qv',\n                        type: 'inline',\n                    });\n                }\n\n            });\n        });\n\n        /**\n         * Design 1 Apartment Room Popup\n         *\n         */\n        $(document).on('click', '.tf-apt-room-qv-desgin-1', function (e) {\n\n            e.preventDefault();\n            $(\"#tour_room_details_loader\").show();\n            let post_id = $(this).data(\"post-id\");\n            let id = $(this).data(\"id\");\n            let data = {\n                action: 'tf_apt_room_details_qv',\n                _nonce: tf_params.nonce,\n                post_id: post_id,\n                id: id\n            };\n\n            $.ajax({\n                type: 'post',\n                url: tf_params.ajax_url,\n                data: data,\n                success: function (response) {\n                    $(\".tf-room-popup\").html(response);\n                    $(\".tf-room-popup\").addClass(\"tf-show\")\n                    $(\"#tour_room_details_loader\").hide();\n                }\n\n            });\n        });\n\n        /**\n         * Apartment location autocomplete\n         * @author Foysal\n         */\n        var apartment_location_input = document.getElementById(\"tf-apartment-location\");\n        var apartment_locations = tf_params.apartment_locations;\n        if (apartment_location_input) {\n            tourfic_autocomplete(apartment_location_input, apartment_locations);\n        }\n\n        /**\n         * Apartment Min and Max Range\n         * @author Foysal\n         */\n        if (tf_params.tf_apartment_min_price >= 0 && tf_params.tf_apartment_max_price > 0) {\n            $('.tf-apartment-filter-range').alRangeSlider({\n                range: {\n                    min: parseInt(tf_params.tf_apartment_min_price),\n                    max: parseInt(tf_params.tf_apartment_max_price),\n                    step: 1\n                },\n                initialSelectedValues: {\n                    from: parseInt(tf_params.tf_apartment_min_price),\n                    to: parseInt(tf_params.tf_apartment_max_price)\n                },\n                grid: false,\n                theme: \"dark\",\n            });\n        }\n\n        /**\n         * Apartment highlights slider\n         * @author Foysal\n         */\n        $('.tf-apt-highlights-slider').slick({\n            dots: true,\n            arrows: false,\n            infinite: true,\n            speed: 300,\n            autoplay: false,\n            autoplaySpeed: 3000,\n            slidesToShow: 3,\n            slidesToScroll: 1,\n            responsive: [\n                {\n                    breakpoint: 1024,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1,\n                        infinite: true,\n                        dots: true\n                    }\n                },\n                {\n                    breakpoint: 600,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1\n                    }\n                },\n                {\n                    breakpoint: 480,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1\n                    }\n                }\n            ]\n        });\n\n        /**\n         * Apartment room slider\n         * @author Foysal\n         */\n        $('.tf-apartment-room-slider').slick({\n            dots: true,\n            arrows: false,\n            infinite: true,\n            speed: 300,\n            autoplay: false,\n            autoplaySpeed: 3000,\n            slidesToShow: 3,\n            slidesToScroll: 1,\n            responsive: [\n                {\n                    breakpoint: 1024,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1,\n                        infinite: true,\n                        dots: true\n                    }\n                },\n                {\n                    breakpoint: 600,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1\n                    }\n                },\n                {\n                    breakpoint: 480,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1\n                    }\n                }\n            ]\n        });\n\n        // Design Default Room Slider\n\n        $('.tf-apartment-default-design-room-slider').slick({\n            arrows: true,\n            infinite: true,\n            speed: 300,\n            autoplay: false,\n            autoplaySpeed: 3000,\n            slidesToShow: 3,\n            slidesToScroll: 1,\n            prevArrow:\"<button type='button' class='slick-prev'><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\">\\n\" +\n                \"  <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M16.2071 5.29289C16.5976 5.68342 16.5976 6.31658 16.2071 6.70711L10.9142 12L16.2071 17.2929C16.5976 17.6834 16.5976 18.3166 16.2071 18.7071C15.8166 19.0976 15.1834 19.0976 14.7929 18.7071L8.79289 12.7071C8.40237 12.3166 8.40237 11.6834 8.79289 11.2929L14.7929 5.29289C15.1834 4.90237 15.8166 4.90237 16.2071 5.29289Z\\\" fill=\\\"#2A3343\\\"/>\\n\" +\n                \"</svg></button>\",\n            nextArrow:\"<button type='button' class='slick-next'><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\">\\n\" +\n                \"  <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M8.79289 5.29289C9.18342 4.90237 9.81658 4.90237 10.2071 5.29289L16.2071 11.2929C16.5976 11.6834 16.5976 12.3166 16.2071 12.7071L10.2071 18.7071C9.81658 19.0976 9.18342 19.0976 8.79289 18.7071C8.40237 18.3166 8.40237 17.6834 8.79289 17.2929L14.0858 12L8.79289 6.70711C8.40237 6.31658 8.40237 5.68342 8.79289 5.29289Z\\\" fill=\\\"#2A3343\\\"/>\\n\" +\n                \"</svg></button>\",\n\n            responsive: [\n                {\n                    breakpoint: 1024,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1,\n                        infinite: true,\n                    }\n                },\n                {\n                    breakpoint: 600,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1\n                    }\n                },\n                {\n                    breakpoint: 480,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1\n                    }\n                }\n            ]\n        });\n\n        /**\n         * Related Apartment slider\n         * @author Foysal\n         */\n        $('.tf-related-apartment-slider').slick({\n            dots: true,\n            arrows: false,\n            infinite: true,\n            speed: 300,\n            autoplay: true,\n            autoplaySpeed: 3000,\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            responsive: [\n                {\n                    breakpoint: 1024,\n                    settings: {\n                        slidesToShow: 3,\n                        slidesToScroll: 1,\n                        infinite: true,\n                        dots: true\n                    }\n                },\n                {\n                    breakpoint: 600,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1\n                    }\n                },\n                {\n                    breakpoint: 480,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1\n                    }\n                }\n            ]\n        });\n\n        /**\n         * Apartment 2 design Highlights sliers\n         *\n         * Slick\n         */\n        $('.tf-features-block-slides').slick({\n            dots: true,\n            arrows: false,\n            infinite: true,\n            speed: 300,\n            autoplay: false,\n            autoplaySpeed: 2000,\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            responsive: [\n                {\n                    breakpoint: 1024,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1,\n                    }\n                },\n                {\n                    breakpoint: 600,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1\n                    }\n                },\n                {\n                    breakpoint: 480,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1\n                    }\n                }\n            ]\n        });\n\n        $(document).on('click', '.tf-apartment-show-more', function (e) {\n            if ($(this).siblings('.tf-full-description')) {\n                $(this).siblings('.tf-full-description').show();\n                $(this).siblings('.tf-description').hide();\n                $(this).text(\"Show Less\");\n                $(this).addClass('tf-apartment-show-less');\n            }\n        });\n        \n        $(document).on('click', '.tf-apartment-show-less', function (e) {\n            if ($(this).siblings('.tf-full-description')) {\n                $(this).siblings('.tf-full-description').hide();\n                $(this).siblings('.tf-description').show();\n                $(this).text(\"Show More\");\n                $(this).removeClass('tf-apartment-show-less');\n            }\n        });\n        \n        $('.tf-single-review.tf_apartment .tf-single-details').each(function (index, val) {\n            if (index > 1) {\n                $(this).hide();\n            }\n        });\n\n        $(\".tf-apaartment-show-all\").on('click', function (e) { \n            $('.tf-single-review.tf_apartment .tf-single-details').each(function (index, val) {\n                $(val).show();\n            });\n        });\n\n    });\n\n})(jQuery, window);\n\n//# sourceURL=webpack://tourfic/./sass/app/js/free/apartment.js?");

/***/ }),

/***/ "./sass/app/js/free/car.js":
/*!*********************************!*\
  !*** ./sass/app/js/free/car.js ***!
  \*********************************/
/***/ (() => {

eval("(function ($, win) {\n    $(document).ready(function () {\n        // FAQ Accordion\n        $('.tf-faq-head').on(\"click\", function () {\n            var $this = $(this);\n            if (!$this.hasClass(\"active\")) {\n                $(\".tf-question-desc\").slideUp(400);\n                $(\".tf-faq-head\").removeClass(\"active\");\n                $('.tf-faq-col').removeClass('active');\n            }\n            $this.toggleClass(\"active\");\n            $this.next().slideToggle();\n            $(this).closest('.tf-faq-col').toggleClass('active');\n        });\n\n        // Tabs Section\n        $('.tf-details-menu ul li').on(\"click\", function () {\n            var $this = $(this);\n            $('.tf-details-menu ul li').removeClass('active');\n            $this.addClass(\"active\");\n        });\n\n        // Car Location Autocomplete\n\n        function tourfic_car_autocomplete(inp, arr) {\n            /*the autocomplete function takes two arguments,\n            the text field element and an array of possible autocompleted values:*/\n\n            // Executes when some one click in the search form location\n            inp.addEventListener(\"focus\", function () {\n                if (this.value == '' || !this.value) {\n                    // alert(\"Working....\")\n                    let a = document.createElement(\"DIV\");\n                    a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n                    a.classList.add(\"autocomplete-items\")\n                    this.parentNode.appendChild(a);\n                    for (const [key, value] of Object.entries(arr)) {\n                        let b = document.createElement(\"DIV\");\n                        b.innerHTML = value;\n                        b.innerHTML += `<input type='hidden' value=\"${value}\" data-slug='${key}'>`;\n                        b.addEventListener(\"click\", function (e) {\n                            let source = this.getElementsByTagName(\"input\")[0];\n                            inp.value = source.value;\n                            inp.closest('input').nextElementSibling.value = source.dataset.slug\n                        });\n                        a.appendChild(b);\n                    }\n                }\n            })\n\n            var currentFocus;\n            /*execute a function when someone writes in the text field:*/\n            inp.addEventListener(\"keyup\", function (e) {\n                var a, b, i, val = this.value;\n                /*close any already open lists of autocompleted values*/\n                closeAllLists();\n                currentFocus = -1;\n                /*create a DIV element that will contain the items (values):*/\n                a = document.createElement(\"DIV\");\n                a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n                a.setAttribute(\"class\", \"autocomplete-items\");\n                /*append the DIV element as a child of the autocomplete container:*/\n                this.parentNode.appendChild(a);\n                var $notfound = [];\n                /*for each item in the array...*/\n                for (const [key, value] of Object.entries(arr)) {\n                    if (value.substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n                        $notfound.push('found');\n                        /*create a DIV element for each matching element:*/\n                        b = document.createElement(\"DIV\");\n                        /*make the matching letters bold:*/\n                        b.innerHTML = \"<strong>\" + value.substr(0, val.length) + \"</strong>\";\n                        b.innerHTML += value.substr(val.length);\n                        /*insert a input field that will hold the current array item's value:*/\n                        b.innerHTML += `<input type='hidden' value=\"${value}\" data-slug='${key}'> `;\n                        /*execute a function when someone clicks on the item value (DIV element):*/\n                        b.addEventListener(\"click\", function (e) {\n                            let source = this.getElementsByTagName(\"input\")[0];\n                            /*insert the value for the autocomplete text field:*/\n                            inp.value = source.value;\n                            inp.closest('input').nextElementSibling.value = source.dataset.slug //source.dataset.slug\n                            /*close the list of autocompleted values,\n                            (or any other open lists of autocompleted values:*/\n                            closeAllLists();\n                        });\n                        a.appendChild(b);\n\n                    } else {\n                        $notfound.push('notfound');\n                    }\n                }\n\n                if ($notfound.indexOf('found') == -1) {\n                    /*create a DIV element for each matching element:*/\n                    b = document.createElement(\"DIV\");\n                    /*make the matching letters bold:*/\n\n                    b.innerHTML += tf_params.no_found;\n                    /*insert a input field that will hold the current array item's value:*/\n                    b.innerHTML += \"<input type='hidden' value=''>\";\n                    /*execute a function when someone clicks on the item value (DIV element):*/\n                    b.addEventListener(\"click\", function (e) {\n                        /*insert the value for the autocomplete text field:*/\n                        inp.value = this.getElementsByTagName(\"input\")[0].value;\n                        /*close the list of autocompleted values,\n                        (or any other open lists of autocompleted values:*/\n                        closeAllLists();\n                    });\n                    a.appendChild(b);\n                }\n            });\n            /*execute a function presses a key on the keyboard:*/\n            inp.addEventListener(\"keydown\", function (e) {\n                var x = document.getElementById(this.id + \"autocomplete-list\");\n                if (x) x = x.getElementsByTagName(\"div\");\n                if (e.keyCode == 40) {\n                    /*If the arrow DOWN key is pressed,\n                    increase the currentFocus variable:*/\n                    currentFocus++;\n                    /*and and make the current item more visible:*/\n                    addActive(x);\n                } else if (e.keyCode == 38) { //up\n                    /*If the arrow UP key is pressed,\n                    decrease the currentFocus variable:*/\n                    currentFocus--;\n                    /*and and make the current item more visible:*/\n                    addActive(x);\n                } else if (e.keyCode == 13) {\n                    /*If the ENTER key is pressed, prevent the form from being submitted,*/\n                    e.preventDefault();\n                    if (currentFocus > -1) {\n                        /*and simulate a click on the \"active\" item:*/\n                        if (x) x[currentFocus].trigger(\"click\");;\n                    }\n                }\n            });\n\n            function addActive(x) {\n                /*a function to classify an item as \"active\":*/\n                if (!x) return false;\n                /*start by removing the \"active\" class on all items:*/\n                removeActive(x);\n                if (currentFocus >= x.length) currentFocus = 0;\n                if (currentFocus < 0) currentFocus = (x.length - 1);\n                /*add class \"autocomplete-active\":*/\n                x[currentFocus].classList.add(\"autocomplete-active\");\n            }\n\n            function removeActive(x) {\n                /*a function to remove the \"active\" class from all autocomplete items:*/\n                for (var i = 0; i < x.length; i++) {\n                    x[i].classList.remove(\"autocomplete-active\");\n                }\n            }\n\n            function closeAllLists(elmnt) {\n                /*close all autocomplete lists in the document,\n                except the one passed as an argument:*/\n                var x = document.getElementsByClassName(\"autocomplete-items\");\n                for (var i = 0; i < x.length; i++) {\n                    if (elmnt != x[i] && elmnt != inp) {\n                        x[i].parentNode.removeChild(x[i]);\n                    }\n                }\n            }\n\n            /*execute a function when someone clicks in the document:*/\n            document.addEventListener(\"click\", function (e) {\n                // closeAllLists(e.target);\n                if (e.target.id == \"content\" || e.target.id == \"\") {\n                    closeAllLists(e.target);\n                }\n            });\n        }\n\n        // Car location autocomplete\n        var car_pickup_input = document.getElementById(\"tf_pickup_location\");\n        var car_locations = tf_params.car_locations;\n        if (car_pickup_input) {\n            tourfic_car_autocomplete(car_pickup_input, car_locations);\n        }\n\n        var car_dropoff_input = document.getElementById(\"tf_dropoff_location\");\n        if (car_dropoff_input) {\n            tourfic_car_autocomplete(car_dropoff_input, car_locations);\n        }\n\n        /*\n        * Add Extra\n        * @author Jahid\n        */\n        $(document).on('submit', '.tf-car-extra-infos', function (e) {\n            e.preventDefault();\n            let form = $(this);\n            const formData = new FormData(e.target);\n            submitBtn = form.find('.tf-extra-submit'),\n            formData.append('action', 'tf_extra_add_to_booking');\n            formData.append('_nonce', tf_params.nonce);\n\n        \n            $.ajax({\n                url: tf_params.ajax_url,\n                type: 'POST',\n                data: formData,\n                contentType: false,\n                processData: false,\n                beforeSend: function () {\n                    form.css({'opacity': '0.5', 'pointer-events': 'none'});\n                    submitBtn.addClass('tf-btn-loading');\n                },\n                success: function (response) {\n                    form.css({'opacity': '1', 'pointer-events': 'all'});\n                    submitBtn.removeClass('tf-btn-loading');\n                    $('.tf-added-extra').html(response);\n                    if(response){\n                        $('.tf-extra-added-info').show();\n                    }\n                }\n            });\n\n        });\n\n        $(document).on('click', '.tf-single-added-extra .delete', function (e) {\n            e.preventDefault();\n            let $this = $(this);\n            $this.closest('.tf-single-added-extra').remove();\n            var count = $('.tf-added-extra .tf-single-added-extra').length;\n            if(count==0){\n                $('.tf-extra-added-info').hide();\n            }\n        });\n\n        $(document).on('click', '.tf-booking-popup-header .tf-close-popup', function (e) {\n            e.preventDefault();\n            $('.tf-car-booking-popup').hide();\n        });\n\n        /*\n        * Car Booking Popup\n        * @author Jahid\n        */\n        $(document).on('click', '.tf-car-booking', function (e) {\n            e.preventDefault();\n            $('.tf-car-booking-popup').css('display', 'flex');\n            var pickup = $('#tf_pickup_location').val();\n            let dropoff = $('#tf_dropoff_location').val();\n            let pickup_date = $('.tf_pickup_date').val();\n            let dropoff_date = $('.tf_dropoff_date').val();\n            let pickup_time = $('.tf_pickup_time').val();\n            let dropoff_time = $('.tf_dropoff_time').val();\n\n            if( !pickup || !dropoff || !pickup_date || !dropoff_date || !pickup_time || !dropoff_time ){\n                $('.error-notice').text('Fill up the all fields');\n            }else{\n                $('.error-notice').hide();\n                $('.tf-car-booking-popup').css('display', 'flex');\n            }\n        });\n\n        $(document).on('click', '.booking-next', function (e) {\n            let $this = $(this);\n            $('.tf-booking-tabs ul li').removeClass('active');\n            $('.tf-booking-tabs ul li.booking').addClass('active');\n\n            $('.tf-protection-content').hide();\n            $('.tf-booking-bar').hide();\n\n            $('.tf-booking-form-fields').show();\n\n            $('#protection_value').val($this.attr('data-charge'));\n        });\n\n        /*\n        * Car Booking\n        * @author Jahid\n        */\n\n        $(document).on('click', '.booking-process', function (e) {\n            let $this = $(this);\n            if($this.hasClass('tf-final-step')){\n                var pickup = $('#tf_pickup_location').val();\n                let dropoff = $('#tf_dropoff_location').val();\n                let pickup_date = $('.tf_pickup_date').val();\n                let dropoff_date = $('.tf_dropoff_date').val();\n                let pickup_time = $('.tf_pickup_time').val();\n                let dropoff_time = $('.tf_dropoff_time').val();\n\n                if( !pickup || !dropoff || !pickup_date || !dropoff_date || !pickup_time || !dropoff_time ){\n                    $('.error-notice').text('Fill up the all fields');\n                    return;\n                }\n            }\n\n            var pickup = $('#tf_pickup_location').val();\n            let dropoff = $('#tf_dropoff_location').val();\n            let pickup_date = $('.tf_pickup_date').val();\n            let dropoff_date = $('.tf_dropoff_date').val();\n            let pickup_time = $('.tf_pickup_time').val();\n            let dropoff_time = $('.tf_dropoff_time').val();\n\n            var data = {\n                action: 'tf_car_booking',\n                car_booking_nonce: tf_params.nonce,\n                post_id: post_id,\n                pickup: pickup,\n                dropoff: dropoff,\n                pickup_date: pickup_date,\n                dropoff_date: dropoff_date,\n                pickup_time: pickup_time,\n                dropoff_time: dropoff_time\n            };\n\n            $.ajax({\n                url: tf_params.ajax_url,\n                type: 'POST',\n                data: data,\n                beforeSend: function () {\n                    form.css({'opacity': '0.5', 'pointer-events': 'none'});\n                    $this.addClass('tf-btn-loading');\n                },\n                success: function (response) {\n                    \n                }\n            });\n\n        });\n\n\n        /*\n        * Car Archive View\n        * @author Jahid\n        */\n         $(document).on('click', '.tf-archive-header .tf-archive-view ul li', function (e) {\n            $('.tf-archive-header .tf-archive-view ul li').removeClass('active');\n            let $this = $(this);\n            $this.addClass('active');\n            let view = $this.attr('data-view');\n   \n            if(view=='grid'){\n                console.log(view);\n                $('.tf-car-details-column .tf-car-archive-result .tf-car-result').removeClass('list-view');\n                $('.tf-car-details-column .tf-car-archive-result .tf-car-result').addClass('grid-view');\n            }else{\n                $('.tf-car-details-column .tf-car-archive-result .tf-car-result').addClass('list-view');\n                $('.tf-car-details-column .tf-car-archive-result .tf-car-result').removeClass('grid-view');\n            }\n        });\n\n    });\n\n})(jQuery, window);\n\n//# sourceURL=webpack://tourfic/./sass/app/js/free/car.js?");

/***/ }),

/***/ "./sass/app/js/free/hotel.js":
/*!***********************************!*\
  !*** ./sass/app/js/free/hotel.js ***!
  \***********************************/
/***/ (() => {

eval("(function ($, win) {\n    $(document).ready(function () {\n\n        // Create an instance of Notyf\n        const notyf = new Notyf({\n            ripple: true,\n            duration: 3000,\n            dismissable: true,\n            position: {\n                x: 'right',\n                y: 'bottom',\n            },\n        });\n\n        /**\n         * Hotel room availability ajax filter\n         * @author Fida\n         */\n        const tfRoomFilter = () => {\n            // Child & Child Type\n            var adult_field_type = $(\"#adults\").attr('type');\n            var child_field_type = $(\"#children\").attr('type');\n            if ($.trim($('input[name=check-in-out-date]').val()) == '') {\n\n                if ($('#tf-required').length === 0) {\n                    if($('.tf_booking-dates .tf_label-row').length === 1){\n                        $('.tf_booking-dates .tf_label-row').append('<span id=\"tf-required\" class=\"required\"><b>' + tf_params.field_required + '</b></span>');\n                    }else{\n                        $(\".tf-check-in-out-date\").ctrigger(\"click\");\n                    }\n                }\n                return;\n            } else {\n                if ($('#tf-required').length === 1) {\n                    $('.tf_booking-dates .tf_label-row .required').html('');\n                }\n            }\n            //get the checked values of features\n            var features = [];\n            $('.tf-room-checkbox :checkbox:checked').each(function (i) {\n                features[i] = $(this).val();\n            });\n            var tf_room_avail_nonce = $(\"input[name=tf_room_avail_nonce]\").val();\n            var post_id = $('input[name=post_id]').val();\n            if (adult_field_type == \"number\" || adult_field_type == \"tel\") {\n                var adult = $('#adults').val();\n            } else {\n                var adult = $('select[name=adults] option').filter(':selected').val();\n            }\n            if (child_field_type == \"number\" || child_field_type == \"tel\") {\n                var child = $('#children').val();\n            } else {\n                var child = $('select[name=children] option').filter(':selected').val();\n            }\n            //var features = $('input[name=features]').filter(':checked').val();\n            var children_ages = $('input[name=children_ages]').val();\n            var check_in_out = $('input[name=check-in-out-date]').val();\n\n            var data = {\n                action: 'tf_room_availability',\n                tf_room_avail_nonce: tf_room_avail_nonce,\n                post_id: post_id,\n                adult: adult,\n                child: child,\n                features: features,\n                children_ages: children_ages,\n                check_in_out: check_in_out,\n            };\n\n            jQuery.ajax({\n                url: tf_params.ajax_url,\n                type: 'post',\n                data: data,\n                beforeSend: function () {\n                    $(\"#tf-single-hotel-avail .btn-primary.tf-submit\").addClass('tf-btn-booking-loading');\n                },\n                success: function (data) {\n                    $('html, body').animate({\n                        scrollTop: $(\"#rooms\").offset().top\n                    }, 500);\n                    $(\"#rooms\").html(data);\n                    $('.tf-room-filter').show();\n                    $(\"#tf-single-hotel-avail .btn-primary.tf-submit\").removeClass('tf-btn-booking-loading');\n                },\n                error: function (data) {\n                    console.log(data);\n                }\n            });\n        }\n\n        $(document).on('click', '#tf-single-hotel-avail .tf-submit', function (e) {\n            e.preventDefault();\n            tfRoomFilter();\n        });\n\n        $(document).on('change', '.tf-room-checkbox :checkbox', function () {\n            tfRoomFilter();\n        });\n        /**\n         * Click to go back to hotel availability form\n         */\n        $(document).on('click', '.hotel-room-availability', function (e) {\n            e.preventDefault();\n\n            $('html, body').animate({\n                scrollTop: $(\"#tf-single-hotel-avail\").offset().top\n            }, 500);\n        });\n\n        /**\n         * Ajax hotel booking\n         *\n         * tf_hotel_booking\n         */\n        $(document).on('click', '.hotel-room-book', function (e) {\n            e.preventDefault();\n\n            var $this = $(this);\n\n            var tf_room_booking_nonce = $(\"input[name=tf_room_booking_nonce]\").val();\n            var post_id = $('input[name=post_id]').val();\n            /*if ($(this).closest('.room-submit-wrap').find('input[name=room_id]').val()) {\n                var room_id = $(this).closest('.room-submit-wrap').find('input[name=room_id]').val();\n            } else {\n                 // var unique_id = $(\"#hotel_roomid\").val();\n                var room_id =  $(this).parent().prev().prev().find(\"input[name=room_id]\").val();\n            }\n            if ($(this).closest('.room-submit-wrap').find('input[name=unique_id]').val()) {\n                var unique_id = $(this).closest('.room-submit-wrap').find('input[name=unique_id]').val();\n            } else {\n                var unique_id = $(\"#hotel_room_uniqueid\").val();\n                // var unique_id = $(this).parent().prev().prev().find(\"input[name=unique_id]\").val();\n            }*/\n            var unique_id = $this.closest('.tf-room').find('input[name=unique_id]').val();\n            var room_id = $this.closest('.tf-room').find('input[name=room_id]').val();\n\n            var location = $('input[name=place]').val();\n            var adult = $('input[name=adult]').val();\n            var child = $('input[name=child]').val();\n            var children_ages = $('input[name=children_ages]').val();\n            var check_in_date = $('input[name=check_in_date]').val();\n            var check_out_date = $('input[name=check_out_date]').val();\n            if ($(this).closest('.reserve').find('select[name=hotel_room_selected] option').filter(':selected').val()) {\n                var room = $(this).closest('.reserve').find('select[name=hotel_room_selected] option').filter(':selected').val();\n                var deposit = $(this).closest('.room-submit-wrap').find('input[name=make_deposit]').is(':checked');\n            } else {\n                var room = $(\"#hotel_room_number\").val();\n                var deposit = $(\"#hotel_room_depo\").val();\n            }\n            var airport_service = $('.fancybox-slide #airport-service').val();\n\n            var data = {\n                action: 'tf_hotel_booking',\n                tf_room_booking_nonce: tf_room_booking_nonce,\n                post_id: post_id,\n                room_id: room_id,\n                unique_id: unique_id,\n                location: location,\n                adult: adult,\n                child: child,\n                children_ages: children_ages,\n                check_in_date: check_in_date,\n                check_out_date: check_out_date,\n                room: room,\n                deposit: deposit,\n                airport_service: airport_service\n            };\n\n            $.ajax({\n                type: 'post',\n                url: tf_params.ajax_url,\n                data: data,\n                beforeSend: function (data) {\n                    $this.block({\n                        message: null,\n                        overlayCSS: {\n                            background: \"#fff\",\n                            opacity: .5\n                        }\n                    });\n\n                    $('.tf_notice_wrapper').html(\"\").hide();\n                },\n                complete: function (data) {\n                    $this.unblock();\n                },\n                success: function (data) {\n                    $this.unblock();\n\n                    var response = JSON.parse(data);\n\n                    if (response.status == 'error') {\n\n                        if (response.errors) {\n                            response.errors.forEach(function (text) {\n                                notyf.error(text);\n                            });\n                        }\n\n                        return false;\n                    } else {\n\n                        if (response.redirect_to) {\n                            window.location.replace(response.redirect_to);\n                        } else {\n                            jQuery(document.body).trigger('added_to_cart');\n                        }\n\n                    }\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n\n            });\n\n        });\n\n        /**\n         * Single hotel Gallery\n         *\n         * Fancybox\n         */\n        $('[data-fancybox=\"hotel-gallery\"]').fancybox({\n            loop: true,\n            buttons: [\n                \"zoom\",\n                \"slideShow\",\n                \"fullScreen\",\n                \"close\"\n            ],\n            hash: false,\n        });\n\n        /**\n         * Hotel slider\n         *\n         * Slick\n         */\n\n        var sbp = $('.swiper-button-prev'),\n            sbn = $('.swiper-button-next');\n\n        $('.single-slider-wrapper .tf_slider-for').slick({\n            slide: '.slick-slide-item',\n            slidesToShow: 1,\n            slidesToScroll: 1,\n            arrows: false,\n            fade: false,\n            dots: false,\n            centerMode: false,\n            variableWidth: false,\n            adaptiveHeight: true\n        });\n\n        sbp.on(\"click\", function () {\n            $(this).closest(\".single-slider-wrapper\").find('.tf_slider-for').slick('slickPrev');\n        });\n\n        sbn.on(\"click\", function () {\n            $(this).closest(\".single-slider-wrapper\").find('.tf_slider-for').slick('slickNext');\n        });\n\n        /**\n         * Scroll to room reserve table\n         */\n        $(\".reserve-button a\").on(\"click\", function () {\n            $('html, body').animate({\n                scrollTop: $(\"#rooms\").offset().top - 32\n            }, 1000);\n        });\n\n        /*\n        * Single Hotel Gallery\n        * @author Jahid\n        */\n        $(document).on('click', '#featured-gallery', function (e) {\n            e.preventDefault();\n            $(\"#tour-gallery\").trigger(\"click\");\n        });\n\n        /*\n        * Hotel Search submit\n        * @since 2.9.7\n        * @author Foysal\n        */\n        $(document).on('submit', '#tf_hotel_aval_check', function (e) {\n            e.preventDefault();\n            let form = $(this),\n                submitBtn = form.find('.tf-submit'),\n                formData = new FormData(form[0]);\n            \n            formData.append('action', 'tf_hotel_search');\n            formData.append('_nonce', tf_params.nonce);\n\n            if (formData.get('from') == null || formData.get('to') == null) {\n                formData.append('from', tf_params.tf_hotel_min_price);\n                formData.append('to', tf_params.tf_hotel_max_price);\n            }\n\n            $.ajax({\n                url: tf_params.ajax_url,\n                type: 'POST',\n                data: formData,\n                contentType: false,\n                processData: false,\n                beforeSend: function () {\n                    form.css({'opacity': '0.5', 'pointer-events': 'none'});\n                    submitBtn.addClass('tf-btn-loading');\n                },\n                success: function (response) {\n                    let obj = JSON.parse(response);\n                    form.css({'opacity': '1', 'pointer-events': 'all'});\n                    submitBtn.removeClass('tf-btn-loading');\n                    if (obj.status === 'error') {\n                        notyf.error(obj.message);\n                    }\n                    if (obj.status === 'success') {\n                        //location redirect to form action url with query string\n                        location.href = form.attr('action') + '?' + obj.query_string;\n                    }\n                }\n            });\n        });\n\n        // Hotel Locations Autocomplete\n        function tourfic_autocomplete(inp, arr) {\n            /*the autocomplete function takes two arguments,\n            the text field element and an array of possible autocompleted values:*/\n\n            // Executes when some one click in the search form location\n            inp.addEventListener(\"focus\", function () {\n                if (this.value == '' || !this.value) {\n                    // alert(\"Working....\")\n                    let a = document.createElement(\"DIV\");\n                    a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n                    a.classList.add(\"autocomplete-items\")\n                    this.parentNode.appendChild(a);\n                    for (const [key, value] of Object.entries(arr)) {\n                        let b = document.createElement(\"DIV\");\n                        b.innerHTML = value;\n                        b.innerHTML += `<input type='hidden' value=\"${value}\" data-slug='${key}'>`;\n                        b.addEventListener(\"click\", function (e) {\n                            let source = this.getElementsByTagName(\"input\")[0];\n                            inp.value = source.value;\n                            inp.closest('input').nextElementSibling.value = source.dataset.slug\n                        });\n                        a.appendChild(b);\n                    }\n                }\n            })\n\n            var currentFocus;\n            /*execute a function when someone writes in the text field:*/\n            inp.addEventListener(\"keyup\", function (e) {\n                var a, b, i, val = this.value;\n                /*close any already open lists of autocompleted values*/\n                closeAllLists();\n                currentFocus = -1;\n                /*create a DIV element that will contain the items (values):*/\n                a = document.createElement(\"DIV\");\n                a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n                a.setAttribute(\"class\", \"autocomplete-items\");\n                /*append the DIV element as a child of the autocomplete container:*/\n                this.parentNode.appendChild(a);\n                var $notfound = [];\n                /*for each item in the array...*/\n                for (const [key, value] of Object.entries(arr)) {\n                    if (value.substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n                        $notfound.push('found');\n                        /*create a DIV element for each matching element:*/\n                        b = document.createElement(\"DIV\");\n                        /*make the matching letters bold:*/\n                        b.innerHTML = \"<strong>\" + value.substr(0, val.length) + \"</strong>\";\n                        b.innerHTML += value.substr(val.length);\n                        /*insert a input field that will hold the current array item's value:*/\n                        b.innerHTML += `<input type='hidden' value=\"${value}\" data-slug='${key}'> `;\n                        /*execute a function when someone clicks on the item value (DIV element):*/\n                        b.addEventListener(\"click\", function (e) {\n                            let source = this.getElementsByTagName(\"input\")[0];\n                            /*insert the value for the autocomplete text field:*/\n                            inp.value = source.value;\n                            inp.closest('input').nextElementSibling.value = source.dataset.slug //source.dataset.slug\n                            /*close the list of autocompleted values,\n                            (or any other open lists of autocompleted values:*/\n                            closeAllLists();\n                        });\n                        a.appendChild(b);\n\n                    } else {\n                        $notfound.push('notfound');\n                    }\n                }\n\n                if ($notfound.indexOf('found') == -1) {\n                    /*create a DIV element for each matching element:*/\n                    b = document.createElement(\"DIV\");\n                    /*make the matching letters bold:*/\n\n                    b.innerHTML += tf_params.no_found;\n                    /*insert a input field that will hold the current array item's value:*/\n                    b.innerHTML += \"<input type='hidden' value=''>\";\n                    /*execute a function when someone clicks on the item value (DIV element):*/\n                    b.addEventListener(\"click\", function (e) {\n                        /*insert the value for the autocomplete text field:*/\n                        inp.value = this.getElementsByTagName(\"input\")[0].value;\n                        /*close the list of autocompleted values,\n                        (or any other open lists of autocompleted values:*/\n                        closeAllLists();\n                    });\n                    a.appendChild(b);\n                }\n            });\n            /*execute a function presses a key on the keyboard:*/\n            inp.addEventListener(\"keydown\", function (e) {\n                var x = document.getElementById(this.id + \"autocomplete-list\");\n                if (x) x = x.getElementsByTagName(\"div\");\n                if (e.keyCode == 40) {\n                    /*If the arrow DOWN key is pressed,\n                    increase the currentFocus variable:*/\n                    currentFocus++;\n                    /*and and make the current item more visible:*/\n                    addActive(x);\n                } else if (e.keyCode == 38) { //up\n                    /*If the arrow UP key is pressed,\n                    decrease the currentFocus variable:*/\n                    currentFocus--;\n                    /*and and make the current item more visible:*/\n                    addActive(x);\n                } else if (e.keyCode == 13) {\n                    /*If the ENTER key is pressed, prevent the form from being submitted,*/\n                    e.preventDefault();\n                    if (currentFocus > -1) {\n                        /*and simulate a click on the \"active\" item:*/\n                        if (x) x[currentFocus].trigger(\"click\");\n                    }\n                }\n            });\n\n            function addActive(x) {\n                /*a function to classify an item as \"active\":*/\n                if (!x) return false;\n                /*start by removing the \"active\" class on all items:*/\n                removeActive(x);\n                if (currentFocus >= x.length) currentFocus = 0;\n                if (currentFocus < 0) currentFocus = (x.length - 1);\n                /*add class \"autocomplete-active\":*/\n                x[currentFocus].classList.add(\"autocomplete-active\");\n            }\n\n            function removeActive(x) {\n                /*a function to remove the \"active\" class from all autocomplete items:*/\n                for (var i = 0; i < x.length; i++) {\n                    x[i].classList.remove(\"autocomplete-active\");\n                }\n            }\n\n            function closeAllLists(elmnt) {\n                /*close all autocomplete lists in the document,\n                except the one passed as an argument:*/\n                var x = document.getElementsByClassName(\"autocomplete-items\");\n                for (var i = 0; i < x.length; i++) {\n                    if (elmnt != x[i] && elmnt != inp) {\n                        x[i].parentNode.removeChild(x[i]);\n                    }\n                }\n            }\n\n            /*execute a function when someone clicks in the document:*/\n            document.addEventListener(\"click\", function (e) {\n                // closeAllLists(e.target);\n                if (e.target.id == \"content\" || e.target.id == \"\") {\n                    closeAllLists(e.target);\n                }\n            });\n        }\n\n        // Hotel Location\n\n        $('#tf-destination-adv').on(\"click\", function (e) {\n            var location = $(this).val();\n            if (location) {\n                $(\".tf-hotel-locations\").removeClass('tf-locations-show');\n            } else {\n                $(\".tf-hotel-locations\").addClass('tf-locations-show');\n            }\n        });\n        $('#tf-destination-adv').on(\"keyup\", function (e) {\n            var location = $(this).val();\n            $(\"#tf-place-destination\").val(location);\n        });\n        $('#tf-location').on(\"keyup\", function (e) {\n            var tf_location = $(this).val();\n            $(\"#tf-search-hotel\").val(tf_location);\n        });\n        $(document).on('click', function (event) {\n            if (!$(event.target).closest(\"#tf-destination-adv\").length) {\n                $(\".tf-hotel-locations\").removeClass('tf-locations-show');\n            }\n        });\n        $('#ui-id-1 li').on(\"click\", function (e) {\n            var dest_name = $(this).attr(\"data-name\");\n            var dest_slug = $(this).attr(\"data-slug\");\n            $(\".tf-preview-destination\").val(dest_name);\n            $(\"#tf-place-destination\").val(dest_slug);\n            $(\".tf-hotel-locations\").removeClass('tf-locations-show');\n        });\n\n        \n\n        // Hotel location autocomplete\n        var hotel_location_input = document.getElementById(\"tf-location\");\n        var hotel_locations = tf_params.locations;\n        if (hotel_location_input) {\n            tourfic_autocomplete(hotel_location_input, hotel_locations);\n        }\n\n        /*\n        * Hotel without payment booking\n        * @since 2.10.3\n        * @Author Foysal\n        */\n        const hotelPopupBooking = ($this) => {\n\n            var tf_room_booking_nonce = $(\"input[name=tf_room_booking_nonce]\").val();\n            var post_id = $('input[name=post_id]').val();\n            var roomnumber = $this.closest('.reserve').find('select[name=hotel_room_selected]').val();\n            var room_id = $this.closest('.tf-room').find('input[name=room_id]').val();\n            var unique_id = $this.closest('.tf-room').find('input[name=unique_id]').val();\n            var hotel_deposit = $this.closest('.tf-room').find('input[name=make_deposit]').is(':checked');\n            if (roomnumber == 0) {\n                $this.closest('.tf-room').find('.roomselectissue').html('<span style=\"color:red\">' + tf_pro_params.select_room + '</span>');\n            } else {\n                $this.closest('.tf-room').find('.roomselectissue').html('');\n                $(\"#hotel_room_number\").val(roomnumber);\n                $(\"#hotel_roomid\").val(room_id);\n                $(\"#hotel_room_uniqueid\").val(unique_id);\n                $(\"#hotel_room_depo\").val(hotel_deposit);\n            }\n\n            /*if ($(this).closest('.room-submit-wrap').find('input[name=room_id]').val()) {\n                var room_id = $(this).closest('.room-submit-wrap').find('input[name=room_id]').val();\n            } else {\n                var room_id = $(\"#hotel_roomid\").val();\n            }\n            if ($(this).closest('.room-submit-wrap').find('input[name=unique_id]').val()) {\n                var unique_id = $(this).closest('.room-submit-wrap').find('input[name=unique_id]').val();\n            } else {\n                var unique_id = $(\"#hotel_room_uniqueid\").val();\n            }*/\n            var location = $('input[name=place]').val();\n            var adult = $('input[name=adult]').val();\n            var child = $('input[name=child]').val();\n            var children_ages = $('input[name=children_ages]').val();\n            var check_in_date = $('input[name=check_in_date]').val();\n            var check_out_date = $('input[name=check_out_date]').val();\n            if ($this.closest('.reserve').find('select[name=hotel_room_selected] option').filter(':selected').val()) {\n                var room = $this.closest('.reserve').find('select[name=hotel_room_selected] option').filter(':selected').val();\n                var deposit = $this.closest('.tf-room').find('input[name=make_deposit]').is(':checked');\n            } else {\n                var room = $(\"#hotel_room_number\").val();\n                var deposit = $(\"#hotel_room_depo\").val();\n            }\n            var airport_service = $('[name=\"tf_airport_service\"]:checked').val();\n\n            var data = {\n                action: 'tf_hotel_booking_popup',\n                tf_room_booking_nonce: tf_room_booking_nonce,\n                post_id: post_id,\n                room_id: room_id,\n                unique_id: unique_id,\n                location: location,\n                adult: adult,\n                child: child,\n                children_ages: children_ages,\n                check_in_date: check_in_date,\n                check_out_date: check_out_date,\n                room: room,\n                deposit: deposit,\n                airport_service: airport_service\n            };\n\n            $.ajax({\n                type: 'post',\n                url: tf_params.ajax_url,\n                data: data,\n                beforeSend: function (data) {\n                    $('#tour_room_details_loader').show();\n                },\n                complete: function (data) {\n                    $this.unblock();\n                },\n                success: function (data) {\n                    $this.unblock();\n\n                    var response = JSON.parse(data);\n\n                    if (response.status == 'error') {\n\n                        $('#tour_room_details_loader').hide();\n                        if (response.errors) {\n                            response.errors.forEach(function (text) {\n                                notyf.error(text);\n                            });\n                        }\n\n                        return false;\n                    } else {\n                        $('#tour_room_details_loader').hide();\n                        if ($('.tf-traveller-info-box').length > 0) {\n                            if ($(\".tf-traveller-info-box\").html().trim() == \"\") {\n                                $('.tf-traveller-info-box').html(response.guest_info);\n                            } else {\n                                $('.tf-traveller-info-box').html(response.guest_info);\n                            }\n                        }\n                        if ($('.tf-booking-traveller-info').length > 0) {\n                            $('.tf-booking-traveller-info').html(response.hotel_booking_summery);\n                        }\n                        $this.closest('form.tf-room').find('.tf-withoutpayment-booking').addClass('show');\n                    }\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n\n            });\n        }\n        // $(document).on('click', '.tf-hotel-booking-popup-btn', function (e) {\n        //     e.preventDefault();\n        //     var $this = $(this);\n\n        //     hotelPopupBooking($this);\n        // });\n\n\n        /*$(document).on(\"change\", \"[name='tf_airport_service']\", function (e) {\n            var $this = $(this);\n\n            hotelPopupBooking($this);\n        });*/\n\n        // Design 1 - hotel Facilities\n        $('.tf-hotel-facilities-title-area').on(\"click\", function () {\n            var $this = $(this);\n            if (!$this.hasClass(\"active\")) {\n                $(\".tf-hotel-facilities-content-area\").slideUp(400);\n                $(\".tf-hotel-facilities-title-area\").removeClass(\"active\");\n                $('.hotel-facilities-icon-down').removeClass(\"active\");\n            }\n            $this.toggleClass(\"active\");\n            $(this).closest('.tf-hotel-facilities-content-area').toggleClass('active');\n            $(this).find('.hotel-facilities-icon-down').toggle();\n            $(this).find('.hotel-facilities-icon-up').toggleClass('active');\n            $this.next().slideToggle();\n        });\n    });\n\n})(jQuery, window);\n\n//# sourceURL=webpack://tourfic/./sass/app/js/free/hotel.js?");

/***/ }),

/***/ "./sass/app/js/free/tour.js":
/*!**********************************!*\
  !*** ./sass/app/js/free/tour.js ***!
  \**********************************/
/***/ (() => {

eval("(function ($, win) {\n    $(document).ready(function () {\n\n\n        function tf_flatpickr_locale() {\n            let locale = tf_params.tour_form_data.flatpickr_locale;\n            let allowed_locales = ['ar', 'bn_BD', 'de_DE', 'es_ES', 'fr_FR', 'hi_IN', 'it_IT', 'nl_NL', 'ru_RU', 'zh_CN' ];\n\n            if( jQuery.inArray(locale, allowed_locales) !== -1 ) {\n                \n                switch (locale) {\n                    case \"bn_BD\":\n                        locale = 'bn';\n                        break;\n                    case \"de_DE\":\n                        locale = 'de';\n                        break;\n                    case \"es_ES\":\n                        locale = 'es';\n                        break;\n                    case \"fr_FR\":\n                        locale = 'fr';\n                        break;\n                    case \"hi_IN\":\n                        locale = 'hi';\n                        break;\n                    case \"it_IT\":\n                        locale = 'it';\n                        break;\n                    case \"nl_NL\":\n                        locale = 'nl';\n                        break;\n                    case \"ru_RU\":\n                        locale = 'ru';\n                        break;\n                    case \"zh_CN\":\n                        locale = 'zh';\n                        break;\n                }\n            } else {\n                locale = 'default';\n            }\n\n            return locale;\n        }\n\n        // let locale_zone = tf_flatpickr_locale();\n\n        window.flatpickr.l10ns[tf_flatpickr_locale()].firstDayOfWeek = tf_params.tour_form_data.first_day_of_week;\n\n        // Create an instance of Notyf\n        const notyf = new Notyf({\n            ripple: true,\n            duration: 3000,\n            dismissable: true,\n            position: {\n                x: 'right',\n                y: 'bottom',\n            },\n        });\n\n        /**\n         * Ajax tour booking\n         *\n         * tf_tours_booking\n         */\n        $(document).on('submit', 'form.tf_tours_booking', function (e) {\n            e.preventDefault();\n\n            var $this = $(this);\n\n            var formData = new FormData(this);\n            formData.append('action', 'tf_tours_booking');\n            formData.append('_ajax_nonce', tf_params.nonce);\n\n\n            // Tour Extra\n            var tour_extra_total = [];\n            var tour_extra_quantity = [];\n\n            /*\n            jQuery('.tour-extra-single input:checkbox:checked').each(function () {\n                tour_extra_total.push(jQuery(this).val());\n\n                    if ($this.find('.tf_quantity-acrselection').hasClass('quantity-active')) {\n                        let qty = $this.find('input[name=\"extra-quantity\"]').val();\n\n                        tour_extra_quantity.push(qty)\n                    } else {\n                        tour_extra_quantity.push(1)\n                    }\n                }\n            });\n            */\n\n            jQuery('.tour-extra-single').each(function(e) {\n                let $this = jQuery(this);\n\n                if($this.find('input[name=\"tf-tour-extra\"]').is(':checked')){\n\n                   let tour_extras = $this.find('input[name=\"tf-tour-extra\"]').val();\n                   tour_extra_total.push(tour_extras);\n\n                   if($this.find('.tf_quantity-acrselection').hasClass('quantity-active')){\n                       let qty = $this.find('input[name=\"extra-quantity\"]').val();\n\n                       tour_extra_quantity.push(qty)\n                   }else{\n                    tour_extra_quantity.push(1)\n                   }\n               }\n           });\n\n            formData.append('tour_extra', tour_extra_total);\n            formData.append('tour_extra_quantity', tour_extra_quantity);\n\n            $.ajax({\n                type: 'post',\n                url: tf_params.ajax_url,\n                data: formData,\n                processData: false,\n                contentType: false,\n                beforeSend: function (data) {\n                    $this.block({\n                        message: null,\n                        overlayCSS: {\n                            background: \"#fff\",\n                            opacity: .5\n                        }\n                    });\n                    $('#tour_room_details_loader').show();\n                    $('.tf-notice-wrapper').html(\"\").hide();\n                },\n                complete: function (data) {\n                    $this.unblock();\n                },\n                success: function (data) {\n                    $this.unblock();\n\n                    var response = JSON.parse(data);\n\n                    if (response.without_payment == 'false') {\n                        if (response.status == 'error') {\n                            $.fancybox.close();\n                            if (response.errors) {\n                                response.errors.forEach(function (text) {\n                                    notyf.error(text);\n                                });\n                            }\n\n                            return false;\n                        } else {\n\n                            if (response.redirect_to) {\n                                window.location.replace(response.redirect_to);\n                            } else {\n                                jQuery(document.body).trigger('added_to_cart');\n                            }\n\n                        }\n                    } else {\n                        $('#tour_room_details_loader').hide();\n                        $('.tf-withoutpayment-booking').removeClass('show');\n                        $('.tf-withoutpayment-booking-confirm').addClass('show');\n                    }\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n\n            });\n        });\n\n        $('input[name=\"tf-tour-extra\"]').on(\"change\", function (e) {\n\n            let parent = $(this).parent().parent().parent()\n\n            if ($(this).is(':checked')) {\n\n                parent.find(\".tf_quantity-acrselection\").addClass('quantity-active')\n\n            } else {\n\n                parent.find(\".tf_quantity-acrselection\").removeClass('quantity-active')\n\n            }\n        })\n\n        /**\n         * Single Tour Gallery\n         *\n         * Fancybox\n         */\n        $('[data-fancybox=\"tour-gallery\"]').fancybox({\n            loop: true,\n            buttons: [\n                \"zoom\",\n                \"slideShow\",\n                \"fullScreen\",\n                \"close\"\n            ],\n            hash: false,\n        });\n\n        /**\n         * Itinerary gallery init\n         */\n        $('.tf-itinerary-gallery').fancybox({\n            buttons: [\n                \"zoom\",\n                \"slideShow\",\n                \"fullScreen\",\n                \"close\"\n            ]\n        });\n\n        /**\n         * Single Tour price change\n         *\n         * adult, child, infant\n         */\n        $(document).on('click', '.tf-single-tour-pricing .tf-price-tab li', function () {\n            var t = $(this).attr('id');\n\n            $(this).addClass('active').siblings().removeClass('active');\n            $('.tf-price').addClass('tf-d-n');\n            $('.' + t + '-price').removeClass('tf-d-n');\n        });\n        //first li click\n        $('.tf-single-tour-pricing .tf-price-tab li:first-child').trigger('click');\n\n        /**\n         * Single Tour price change Template 1\n         *\n         * adult, child, infant\n         */\n        $(document).on('click', '.tf-trip-person-info ul li', function () {\n            var t = $(this).attr('data');\n\n            $(this).addClass('active').siblings().removeClass('active');\n            $('.tf-trip-pricing').removeClass('active');\n            $('.tf-' + t).addClass('active');\n        });\n\n        /*\n        * Tour Search submit\n        * @since 2.9.7\n        * @author Foysal\n        */\n        $(document).on('submit', '#tf_tour_aval_check', function (e) {\n            e.preventDefault();\n            let form = $(this),\n                submitBtn = form.find('.tf-submit'),\n                formData = new FormData(form[0]);\n\n            formData.append('action', 'tf_tour_search');\n            formData.append('_nonce', tf_params.nonce);\n\n            if (formData.get('from') == null || formData.get('to') == null) {\n                formData.append('from', tf_params.tf_tour_min_price);\n                formData.append('to', tf_params.tf_tour_max_price);\n            }\n\n            $.ajax({\n                url: tf_params.ajax_url,\n                type: 'POST',\n                data: formData,\n                contentType: false,\n                processData: false,\n                beforeSend: function () {\n                    form.css({'opacity': '0.5', 'pointer-events': 'none'});\n                    submitBtn.addClass('tf-btn-loading');\n                },\n                success: function (response) {\n                    let obj = JSON.parse(response);\n                    form.css({'opacity': '1', 'pointer-events': 'all'});\n                    submitBtn.removeClass('tf-btn-loading');\n                    if (obj.status === 'error') {\n                        notyf.error(obj.message);\n                    }\n                    if (obj.status === 'success') {\n                        //location redirect to form action url with query string\n                        location.href = form.attr('action') + '?' + obj.query_string;\n                    }\n                }\n            });\n        });\n\n        // Tour destination Autocomplete\n\n        function tourfic_autocomplete(inp, arr) {\n            /*the autocomplete function takes two arguments,\n            the text field element and an array of possible autocompleted values:*/\n\n            // Executes when some one click in the search form location\n            inp.addEventListener(\"focus\", function () {\n                if (this.value == '' || !this.value) {\n                    // alert(\"Working....\")\n                    let a = document.createElement(\"DIV\");\n                    a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n                    a.classList.add(\"autocomplete-items\")\n                    this.parentNode.appendChild(a);\n                    for (const [key, value] of Object.entries(arr)) {\n                        let b = document.createElement(\"DIV\");\n                        b.innerHTML = value;\n                        b.innerHTML += `<input type='hidden' value=\"${value}\" data-slug='${key}'>`;\n                        b.addEventListener(\"click\", function (e) {\n                            let source = this.getElementsByTagName(\"input\")[0];\n                            inp.value = source.value;\n                            inp.closest('input').nextElementSibling.value = source.dataset.slug\n                        });\n                        a.appendChild(b);\n                    }\n                }\n            })\n\n            var currentFocus;\n            /*execute a function when someone writes in the text field:*/\n            inp.addEventListener(\"keyup\", function (e) {\n                var a, b, i, val = this.value;\n                /*close any already open lists of autocompleted values*/\n                closeAllLists();\n                currentFocus = -1;\n                /*create a DIV element that will contain the items (values):*/\n                a = document.createElement(\"DIV\");\n                a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n                a.setAttribute(\"class\", \"autocomplete-items\");\n                /*append the DIV element as a child of the autocomplete container:*/\n                this.parentNode.appendChild(a);\n                var $notfound = [];\n                /*for each item in the array...*/\n                for (const [key, value] of Object.entries(arr)) {\n                    if (value.substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n                        $notfound.push('found');\n                        /*create a DIV element for each matching element:*/\n                        b = document.createElement(\"DIV\");\n                        /*make the matching letters bold:*/\n                        b.innerHTML = \"<strong>\" + value.substr(0, val.length) + \"</strong>\";\n                        b.innerHTML += value.substr(val.length);\n                        /*insert a input field that will hold the current array item's value:*/\n                        b.innerHTML += `<input type='hidden' value=\"${value}\" data-slug='${key}'> `;\n                        /*execute a function when someone clicks on the item value (DIV element):*/\n                        b.addEventListener(\"click\", function (e) {\n                            let source = this.getElementsByTagName(\"input\")[0];\n                            /*insert the value for the autocomplete text field:*/\n                            inp.value = source.value;\n                            inp.closest('input').nextElementSibling.value = source.dataset.slug //source.dataset.slug\n                            /*close the list of autocompleted values,\n                            (or any other open lists of autocompleted values:*/\n                            closeAllLists();\n                        });\n                        a.appendChild(b);\n\n                    } else {\n                        $notfound.push('notfound');\n                    }\n                }\n\n                if ($notfound.indexOf('found') == -1) {\n                    /*create a DIV element for each matching element:*/\n                    b = document.createElement(\"DIV\");\n                    /*make the matching letters bold:*/\n\n                    b.innerHTML += tf_params.no_found;\n                    /*insert a input field that will hold the current array item's value:*/\n                    b.innerHTML += \"<input type='hidden' value=''>\";\n                    /*execute a function when someone clicks on the item value (DIV element):*/\n                    b.addEventListener(\"click\", function (e) {\n                        /*insert the value for the autocomplete text field:*/\n                        inp.value = this.getElementsByTagName(\"input\")[0].value;\n                        /*close the list of autocompleted values,\n                        (or any other open lists of autocompleted values:*/\n                        closeAllLists();\n                    });\n                    a.appendChild(b);\n                }\n            });\n            /*execute a function presses a key on the keyboard:*/\n            inp.addEventListener(\"keydown\", function (e) {\n                var x = document.getElementById(this.id + \"autocomplete-list\");\n                if (x) x = x.getElementsByTagName(\"div\");\n                if (e.keyCode == 40) {\n                    /*If the arrow DOWN key is pressed,\n                    increase the currentFocus variable:*/\n                    currentFocus++;\n                    /*and and make the current item more visible:*/\n                    addActive(x);\n                } else if (e.keyCode == 38) { //up\n                    /*If the arrow UP key is pressed,\n                    decrease the currentFocus variable:*/\n                    currentFocus--;\n                    /*and and make the current item more visible:*/\n                    addActive(x);\n                } else if (e.keyCode == 13) {\n                    /*If the ENTER key is pressed, prevent the form from being submitted,*/\n                    e.preventDefault();\n                    if (currentFocus > -1) {\n                        /*and simulate a click on the \"active\" item:*/\n                        if (x) x[currentFocus].trigger(\"click\");;\n                    }\n                }\n            });\n\n            function addActive(x) {\n                /*a function to classify an item as \"active\":*/\n                if (!x) return false;\n                /*start by removing the \"active\" class on all items:*/\n                removeActive(x);\n                if (currentFocus >= x.length) currentFocus = 0;\n                if (currentFocus < 0) currentFocus = (x.length - 1);\n                /*add class \"autocomplete-active\":*/\n                x[currentFocus].classList.add(\"autocomplete-active\");\n            }\n\n            function removeActive(x) {\n                /*a function to remove the \"active\" class from all autocomplete items:*/\n                for (var i = 0; i < x.length; i++) {\n                    x[i].classList.remove(\"autocomplete-active\");\n                }\n            }\n\n            function closeAllLists(elmnt) {\n                /*close all autocomplete lists in the document,\n                except the one passed as an argument:*/\n                var x = document.getElementsByClassName(\"autocomplete-items\");\n                for (var i = 0; i < x.length; i++) {\n                    if (elmnt != x[i] && elmnt != inp) {\n                        x[i].parentNode.removeChild(x[i]);\n                    }\n                }\n            }\n\n            /*execute a function when someone clicks in the document:*/\n            document.addEventListener(\"click\", function (e) {\n                // closeAllLists(e.target);\n                if (e.target.id == \"content\" || e.target.id == \"\") {\n                    closeAllLists(e.target);\n                }\n            });\n        }\n\n        /*\n        * New Template Itinerary Accordion\n        * @author: Jahid\n        */\n        $('.tf-itinerary-title').on(\"click\", function () {\n            var $this = $(this);\n            if (!$this.hasClass(\"active\")) {\n                $(\".tf-itinerary-content-box\").slideUp(400);\n                $(\".tf-itinerary-title\").removeClass(\"active\");\n                $('.tf-single-itinerary-item').removeClass('active');\n            }\n            $this.toggleClass(\"active\");\n            $(this).closest('.tf-single-itinerary-item').toggleClass('active');\n            $this.next().slideToggle();\n        });\n\n        /*\n        * New Template Tour Extra\n        * @author: Jahid\n        */\n        $('.tf-form-title.tf-tour-extra').on(\"click\", function () {\n            var $this = $(this);\n            if (!$this.hasClass(\"active\")) {\n                $(\".tf-tour-extra-box\").slideUp(400);\n                $(\".tf-form-title.tf-tour-extra\").removeClass(\"active\");\n            }\n            $this.toggleClass(\"active\");\n            $this.next().slideToggle();\n        });\n\n        // Itinerary Accordion\n        $('.tf-accordion-head').on(\"click\", function () {\n            $(this).toggleClass('active');\n            $(this).parent().find('.arrow').toggleClass('arrow-animate');\n            $(this).parent().find('.tf-accordion-content').slideToggle();\n            //$(this).parents('#tf-accordion-wrapper').siblings().find('.tf-accordion-content').slideUp();\n            $(this).siblings().find('.ininerary-other-gallery').slick({\n                slidesToShow: 6,\n                slidesToScroll: 1,\n                arrows: true,\n                fade: false,\n                adaptiveHeight: true,\n                infinite: true,\n                useTransform: true,\n                speed: 400,\n                cssEase: 'cubic-bezier(0.77, 0, 0.18, 1)',\n                responsive: [{\n                    breakpoint: 1024,\n                    settings: {\n                        slidesToShow: 4,\n                        slidesToScroll: 1,\n                    }\n                }, {\n                    breakpoint: 640,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1,\n                    }\n                }, {\n                    breakpoint: 420,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1,\n                    }\n                }]\n            });\n        });\n\n        // Tour Destination\n\n        $('#tf-tour-location-adv').on(\"click\", function (e) {\n            var location = $(this).val();\n            if (location) {\n                $(\".tf-tour-results\").removeClass('tf-destination-show');\n            } else {\n                $(\".tf-tour-results\").addClass('tf-destination-show');\n            }\n        });\n        $('#tf-tour-location-adv').on(\"keyup\", function (e) {\n            var location = $(this).val();\n            $(\"#tf-tour-place\").val(location);\n        });\n        $('#tf-destination').on(\"keyup\", function (e) {\n            var tf_location = $(this).val();\n            $(\"#tf-search-tour\").val(tf_location);\n        });\n        $(document).on('click', function (event) {\n            if (!$(event.target).closest(\"#tf-tour-location-adv\").length) {\n                $(\".tf-tour-results\").removeClass('tf-destination-show');\n            }\n        });\n        $('#ui-id-2 li').on(\"click\", function (e) {\n            var dest_name = $(this).attr(\"data-name\");\n            var dest_slug = $(this).attr(\"data-slug\");\n            $(\".tf-tour-preview-place\").val(dest_name);\n            $(\"#tf-tour-place\").val(dest_slug);\n            $(\".tf-tour-results\").removeClass('tf-destination-show');\n        });\n\n        // Tour destination autocomplete\n        var tour_destination_input = document.getElementById(\"tf-destination\");\n        var tour_destinations = tf_params.tour_destinations;\n        if (tour_destination_input) {\n            tourfic_autocomplete(tour_destination_input, tour_destinations);\n        }\n\n        /**\n         * Single tour sticky booking bar position fixed\n         */\n        $(window).on(\"scroll\", function () {\n            var sticky = $('.tf-tour-booking-wrap'),\n                scroll = $(window).scrollTop();\n\n            if (scroll >= 800) sticky.addClass('tf-tours-fixed');\n            else sticky.removeClass('tf-tours-fixed');\n        });\n\n        /**\n         * Single tour sticky booking bar - template 1\n         * @author Foysal\n         */\n        if ($('.tf-tour-booking-box').length > 0) {\n            $(window).on(\"scroll\", function () {\n                let bookingBox = $('.tf-tour-booking-box');\n                let bottomBar = $('.tf-bottom-booking-bar');\n                let boxOffset = bookingBox.offset().top + bookingBox.outerHeight();\n\n                var scrollTop = $(window).scrollTop();\n\n                if (scrollTop > boxOffset) {\n                    bottomBar.addClass('active'); // Add your class name here\n                } else {\n                    bottomBar.removeClass('active'); // Remove the class if scrolling back up\n                }\n            });\n        }\n\n        $(document).on('click', '.tf-booking-mobile-btn', function (e) {\n            e.preventDefault();\n            $(this).closest('.tf-bottom-booking-bar').toggleClass('mobile-active');\n        });\n\n        //Template 3 Mobile Booking Btn\n        $('.tf-template-3 .tf-mobile-booking-btn').on('click', function () {\n            $('.tf-bottom-booking-bar').addClass('tf-mobile-booking-form');\n            $('.tf-template-3 .tf-mobile-booking-btn').slideUp(300);\n        });\n\n        /**\n         * Single tour booking form\n         */\n        const allowed_times = tf_params.tour_form_data.allowed_times ? JSON.parse(tf_params.tour_form_data.allowed_times) : [];\n        const custom_avail = tf_params.tour_form_data.custom_avail;\n        if (custom_avail == false && allowed_times.length > 0) {\n            populateTimeSelect(allowed_times)\n        }\n\n        // First Day of Week\n        //const first_day_of_week = tf_params.tour_form_data.flatpickr_locale;\n\n        function populateTimeSelect(times) {\n            let timeSelect = $('select[name=\"check-in-time\"]');\n            let timeSelectDiv = $(\".check-in-time-div\");\n            timeSelect.empty();\n            if (times.length > 0) {\n                timeSelect.append(`<option value=\"\" selected hidden>${tf_params.tour_form_data.select_time_text}</option>`);\n                $.each(times, function (i, v) {\n                    timeSelect.append(`<option value=\"${i}\">${v}</option>`);\n                });\n                timeSelectDiv.css('display', 'flex');\n            } else timeSelectDiv.hide();\n        }\n\n        var tour_date_options = {\n            enableTime: false,\n            dateFormat: \"Y/m/d\",\n            altInput: true,\n            altFormat: tf_params.tour_form_data.date_format,\n            locale: tf_flatpickr_locale(),\n            \n            onReady: function (selectedDates, dateStr, instance) {\n                instance.element.value = dateStr.replace(/[a-z]+/g, '-');\n                instance.altInput.value = instance.altInput.value.replace(/[a-z]+/g, '-');\n            },\n\n            onChange: function (selectedDates, dateStr, instance) {\n\n                instance.altInput.value = instance.altInput.value.replace(/[a-z]+/g, '-');\n                $(\".tours-check-in-out\").val(instance.altInput.value);\n                $('.tours-check-in-out[type=\"hidden\"]').val(dateStr.replace(/[a-z]+/g, '-'));\n                if (custom_avail == true) {\n                    let times = allowed_times.filter((v) => {\n                        let date_str = Date.parse(dateStr);\n                        let start_date = Date.parse(v.date.from);\n                        let end_date = Date.parse(v.date.to);\n                        return start_date <= date_str && end_date >= date_str;\n                    });\n                    times = times.length > 0 && times[0].times ? times[0].times : null;\n                    populateTimeSelect(times);\n                }\n                if(tf_params.tour_form_data.tf_tour_selected_template === 'design-2') {\n                    dateSetToFields(selectedDates, instance);\n                }\n            },\n\n        };\n\n        if(tf_params.tour_form_data.tour_type == 'fixed'){\n            tour_date_options.defaultDate= tf_params.tour_form_data.defaultDate;\n            tour_date_options.enable= tf_params.tour_form_data.enable;\n        }\n\n        if(tf_params.tour_form_data.tour_type == 'continuous'){\n            tour_date_options.minDate = \"today\";\n            tour_date_options.disableMobile = \"true\";\n\n            if (custom_avail == true) {\n                tour_date_options.enable = tf_params.tour_form_data.cont_custom_date.map((v) => {\n                    return {\n                        from: v.date.from,\n                        to: v.date.to\n                    }\n                });\n            }\n\n            if (custom_avail == false) {\n                if (tf_params.tour_form_data.disabled_day || tf_params.tour_form_data.disable_range || tf_params.tour_form_data.disable_specific || tf_params.tour_form_data.disable_same_day) {\n                    tour_date_options.disable = [];\n                    if (tf_params.tour_form_data.disabled_day) {\n                        var disabledDays = tf_params.tour_form_data.disabled_day.map(Number);\n                        tour_date_options.disable.push(\n                            function (date) {\n                            return (date.getDay() === 8 || disabledDays.includes(date.getDay()));\n                        }\n                        );\n                    }\n                    if (tf_params.tour_form_data.disable_range) {\n                        tf_params.tour_form_data.disable_range.forEach((d_item) => {\n                            tour_date_options.disable.push({\n                                from: d_item.date.from,\n                                to: d_item.date.to\n                            });\n                        });\n                    }\n                    if (tf_params.tour_form_data.disable_same_day) {\n                        tour_date_options.disable.push(\"today\");\n                    }\n                    \n                    if (tf_params.tour_form_data.disable_specific) {\n                        var disable_specific_string = tf_params.tour_form_data.disable_specific.split(\", \");\n                        disable_specific_string.forEach(function(date) {\n                            tour_date_options.disable.push(date);\n                        });\n                    }\n                }\n            }\n        }\n        \n        // remove empty attributes from tour_date_options object\n        // tour_date_options = Object.fromEntries(Object.entries(tour_date_options).filter(([_, v]) => v != '' ));\n\n        if(tf_params.tour_form_data.tf_tour_selected_template === 'design-1') {\n            $(\".tours-check-in-out\").flatpickr(tour_date_options);\n\n            $(\"select[name='check-in-time']\").on(\"change\", function () {\n                var selectedTime = $(this).val();\n                $(\"select[name='check-in-time']\").not(this).val(selectedTime);\n            });\n\n            $(\".acr-select input[type='number']\").on(\"change\", function () {\n                var inputName = $(this).attr(\"name\");\n                var selectedValue = $(this).val();\n\n                // Update all inputs with the same name\n                $(\".acr-select input[type='number'][name='\" + inputName + \"']\").val(selectedValue)\n            });\n        }\n\n        if(tf_params.tour_form_data.tf_tour_selected_template === 'design-2') {\n            $(\".tours-check-in-out\").flatpickr(tour_date_options);\n\n            function dateSetToFields(selectedDates, instance) {\n                if (selectedDates.length === 1) {\n                    const monthNames = [\n                        \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                        \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n                    ];\n                    if(selectedDates[0]){\n                        const startDate = selectedDates[0];\n                        $(\".tf-template-3 .tf-bottom-booking-bar .tf-booking-form-checkinout span.tf-booking-date\").html(startDate.getDate());\n                        $(\".tf-template-3 .tf-bottom-booking-bar .tf-booking-form-checkinout span.tf-booking-month span\").html(monthNames[startDate.getMonth()]);\n                    }\n                }\n                if (selectedDates.length === 2) {\n                    const monthNames = [\n                        \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                        \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n                    ];\n                    if(selectedDates[0]){\n                        const startDate = selectedDates[0];\n                        $(\".tf-template-3 .tf-bottom-booking-bar .tf-booking-form-checkinout  span.tf-booking-date\").html(startDate.getDate());\n                        $(\".tf-template-3 .tf-bottom-booking-bar .tf-booking-form-checkinout span.tf-booking-month span\").html(monthNames[startDate.getMonth()]);\n                    }\n                    if(selectedDates[1]){\n                        const endDate = selectedDates[1];\n                        $(\".tf-template-3 .tf-bottom-booking-bar .tf-booking-form-checkinout  span.tf-booking-date\").html(endDate.getDate());\n                        $(\".tf-template-3 .tf-bottom-booking-bar .tf-booking-form-checkinout span.tf-booking-month span\").html(monthNames[endDate.getMonth()]);\n                    }\n                }\n            }\n\n            $(\"select[name='check-in-time']\").on(\"change\", function () {\n                var selectedTime = $(this).val();\n                $(\"select[name='check-in-time']\").not(this).val(selectedTime);\n            });\n\n            $(\".acr-select input[type='tel']\").on(\"change\", function () {\n                var inputName = $(this).attr(\"name\");\n                var selectedValue = $(this).val();\n\n                // Update all inputs with the same name\n                $(\".acr-select input[type='tel'][name='\" + inputName + \"']\").val(selectedValue)\n            });\n        }\n\n        if(tf_params.tour_form_data.tf_tour_selected_template === 'default') {\n            $(\"#check-in-out-date\").flatpickr(tour_date_options);\n        }\n\n        $(document).on('click', \"#tour-deposit > div > div.tf_button_group > button\", function (e) {\n            e.preventDefault();\n            var form = $(document).find('form.tf_tours_booking');\n            var has_deposit = $(this).data('deposit');\n            if (has_deposit === true) {\n                form.find('input[name=\"deposit\"]').val(1);\n            } else {\n                form.find('input[name=\"deposit\"]').val(0);\n            }\n            form.submit();\n        });\n\n    });\n\n})(jQuery, window);\n\n//# sourceURL=webpack://tourfic/./sass/app/js/free/tour.js?");

/***/ }),

/***/ "./sass/app/js/free/tourfic.js":
/*!*************************************!*\
  !*** ./sass/app/js/free/tourfic.js ***!
  \*************************************/
/***/ (() => {

eval("(function ($, win) {\n    $(document).ready(function () {\n\n        // Create an instance of Notyf\n        const notyf = new Notyf({\n            ripple: true,\n            duration: 3000,\n            dismissable: true,\n            position: {\n                x: 'right',\n                y: 'bottom',\n            },\n        });\n\n        /**\n         * Scroll to Review Section\n         */\n        $(\".tf-top-review a\").on(\"click\", function () {\n            $('html, body').animate({\n                scrollTop: $(\"#tf-review\").offset().top - 32\n            }, 1000);\n        });\n\n        /**\n         * Scroll to Map Section\n         */\n        $(\".tf-map-link a\").on(\"click\", function () {\n            $('html, body').animate({\n                scrollTop: $(\"#tour-map\").offset().top - 32\n            }, 1000);\n        });\n\n        /**\n         * Ajax Search Result\n         *\n         * by search form submit\n         *\n         * by feature filter\n         */\n\n        var filter_xhr;\n        // Creating a function for reuse this filter in any where we needs.\n        const makeFilter = () => {\n            var dest = $('#tf-place').val();\n            var adults = $('#adults').val();\n            var room = $('#room').val();\n            var children = $('#children').val();\n            var infant = $('#infant').val();\n            var checked = $('#check-in-out-date').val();\n            var startprice = $('.widget_tf_price_filters input[name=\"from\"]').val();\n            var endprice = $('.widget_tf_price_filters input[name=\"to\"]').val();\n            var tf_author = $('#tf_author').val();\n            // split date range into dates\n            var checkedArr = checked.split(' - ');\n            var checkin = checkedArr[0];\n            var checkout = checkedArr[1];\n            var posttype = $('.tf-post-type').val();\n\n            if ($.trim(checkin) === '' && tf_params.date_hotel_search && posttype === 'tf_hotel') {\n\n                if ($('#tf-required').length === 0) {\n                    if($('.tf_booking-dates .tf_label-row').length === 1){\n                        $('.tf_booking-dates .tf_label-row').append('<span id=\"tf-required\" class=\"required\" style=\"color:white;\"><b>' + tf_params.field_required + '</b></span>');\n                    }else{\n                        $(\"#check-in-out-date\").trigger(\"click\");\n                    }\n                }\n                return;\n            }\n\n            if ($.trim(checkin) === '' && tf_params.date_tour_search && posttype === 'tf_tours') {\n\n                if ($('#tf-required').length === 0) {\n                    if($('.tf_booking-dates .tf_label-row').length === 1){\n                        $('.tf_booking-dates .tf_label-row').append('<span id=\"tf-required\" class=\"required\" style=\"color:white;\"><b>' + tf_params.field_required + '</b></span>');\n                    }else{\n                        $(\"#check-in-out-date\").trigger(\"click\");\n                    }\n                }\n                return;\n            }\n\n            if ($.trim(checkin) === '' && tf_params.date_apartment_search && posttype === 'tf_apartment') {\n\n                if ($('#tf-required').length === 0) {\n                    if($('.tf_booking-dates .tf_label-row').length === 1){\n                        $('.tf_booking-dates .tf_label-row').append('<span id=\"tf-required\" class=\"required\" style=\"color:white;\"><b>' + tf_params.field_required + '</b></span>');\n                    }else{\n                        $(\"#check-in-out-date\").trigger(\"click\");\n                    }\n                }\n                return;\n            }\n\n            let filters = termIdsByFeildName('tf_filters');\n            let tfHotelTypes = termIdsByFeildName('tf_hotel_types');\n            let features = termIdsByFeildName('tf_features');\n            let tour_features = termIdsByFeildName('tour_features');\n            let attractions = termIdsByFeildName('tf_attractions');\n            let activities = termIdsByFeildName('tf_activities');\n            let tfTourTypes = termIdsByFeildName('tf_tour_types');\n            let tfApartmentFeatures = termIdsByFeildName('tf_apartment_features');\n            let tfApartmentTypes = termIdsByFeildName('tf_apartment_types');\n\n            var formData = new FormData();\n            formData.append('action', 'tf_trigger_filter');\n            formData.append('_nonce', tf_params.nonce);\n            formData.append('type', posttype);\n            formData.append('dest', dest);\n            formData.append('adults', adults);\n            formData.append('room', room);\n            formData.append('children', children);\n            formData.append('infant', infant);\n            formData.append('checkin', checkin);\n            formData.append('checkout', checkout);\n            formData.append('filters', filters);\n            formData.append('features', features);\n            formData.append('tf_hotel_types', tfHotelTypes);\n            formData.append('tour_features', tour_features);\n            formData.append('attractions', attractions);\n            formData.append('activities', activities);\n            formData.append('tf_tour_types', tfTourTypes);\n            formData.append('tf_apartment_features', tfApartmentFeatures);\n            formData.append('tf_apartment_types', tfApartmentTypes);\n            formData.append('checked', checked);\n            if (startprice) {\n                formData.append('startprice', startprice);\n            }\n            if (endprice) {\n                formData.append('endprice', endprice);\n            }\n            if (tf_author) {\n                formData.append('tf_author', tf_author);\n            }\n            // abort previous request\n            if (filter_xhr && filter_xhr.readyState != 4) {\n                filter_xhr.abort();\n            }\n\n\n            //var pagination_url = '/?place=' + dest + '&adults=' + adults + '&children=' + children + '&type=' + posttype;\n            //formData.append('pagination_url', pagination_url);\n            filter_xhr = $.ajax({\n                type: 'post',\n                url: tf_params.ajax_url,\n                data: formData,\n                processData: false,\n                contentType: false,\n                beforeSend: function (data) {\n                    $('.archive_ajax_result').block({\n                        message: null,\n                        overlayCSS: {\n                            background: \"#fff\",\n                            opacity: .5\n                        }\n                    });\n                    $('#tf_ajax_searchresult_loader').show();\n                    if ($.trim(checkin) !== '') {\n                        $('.tf_booking-dates .tf_label-row').find('#tf-required').remove();\n                    }\n                },\n                complete: function (data) {\n                    $('.archive_ajax_result').unblock();\n                    $('#tf_ajax_searchresult_loader').hide();\n\n                    // total posts 0 if not found by @hena\n                    if ($('.tf-nothing-found')[0]) {\n                        $('.tf_posts_navigation').hide();\n                        var foundPosts = $('.tf-nothing-found').data('post-count');\n                        $('.tf-total-results').find('span').html(foundPosts);\n                    } else {\n                        $('.tf_posts_navigation').show();\n                        var postsCount = $('.tf-posts-count').html();\n                        $('.tf-total-results').find('span').html(postsCount);\n                    }\n\n                },\n                success: function (data, e) {\n                    $('.archive_ajax_result').unblock();\n                    $('#tf_ajax_searchresult_loader').hide();\n                    $('.archive_ajax_result').html(data);\n                    // Filter Popup Removed\n                    if ($('.tf-details-right').length > 0) {\n                        $('.tf-details-right').removeClass('tf-filter-show');\n                    }\n                    // @KK show notice in every success request\n                    notyf.success(tf_params.ajax_result_success);\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n\n            });\n        };\n\n        // Search Result Ajax page number\n        function tf_page_pagination_number(element) {\n            element.find('span').remove();\n            return parseInt(element.html());\n        }\n\n        // Search Result Ajax pagination\n        $(document).on('click', '.tf_posts_ajax_navigation a.page-numbers', function (e) {\n            e.preventDefault();\n            page = tf_page_pagination_number($(this).clone());\n            paginationMakeFilter(page);\n        });\n\n        // Creating a function for reuse this filter in any where we needs.\n        const paginationMakeFilter = (page) => {\n            var dest = $('#tf-place').val();\n            var page = page;\n            var adults = $('#adults').val();\n            var room = $('#room').val();\n            var children = $('#children').val();\n            var checked = $('#check-in-out-date').val();\n            var startprice = $('.widget_tf_price_filters input[name=\"from\"]').val();\n            var endprice = $('.widget_tf_price_filters input[name=\"to\"]').val();\n            var tf_author = $('#tf_author').val();\n            // split date range into dates\n            var checkedArr = checked.split(' - ');\n            var checkin = checkedArr[0];\n            var checkout = checkedArr[1];\n            var posttype = $('.tf-post-type').val();\n\n            let filters = termIdsByFeildName('tf_filters');\n            let tfHotelTypes = termIdsByFeildName('tf_hotel_types');\n            let features = termIdsByFeildName('tf_features');\n            let tour_features = termIdsByFeildName('tour_features');\n            let attractions = termIdsByFeildName('tf_attractions');\n            let activities = termIdsByFeildName('tf_activities');\n            let tfTourTypes = termIdsByFeildName('tf_tour_types');\n            let tfApartmentFeatures = termIdsByFeildName('tf_apartment_features');\n            let tfApartmentTypes = termIdsByFeildName('tf_apartment_types');\n\n            var formData = new FormData();\n            formData.append('action', 'tf_trigger_filter');\n            formData.append('_nonce', tf_params.nonce);\n            formData.append('type', posttype);\n            formData.append('page', page);\n            formData.append('dest', dest);\n            formData.append('adults', adults);\n            formData.append('room', room);\n            formData.append('children', children);\n            formData.append('checkin', checkin);\n            formData.append('checkout', checkout);\n            formData.append('filters', filters);\n            formData.append('tf_hotel_types', tfHotelTypes);\n            formData.append('features', features);\n            formData.append('tour_features', tour_features);\n            formData.append('attractions', attractions);\n            formData.append('activities', activities);\n            formData.append('tf_tour_types', tfTourTypes);\n            formData.append('tf_apartment_features', tfApartmentFeatures);\n            formData.append('tf_apartment_types', tfApartmentTypes);\n            formData.append('checked', checked);\n            if (startprice) {\n                formData.append('startprice', startprice);\n            }\n            if (endprice) {\n                formData.append('endprice', endprice);\n            }\n            if (tf_author) {\n                formData.append('tf_author', tf_author);\n            }\n            // abort previous request\n            if (filter_xhr && filter_xhr.readyState != 4) {\n                filter_xhr.abort();\n            }\n\n            filter_xhr = $.ajax({\n                type: 'post',\n                url: tf_params.ajax_url,\n                data: formData,\n                processData: false,\n                contentType: false,\n                beforeSend: function (data) {\n                    $('.archive_ajax_result').block({\n                        message: null,\n                        overlayCSS: {\n                            background: \"#fff\",\n                            opacity: .5\n                        }\n                    });\n\n                    if ($.trim(checkin) !== '') {\n                        $('.tf_booking-dates .tf_label-row').find('#tf-required').remove();\n                    }\n                },\n                complete: function (data) {\n                    $('.archive_ajax_result').unblock();\n\n                    // total posts 0 if not found by @hena\n                    if ($('.tf-nothing-found')[0]) {\n                        $('.tf_posts_navigation').hide();\n                        var foundPosts = $('.tf-nothing-found').data('post-count');\n                        $('.tf-total-results').find('span').html(foundPosts);\n                    } else {\n                        $('.tf_posts_navigation').show();\n                        var postsCount = $('.tf-posts-count').html();\n                        $('.tf-total-results').find('span').html(postsCount);\n                    }\n\n                },\n                success: function (data, e) {\n                    $('.archive_ajax_result').unblock();\n                    $('.archive_ajax_result').html(data);\n                    // @KK show notice in every success request\n                    notyf.success(tf_params.ajax_result_success);\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n\n            });\n        };\n\n        // Look for submission and change on filter widgets\n        $(document).on('submit', '#tf-widget-booking-search', function (e) {\n            e.preventDefault();\n            makeFilter()\n        });\n        $(document).on('change', '[name*=tf_filters],[name*=tf_hotel_types],[name*=tf_features],[name*=tour_features],[name*=tf_attractions],[name*=tf_activities],[name*=tf_tour_types],[name*=tf_apartment_features],[name*=tf_apartment_types]', function () {\n            if($(\".filter-reset-btn\").length>0){\n                $(\".filter-reset-btn\").show();\n            }\n            makeFilter();\n        })\n\n        // Archive Page Filter\n        $(document).on('submit', '.tf_archive_search_result', function (e) {\n            e.preventDefault();\n            makeFilter()\n        });\n\n        // Archive Page Filter Reset\n        $(document).on('click', '.filter-reset-btn', function (e) {\n            e.preventDefault();\n            $('[name*=tf_filters],[name*=tf_hotel_types],[name*=tf_features],[name*=tour_features],[name*=tf_attractions],[name*=tf_activities],[name*=tf_tour_types],[name*=tf_apartment_features],[name*=tf_apartment_types]').prop('checked', false);\n            makeFilter();\n            $(\".filter-reset-btn\").hide();\n        });\n\n        /*\n        * Get term ids by field name\n        * @auther Foysal\n        */\n        const termIdsByFeildName = (fieldName) => {\n            let termIds = [];\n            $(`[name*=${fieldName}]`).each(function () {\n                if ($(this).is(':checked')) {\n                    termIds.push($(this).val());\n                }\n            });\n            return termIds.join();\n        }\n\n        /**\n         * Rating bar\n         */\n        $.fn.inViewport = function (cb) {\n            return this.each(function (i, el) {\n                function visPx() {\n                    var H = $(this).height(),\n                        r = el.getBoundingClientRect(), t = r.top, b = r.bottom;\n                    return cb.call(el, Math.max(0, t > 0 ? H - t : (b < H ? b : H)));\n                }\n\n                visPx();\n                $(win).on(\"resize scroll\", visPx);\n            });\n        };\n\n        $(window).on(\"load\", function () {\n            // Trigger Animation\n            jQuery('[data-width]').each(function () {\n                var $this = jQuery(this);\n                var width = $this.attr('data-width');\n\n                $this.inViewport(function (px) {\n                    if (px > 0) {\n                        $this.css('width', +width + '%');\n                    } else {\n                        $this.css('width', '0%');\n                    }\n                });\n            });\n        });\n\n        /**\n         * Full Width JS\n         */\n        function fullwidthInit(selector) {\n            function fullWidth(selector) {\n                $(selector).each(function () {\n                    $(this).width(\"100%\").css({ marginLeft: \"-0px\" });\n\n                    var window_width = $(window).width();\n\n                    var left_margin = \"-\" + $(this).offset().left + \"px\";\n\n                    $(this).width(window_width).css({ marginLeft: left_margin });\n                });\n            }\n\n            $(window).on(\"resize load\", function () {\n                fullWidth(selector);\n            });\n        }\n\n        /**\n         * Share buttons\n         */\n        // Toggle share buttons\n        $('.share-toggle[data-toggle=\"true\"]').on(\"click\", function (e) {\n            e.preventDefault();\n            var target = $(this).attr('href');\n            $(target).slideToggle('fast');\n        });\n\n        // Copy button\n        $('button#share_link_button').on(\"click\", function () {\n\n            $(this).addClass('copied');\n            setTimeout(function () {\n                $('button#share_link_button').removeClass('copied');\n            }, 3000);\n            $(this).parent().find(\"#share_link_input\").select();\n            document.execCommand(\"copy\");\n        });\n\n\n        /**\n         * Related Tour\n         *\n         * Slick\n         */\n        $('.tf-slider-items-wrapper,.tf-slider-activated').slick({\n            dots: true,\n            arrows: false,\n            infinite: true,\n            speed: 300,\n            //autoplay: true,\n            autoplaySpeed: 2000,\n            slidesToShow: 3,\n            slidesToScroll: 1,\n            responsive: [\n                {\n                    breakpoint: 1024,\n                    settings: {\n                        slidesToShow: 3,\n                        slidesToScroll: 1,\n                        infinite: true,\n                        dots: true\n                    }\n                },\n                {\n                    breakpoint: 600,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1\n                    }\n                },\n                {\n                    breakpoint: 480,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1\n                    }\n                }\n            ]\n        });\n\n        // Design 3 related tour\n        $('.tf-design-3-slider-items-wrapper').slick({\n            dots: false,\n            arrows: true,\n            infinite: true,\n            speed: 300,\n            autoplaySpeed: 2000,\n            slidesToShow: 3,\n            slidesToScroll: 1,\n            responsive: [\n                {\n                    breakpoint: 1024,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1,\n                        infinite: true,\n                        dots: false\n                    }\n                },\n                {\n                    breakpoint: 600,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1\n                    }\n                },\n                {\n                    breakpoint: 480,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1\n                    }\n                }\n            ]\n        });\n\n        /**\n         * Customer Reviews\n         *\n         * Slick\n         */\n        $('.tf-review-items-wrapper').slick({\n            dots: true,\n            arrows: false,\n            infinite: true,\n            speed: 300,\n            autoplay: true,\n            autoplaySpeed: 2000,\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            responsive: [\n                {\n                    breakpoint: 1024,\n                    settings: {\n                        slidesToShow: 4,\n                        slidesToScroll: 1,\n                        infinite: true,\n                        dots: true\n                    }\n                },\n                {\n                    breakpoint: 600,\n                    settings: {\n                        slidesToShow: 3,\n                        slidesToScroll: 1\n                    }\n                },\n                {\n                    breakpoint: 480,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 1\n                    }\n                }\n            ]\n        });\n\n        /**\n         * Wishlist Functionality\n         */\n        /* get wishlist from localstorage  */\n        const wishKey = 'wishlist_item';\n        const getWish = () => {\n            let userLists = localStorage.getItem(wishKey);\n            // if list is null then init list else make array from json string\n            return (userLists === null) ? [] : JSON.parse(userLists);\n        }\n\n        /* store item in wishlist for loggedin and visitor */\n        const addWish = item => {\n            let userLists = getWish()\n            // Look if item is not already is in list\n            if (userLists.filter(i => i.post == item.post).length === 0) {\n                // push to list\n                userLists.push(item)\n                // save list\n                localStorage.setItem(wishKey, JSON.stringify(userLists));\n                return true;\n            }\n            return false;\n        }\n        /* get all wishlist items */\n        const getAllWish = () => {\n            let nodes = $('.tf-wishlist-holder');\n            $.each(nodes, function (index, element) {\n                let type = $(element).data('type');\n                type = type ? type.split(',') : undefined;\n                let userLists = getWish();\n                if (type !== undefined) userLists = userLists.filter(e => type.includes(e.type));\n                let ids = userLists.map(e => e.post);\n                let data = {\n                    nonce: $(element).data('nonce'),\n                    action: 'tf_generate_table',\n                    ids\n                }\n                $.post(tf_params.ajax_url, data,\n                    function (data) {\n                        if (data.success) {\n                            $(element).html(data.data);\n                        }\n                    },\n                );\n            });\n\n\n        }\n        /* delete item from wishlist */\n        const removeWish = id => {\n            let userLists = getWish()\n            let index = userLists.findIndex(x => x.post == id);\n\n            if (index >= 0) {\n                userLists.splice(index, 1)\n                localStorage.setItem(wishKey, JSON.stringify(userLists));\n                if (tf_params.single != '1') getAllWish()\n                return true;\n            } else return false;\n\n        }\n\n        /* toggle icon for the wish list */\n        const wishIconToggleForGuest = () => {\n            if (!$(document).hasClass('logged-in') && $(document).find('.add-wishlist')) {\n                let targetNode = $('.add-wishlist');\n                let id = targetNode.data('id');\n                let userLists = getWish()\n                var index = userLists.findIndex(x => x.post == id);\n                if (index >= 0) {\n                    wishIconFill(targetNode);\n                } else {\n                    wishIcon(targetNode);\n                }\n            }\n        }\n\n        /* fill icon class */\n        const wishIconFill = targetNode => {\n            targetNode.addClass('remove-wishlist');\n            targetNode.addClass('fa-heart');\n            targetNode.addClass('tf-text-red');\n            targetNode.removeClass('fa-heart-o');\n            targetNode.removeClass('add-wishlist');\n\n\n        }\n        /* blank icon */\n        const wishIcon = targetNode => {\n            targetNode.addClass('add-wishlist');\n            targetNode.addClass('fa-heart-o');\n            targetNode.removeClass('fa-heart');\n            targetNode.removeClass('tf-text-red');\n            targetNode.removeClass('remove-wishlist');\n        }\n        /* send request to wp-admin for storing request */\n        $(document).on('click', '.add-wishlist', function () {\n\n            let targetNode = $('.add-wishlist');\n            let data = {\n                type: targetNode.data('type'),\n                post: targetNode.data('id'),\n            }\n            let wishPageTitle = targetNode.data('page-title');\n            let wishPageUrl = targetNode.data('page-url');\n            let wishlistpage = wishPageUrl !== undefined ? '<a class=\"wish-button\" href=\"' + wishPageUrl + '\">' + wishPageTitle + '</a>' : '';\n\n            /* For logged in user */\n            if ($('body').hasClass('logged-in')) {\n                data.action = 'tf_add_to_wishlists';\n                data.nonce = targetNode.data('nonce');\n                $.ajax({\n                    type: \"post\",\n                    url: tf_params.ajax_url,\n                    data: data,\n                    beforeSend: function (data) {\n                        notyf.success(tf_params.wishlist_add)\n                    },\n                    success: function (response) {\n                        if (response.success) {\n                            wishIconFill(targetNode);\n                            notyf.success({\n                                message: response.data,\n                                duration: 4e3\n                            });\n                        }\n                    }\n                });\n\n            } else {\n                /* For guest */\n                if (addWish(data) === true) {\n                    notyf.success(tf_params.wishlist_add)\n                    wishIconFill(targetNode);\n                    notyf.success({\n                        message: tf_params.wishlist_added,\n                        duration: 4e3\n                    });\n                } else notyf.error(tf_params.wishlist_add_error);\n\n            }\n\n            return false;\n\n        });\n        /* populate wishlist table */\n        if ($('body').find('.tf-wishlist-holder').length) {\n            getAllWish()\n        }\n        /* trigger remove wish function */\n        $(document).on('click', '.remove-wishlist', function () {\n            let targetNode = $('.remove-wishlist');\n            let id = targetNode.data('id');\n            /* For logged in user */\n            if ($('body').hasClass('logged-in')) {\n                let tableNode = targetNode.closest('table');\n                let type = tableNode.data('type');\n                let data = { id, action: 'tf_remove_wishlist', type, nonce: targetNode.data('nonce') }\n                $.get(tf_params.ajax_url, data,\n                    function (data) {\n                        if (data.success) {\n                            if (tf_params.single != '1') {\n                                tableNode.closest('.tf-wishlists').html(data.data);\n                            }\n                            wishIcon(targetNode);\n                            notyf.success(tf_params.wishlist_removed);\n                        }\n                    }\n                );\n\n            } else {\n                /* For guest */\n                if (removeWish(id) == true) {\n                    wishIcon(targetNode);\n                    notyf.success(tf_params.wishlist_removed);\n                } else {\n                    notyf.error(tf_params.wishlist_remove_error);\n                }\n            }\n\n        });\n\n        /* toggle icon for guest */\n        wishIconToggleForGuest();\n\n        /*\n        * Trourfic autocomplete destination\n        */\n        function tourfic_autocomplete(inp, arr) {\n            /*the autocomplete function takes two arguments,\n            the text field element and an array of possible autocompleted values:*/\n\n            // Executes when some one click in the search form location\n            inp.addEventListener(\"focus\", function () {\n                if (this.value == '' || !this.value) {\n                    // alert(\"Working....\")\n                    let a = document.createElement(\"DIV\");\n                    a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n                    a.classList.add(\"autocomplete-items\")\n                    this.parentNode.appendChild(a);\n                    for (const [key, value] of Object.entries(arr)) {\n                        let b = document.createElement(\"DIV\");\n                        b.innerHTML = value;\n                        b.innerHTML += `<input type='hidden' value=\"${value}\" data-slug='${key}'>`;\n                        b.addEventListener(\"click\", function (e) {\n                            let source = this.getElementsByTagName(\"input\")[0];\n                            inp.value = source.value;\n                            inp.closest('input').nextElementSibling.value = source.dataset.slug\n                        });\n                        a.appendChild(b);\n                    }\n                }\n            })\n\n            var currentFocus;\n            /*execute a function when someone writes in the text field:*/\n            inp.addEventListener(\"keyup\", function (e) {\n                var a, b, i, val = this.value;\n                /*close any already open lists of autocompleted values*/\n                closeAllLists();\n                currentFocus = -1;\n                /*create a DIV element that will contain the items (values):*/\n                a = document.createElement(\"DIV\");\n                a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n                a.setAttribute(\"class\", \"autocomplete-items\");\n                /*append the DIV element as a child of the autocomplete container:*/\n                this.parentNode.appendChild(a);\n                var $notfound = [];\n                /*for each item in the array...*/\n                for (const [key, value] of Object.entries(arr)) {\n                    if (value.substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n                        $notfound.push('found');\n                        /*create a DIV element for each matching element:*/\n                        b = document.createElement(\"DIV\");\n                        /*make the matching letters bold:*/\n                        b.innerHTML = \"<strong>\" + value.substr(0, val.length) + \"</strong>\";\n                        b.innerHTML += value.substr(val.length);\n                        /*insert a input field that will hold the current array item's value:*/\n                        b.innerHTML += `<input type='hidden' value=\"${value}\" data-slug='${key}'> `;\n                        /*execute a function when someone clicks on the item value (DIV element):*/\n                        b.addEventListener(\"click\", function (e) {\n                            let source = this.getElementsByTagName(\"input\")[0];\n                            /*insert the value for the autocomplete text field:*/\n                            inp.value = source.value;\n                            inp.closest('input').nextElementSibling.value = source.dataset.slug //source.dataset.slug\n                            /*close the list of autocompleted values,\n                            (or any other open lists of autocompleted values:*/\n                            closeAllLists();\n                        });\n                        a.appendChild(b);\n\n                    } else {\n                        $notfound.push('notfound');\n                    }\n                }\n\n                if ($notfound.indexOf('found') == -1) {\n                    /*create a DIV element for each matching element:*/\n                    b = document.createElement(\"DIV\");\n                    /*make the matching letters bold:*/\n\n                    b.innerHTML += tf_params.no_found;\n                    /*insert a input field that will hold the current array item's value:*/\n                    b.innerHTML += \"<input type='hidden' value=''>\";\n                    /*execute a function when someone clicks on the item value (DIV element):*/\n                    b.addEventListener(\"click\", function (e) {\n                        /*insert the value for the autocomplete text field:*/\n                        inp.value = this.getElementsByTagName(\"input\")[0].value;\n                        /*close the list of autocompleted values,\n                        (or any other open lists of autocompleted values:*/\n                        closeAllLists();\n                    });\n                    a.appendChild(b);\n                }\n            });\n            /*execute a function presses a key on the keyboard:*/\n            inp.addEventListener(\"keydown\", function (e) {\n                var x = document.getElementById(this.id + \"autocomplete-list\");\n                if (x) x = x.getElementsByTagName(\"div\");\n                if (e.keyCode == 40) {\n                    /*If the arrow DOWN key is pressed,\n                    increase the currentFocus variable:*/\n                    currentFocus++;\n                    /*and and make the current item more visible:*/\n                    addActive(x);\n                } else if (e.keyCode == 38) { //up\n                    /*If the arrow UP key is pressed,\n                    decrease the currentFocus variable:*/\n                    currentFocus--;\n                    /*and and make the current item more visible:*/\n                    addActive(x);\n                } else if (e.keyCode == 13) {\n                    /*If the ENTER key is pressed, prevent the form from being submitted,*/\n                    e.preventDefault();\n                    if (currentFocus > -1) {\n                        /*and simulate a click on the \"active\" item:*/\n                        if (x) x[currentFocus].trigger(\"click\");\n                    }\n                }\n            });\n\n            function addActive(x) {\n                /*a function to classify an item as \"active\":*/\n                if (!x) return false;\n                /*start by removing the \"active\" class on all items:*/\n                removeActive(x);\n                if (currentFocus >= x.length) currentFocus = 0;\n                if (currentFocus < 0) currentFocus = (x.length - 1);\n                /*add class \"autocomplete-active\":*/\n                x[currentFocus].classList.add(\"autocomplete-active\");\n            }\n\n            function removeActive(x) {\n                /*a function to remove the \"active\" class from all autocomplete items:*/\n                for (var i = 0; i < x.length; i++) {\n                    x[i].classList.remove(\"autocomplete-active\");\n                }\n            }\n\n            function closeAllLists(elmnt) {\n                /*close all autocomplete lists in the document,\n                except the one passed as an argument:*/\n                var x = document.getElementsByClassName(\"autocomplete-items\");\n                for (var i = 0; i < x.length; i++) {\n                    if (elmnt != x[i] && elmnt != inp) {\n                        x[i].parentNode.removeChild(x[i]);\n                    }\n                }\n            }\n\n            /*execute a function when someone clicks in the document:*/\n            document.addEventListener(\"click\", function (e) {\n                // closeAllLists(e.target);\n                if (e.target.id == \"content\" || e.target.id == \"\") {\n                    closeAllLists(e.target);\n                }\n            });\n        }\n\n        /**\n         * Open/close horizontal search form persons panel\n         */\n        // Adult, Child, Room Selection toggle\n        $(document).on('click', '.tf_selectperson-wrap .tf_input-inner,.tf_person-selection-wrap .tf_person-selection-inner', function () {\n            $('.tf_acrselection-wrap').slideToggle('fast');\n        });\n        // Close\n        jQuery(document).on(\"click\", function (event) {\n            if (!jQuery(event.target).closest(\".tf_selectperson-wrap\").length) {\n                jQuery(\".tf_acrselection-wrap\").slideUp(\"fast\");\n            }\n        });\n\n        /**\n         * Number/text change horizontal search form\n         */\n        // Number Increment\n        $('.acr-inc, .quanity-acr-inc').on('click', function (e) {\n            var input = $(this).parent().find('input');\n            var max = input.attr('max') ? input.attr('max') : 999;\n            var step = input.attr('step') ? input.attr('step') : 1;\n            if(!input.val()){\n                input.val(0);\n            }\n            if (input.val() < max) {\n                input.val(parseInt(input.val()) + parseInt(step)).change();\n            }\n            // input focus disable\n            input.blur();\n        });\n\n        // Number Decrement\n        $('.acr-dec, .quanity-acr-dec').on('click', function (e) {\n\n            var input = $(this).parent().find('input');\n            var min = input.attr('min') ? input.attr('min') : 0;\n            var step = input.attr('step') ? input.attr('step') : 1;\n            if(!input.val()){\n                input.val(0);\n            }\n            if (input.val() > min) {\n                input.val(input.val() - parseInt(step)).change();\n            }\n        });\n\n        // Adults change trigger\n        $(document).on('change', '#adults', function () {\n            let thisEml = $(this);\n            let thisVal = thisEml.val();\n\n            if (thisVal > 1) {\n                $('.tf_selectperson-wrap').find('.adults-text').text(thisVal + \" \" + tf_params.adult + 's');\n            } else {\n                $('.tf_selectperson-wrap').find('.adults-text').text(thisVal + \" \" + tf_params.adult);\n            }\n\n        });\n\n        // Children change trigger\n        $(document).on('change', '#children', function () {\n            let thisEml = $(this);\n            let thisVal = thisEml.val();\n\n            if (thisVal > 1) {\n                $('.tf_selectperson-wrap').find('.child-text').text(thisVal + \" \" + tf_params.children);\n            } else {\n                $('.tf_selectperson-wrap').find('.child-text').text(thisVal + \" \" + tf_params.children);\n            }\n\n        });\n\n        // Infant change trigger\n        $(document).on('change', '#infant', function () {\n            let thisEml = $(this);\n            let thisVal = thisEml.val();\n\n            if (thisVal > 1) {\n                $('.tf_selectperson-wrap').find('.infant-text').text(thisVal + \" \" + tf_params.infant);\n            } else {\n                $('.tf_selectperson-wrap').find('.infant-text').text(thisVal + \" \" + tf_params.infant);\n            }\n\n        });\n\n        // Shortcode Design 2 Adults change trigger\n        $(document).on('change', '.adults-style2', function () {\n            let thisEml = $(this);\n            let thisVal = thisEml.val();\n            let $this = $(this).closest('.tf_hotel-shortcode-design-2');\n            // Declare child outside the if block\n            let child = 0;\n\n            if (thisEml.parent().parent().siblings().find('.childs-style2').length > 0) {\n                child = parseInt(thisEml.parent().parent().siblings().find('.childs-style2').val());\n            } else {\n                child = parseInt(0);\n            }\n            // Declare intant outside the if block\n            let intant = 0;\n\n            if (thisEml.parent().parent().siblings().find('.infant-style2').length > 0) {\n                intant = parseInt(thisEml.parent().parent().siblings().find('.childs-style2').val());\n            } else {\n                intant = parseInt(0);\n            }\n            let total_people = child + intant + parseInt(thisVal);\n            if (total_people > 1) {\n                $this.find(\".tf_guest_number .guest\").text(total_people);\n            }\n        });\n        // Shortcode Design 2 Childs change trigger\n        $(document).on('change', '.childs-style2', function () {\n            let thisEml = $(this);\n            let thisVal = thisEml.val();\n            let $this = $(this).closest('.tf_hotel-shortcode-design-2');\n\n             // Declare adults outside the if block\n             let adults = 0;\n\n             if (thisEml.parent().parent().siblings().find('.adults-style2').length > 0) {\n                adults = parseInt(thisEml.parent().parent().siblings().find('.adults-style2').val());\n             } else {\n                adults = parseInt(0);\n             }\n             // Declare intant outside the if block\n             let intant = 0;\n\n             if (thisEml.parent().parent().siblings().find('.infant-style2').length > 0) {\n                 intant = parseInt(thisEml.parent().parent().siblings().find('.infant-style2').val());\n             } else {\n                 intant = parseInt(0);\n             }\n\n            let total_people = adults + intant + parseInt(thisVal);\n            if (total_people > 1) {\n                $this.find(\".tf_guest_number .guest\").text(total_people);\n            }\n        });\n        // Shortcode Design 2 Infants change trigger\n        $(document).on('change', '.infant-style2', function () {\n            let thisEml = $(this);\n            let thisVal = thisEml.val();\n            let $this = $(this).closest('.tf_hotel-shortcode-design-2');\n\n            // Declare adults outside the if block\n            let adults = 0;\n\n            if (thisEml.parent().parent().siblings().find('.adults-style2').length > 0) {\n               adults = parseInt(thisEml.parent().parent().siblings().find('.adults-style2').val());\n            } else {\n               adults = parseInt(0);\n            }\n\n            // Declare child outside the if block\n            let child = 0;\n\n            if (thisEml.parent().parent().siblings().find('.childs-style2').length > 0) {\n                child = parseInt(thisEml.parent().parent().siblings().find('.childs-style2').val());\n            } else {\n                child = parseInt(0);\n            }\n\n            let total_people = adults + child + parseInt(thisVal);\n            if (total_people > 1) {\n                $this.find(\".tf_guest_number .guest\").text(total_people);\n            }\n        });\n\n        // Room change trigger\n        $(document).on('change', '#room', function () {\n            let thisEml = $(this);\n            let thisVal = thisEml.val();\n\n            if (thisVal > 1) {\n                thisEml.closest('.tf_selectperson-wrap').find('.room-text').text(thisVal + \" \" + tf_params.room);\n            } else {\n                thisEml.closest('.tf_selectperson-wrap').find('.room-text').text(thisVal + \" \" + tf_params.room);\n            }\n        });\n\n        // Shortcode Design 2 Room change trigger\n        $(document).on('change', '.rooms-style2', function () {\n            let thisEml = $(this);\n            let thisVal = thisEml.val();\n            let total_room = parseInt(thisVal);\n            if (total_room > 1) {\n                $(\".tf_hotel-shortcode-design-2 .tf_guest_number .room\").text(total_room);\n            }\n        });\n\n        /**\n         * Review submit form toggle\n         */\n        $(document).on('click', '#reply-title', function () {\n            var $this = $(this);\n            $('#commentform').slideToggle('fast', 'swing', function () {\n                $this.parent().toggleClass('active');\n            });\n        });\n\n        /**\n         * Ask question\n         */\n        $(document).on('click', '#tf-ask-question-trigger', function (e) {\n            e.preventDefault();\n            $('#tf-ask-question').fadeIn().find('.response').html(\"\");\n            if( ! $('#tf-ask-question').is(\":hidden\")) {\n                $('body').css({ \"overflow\" : \"hidden\", \"padding-right\": \"17px\"})\n            }\n        });\n\n        // Close Ask question\n        $(document).on('click', 'span.close-aq', function () {\n            $('#tf-ask-question').fadeOut();\n            $('body').removeAttr(\"style\")\n        });\n\n        // Close Ask question when Clicking the outside\n        $(document).on(\"click\", \".tf-aq-overlay\", function() {\n            $('#tf-ask-question').fadeOut();\n            $('body').removeAttr(\"style\")\n        })\n\n        // Ajax Ask question submit\n        $(document).on('submit', 'form#ask-question', function (e) {\n            e.preventDefault();\n\n            var $this = $(this);\n\n            var formData = new FormData(this);\n            formData.append('action', 'tf_ask_question');\n\n            $.ajax({\n                type: 'post',\n                url: tf_params.ajax_url,\n                data: formData,\n                processData: false,\n                contentType: false,\n                beforeSend: function (data) {\n                    $this.block({\n                        message: null,\n                        overlayCSS: {\n                            background: \"#fff\",\n                            opacity: .5\n                        }\n                    });\n\n                    $this.find('.response').html(tf_params.sending_ques);\n                },\n                complete: function (data) {\n                    $this.unblock();\n                },\n                success: function (data) {\n                    $this.unblock();\n\n                    var response = JSON.parse(data);\n\n                    if (response.status == 'sent') {\n                        $this.find('.response').html(response.msg);\n\n                        $this.find('[type=\"reset\"]').trigger('click');\n                    } else {\n                        $this.find('.response').html(response.msg);\n                    }\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n\n            });\n\n        });\n\n        /**\n         * Change archive item\n         *\n         * Grid/List\n         */\n        $(document).on('click', '.change-view', function (e) {\n            e.preventDefault();\n            $('.change-view').removeClass('active');\n            $(this).addClass('active');\n\n            var dataid = $(this).data('id');\n            if (dataid == 'grid-view') {\n                $('.archive_ajax_result').addClass('tours-grid');\n            } else {\n                $('.archive_ajax_result').removeClass('tours-grid');\n            }\n\n        });\n\n        /**\n         * Design 1 archive item\n         *\n         * Grid/List\n         */\n        $(document).on('click', '.tf-grid-list-layout', function (e) {\n            e.preventDefault();\n            $('.tf-grid-list-layout').removeClass('active');\n            $(this).addClass('active');\n\n            var dataid = $(this).data('id');\n            if (dataid == 'grid-view') {\n                $('.tf-item-cards').addClass('tf-layout-grid');\n                $('.tf-item-cards').removeClass('tf-layout-list');\n            } else {\n                $('.tf-item-cards').addClass('tf-layout-list');\n                $('.tf-item-cards').removeClass('tf-layout-grid');\n            }\n\n        });\n\n        /**\n         * ajax tour load pagination\n         */\n        var flag = false;\n        var main_xhr;\n\n        var amPushAjax = function (url) {\n            if (main_xhr && main_xhr.readyState != 4) {\n                main_xhr.abort();\n            }\n\n            main_xhr = $.ajax({\n                url: url,\n                contentType: false, // Not to set any content header\n                processData: false, // Not to process data\n                asynch: true,\n                beforeSend: function () {\n\n                    $(document).find('.tf_posts_navigation').addClass('loading');\n                    $(document).find('.archive_ajax_result').addClass('loading');\n                    flag = true;\n                },\n                success: function (data) {\n                    $('.archive_ajax_result').html($('.archive_ajax_result', data).html());\n\n                    $('.tf_posts_navigation').html($('.tf_posts_navigation', data).html());\n\n                    //document.title = $(data).filter('title').text();\n\n                    flag = false;\n\n                    $(document).find('.tf_posts_navigation').removeClass('loading');\n                    $(document).find('.archive_ajax_result').removeClass('loading');\n\n                }\n            });\n        };\n\n        // Feed Ajax Trigger\n        $(document).on('click', '.tf_posts_page_navigation a.page-numbers', function (e) {\n            e.preventDefault();\n            var targetUrl = (e.target.href) ? e.target.href : $(this).context.href;\n            amPushAjax(targetUrl);\n            window.history.pushState({ url: \"\" + targetUrl + \"\" }, \"\", targetUrl);\n        });\n        // End Feed Ajax Trigger\n\n        // Hotel and Tour Advance Search form\n\n        $(\".tf_selectdate-wrap.tf_more_info_selections .tf_input-inner\").on(\"click\", function () {\n            $('.tf-more-info').toggleClass('show');\n        });\n        $(document).on(\"click\", function (event) {\n            if (!$(event.target).closest(\".tf_selectdate-wrap.tf_more_info_selections .tf_input-inner, .tf-more-info\").length) {\n                $('.tf-more-info').removeClass('show');\n            }\n        });\n\n        // FAQ Accordion\n        $('.tf-faq-title').on(\"click\", function () {\n            var $this = $(this);\n            if (!$this.hasClass(\"active\")) {\n                $(\".tf-faq-desc\").slideUp(400);\n                $(\".tf-faq-title\").removeClass(\"active\");\n                $('.arrow').removeClass('arrow-animate');\n            }\n            $this.toggleClass(\"active\");\n            $this.next().slideToggle();\n            $('.arrow', this).toggleClass('arrow-animate');\n        });\n\n        /*\n        * New Template FAQ Accordion\n        * @author: Jahid\n        */\n        $('.tf-faq-collaps').on(\"click\", function () {\n            var $this = $(this);\n            if (!$this.hasClass(\"active\")) {\n                $(\".tf-faq-content\").slideUp(400);\n                $(\".tf-faq-collaps\").removeClass(\"active\");\n                $('.tf-faq-single').removeClass('active');\n            }\n            $this.toggleClass(\"active\");\n            $this.next().slideToggle();\n            $(this).closest('.tf-faq-single').toggleClass('active');\n        });\n\n\n\n        /*\n        * Booking Form select first tab on load\n        * @author: Foysal\n        */\n        $(window).on('load', function () {\n            if ($('.tf-tablinks').length > 0) {\n                $('.tf-tablinks').first().trigger('click').addClass('active');\n            }\n        });\n\n        // Form Tab click\n        $(document).on('click', '.tf-tablinks', function (e) {\n            let formId = $(this).data('form-id');\n            tfOpenForm(event, formId);\n        });\n\n        /*\n        * Booking Form tab mobile version\n        * @author: Foysal\n        */\n        $(document).on('change', 'select[name=\"tf-booking-form-tab-select\"]', function () {\n            var tabId = $(this).val();\n            tfOpenForm(event, tabId);\n        });\n\n        /*\n         * Location Search\n         * @author: Foysal\n         */\n        $(document).on('keyup', '.tf-hotel-side-booking #tf-location, .tf-hotel-side-booking #tf-destination', function () {\n            let search = $(this).val();\n            $(this).next('input[name=place]').val(search);\n        })\n\n\n        /**\n         * Children age field add when children added in search field\n         * @since 2.8.6\n         * @author Abu Hena\n         */\n\n        if ($('.child-age-limited')[0]) {\n            $('.acr-select .child-inc').on('click', function () {\n                var first_element = $('div[id^=\"tf-age-field-0\"]');\n                var ch_element = $('div[id^=\"tf-age-field-\"]:last');\n                if (ch_element.length != 0) {\n                    var num = parseInt(ch_element.prop(\"id\").match(/\\d+/g), 10) + 1;\n                }\n                var elements = ch_element.clone().prop('id', 'tf-age-field-' + num);\n                elements.find(\"label\").html('Child age ' + num);\n                //elements.find(\"select\").attr('name','children_'+num+'_age');\n                elements.find(\"select\").attr('name', 'children_ages[]');\n                ch_element.after(elements);\n                elements.show();\n                first_element.hide();\n\n            })\n\n            $('.acr-select .child-dec').on('click', function () {\n                var total_age_input = $('.tf-children-age').length;\n                var ch_element = $('div[id^=\"tf-age-field-\"]:last');\n                if (total_age_input != 1) {\n                    ch_element.remove();\n                }\n            })\n        }\n        var postsCount = $('.tf-posts-count').html();\n        $('.tf-total-results').find('span').html(postsCount);\n\n        //Sidebar widget js\n        $('.tf-widget-title').on('click', function () {\n            $(this).find('i').toggleClass('collapsed');\n            $(this).siblings('.tf-filter').slideToggle('medium');\n        })\n\n        /* see more checkbox filter started */\n\n        $('a.see-more').on('click', function (e) {\n            var $this = $(this);\n            e.preventDefault();\n            $this.parent('.tf-filter').find('.filter-item').filter(function (index) {\n                return index > 3;\n            }).removeClass(\"hidden\");\n            $this.hide();\n\n            $this.parent('.tf-filter').find('.see-less').show();\n        });\n\n        /* see less checkbox filter started */\n\n        $('a.see-less').on('click', function (e) {\n            var $this = $(this);\n            e.preventDefault();\n            $this.parent('.tf-filter').find('.filter-item').filter(function (index) {\n                return index > 3;\n            }).addClass(\"hidden\");\n            $this.hide();\n            $this.parent('.tf-filter').find('.see-more').show();\n        });\n\n        $('.tf-filter').each(function () {\n\n            var len = $(this).find('ul').children().length;\n            $(this).find('.see-more').hide();\n            if (len > 4) {\n                $(this).find('.see-more').show();\n            }\n            //hide items if crossed showing limit\n            $(this).find('.filter-item').filter(function (index) {\n                return index > 3;\n            }).addClass(\"hidden\");\n\n        });\n\n        /* see more checkbox filter end */\n\n        //active checkbox bg\n        $('.tf_widget input').on('click', function () {\n            $(this).parent().parent().toggleClass('active');\n        });\n\n        /**\n         * Cart item remove from checkout page\n         * @since 2.9.7\n         * @author Foysal\n         */\n        $('form.checkout').on('click', '.cart_item a.remove', function (e) {\n            e.preventDefault();\n\n            var cart_item_key = $(this).attr(\"data-cart_item_key\");\n\n            $.ajax({\n                type: 'POST',\n                url: tf_params.ajax_url,\n                data: {\n                    action: 'tf_checkout_cart_item_remove',\n                    _nonce: tf_params.nonce,\n                    cart_item_key: cart_item_key,\n                },\n                beforeSend: function () {\n                    $('body').trigger('update_checkout');\n                },\n                success: function (result) {\n                    $('body').trigger('update_checkout');\n                },\n                error: function (error) {\n\n                }\n            });\n        });\n\n        /**\n         * Hotel Min and Max Range Filtering\n         * @author Jahid\n        */\n        let tf_hotel_range_options = {\n            range: {\n                min: parseInt(tf_params.tf_hotel_min_price),\n                max: parseInt(tf_params.tf_hotel_max_price),\n                step: 1\n            },\n            initialSelectedValues: {\n                from: parseInt(tf_params.tf_hotel_min_price),\n                to: parseInt(tf_params.tf_hotel_max_price) / 2\n            },\n            grid: false,\n            theme: \"dark\",\n        };\n        if (tf_params.tf_hotel_min_price != 0 && tf_params.tf_hotel_max_price != 0) {\n            $('.tf-hotel-filter-range').alRangeSlider(tf_hotel_range_options);\n        }\n\n        // Hotel Min and Max Range in Search Result\n        var tf_search_page_params = new window.URLSearchParams(window.location.search);\n        let tf_hotel_search_range = {\n            range: {\n                min: parseInt(tf_params.tf_hotel_min_price),\n                max: parseInt(tf_params.tf_hotel_max_price),\n                step: 1\n            },\n            initialSelectedValues: {\n                from: tf_search_page_params.get('from') ? tf_search_page_params.get('from') : parseInt(tf_params.tf_hotel_min_price),\n                to: tf_search_page_params.get('to') ? tf_search_page_params.get('to') : parseInt(tf_params.tf_hotel_max_price) / 2\n            },\n            grid: false,\n            theme: \"dark\",\n            onFinish: function () {\n                makeFilter();\n            }\n        };\n        if (tf_params.tf_hotel_min_price != 0 && tf_params.tf_hotel_max_price != 0) {\n            $('.tf-hotel-result-price-range').alRangeSlider(tf_hotel_search_range);\n        }\n\n        /**\n         * Tour Min and Max Range Filtering\n         * @author Jahid\n        */\n        let tf_tour_range_options = {\n            range: {\n                min: parseInt(tf_params.tf_tour_min_price),\n                max: parseInt(tf_params.tf_tour_max_price),\n                step: 1\n            },\n            initialSelectedValues: {\n                from: parseInt(tf_params.tf_tour_min_price),\n                to: parseInt(tf_params.tf_tour_max_price) / 2\n            },\n            grid: false,\n            theme: \"dark\",\n        };\n        if (tf_params.tf_tour_min_price != 0 && tf_params.tf_tour_max_price != 0) {\n            $('.tf-tour-filter-range').alRangeSlider(tf_tour_range_options);\n        }\n\n        // Tours Min and Max Range in Search Result\n        let tf_tours_search_range = {\n            range: {\n                min: parseInt(tf_params.tf_tour_min_price),\n                max: parseInt(tf_params.tf_tour_max_price),\n                step: 1\n            },\n            initialSelectedValues: {\n                from: tf_search_page_params.get('from') ? tf_search_page_params.get('from') : parseInt(tf_params.tf_tour_min_price),\n                to: tf_search_page_params.get('to') ? tf_search_page_params.get('to') : parseInt(tf_params.tf_tour_max_price) / 2\n            },\n            grid: false,\n            theme: \"dark\",\n            onFinish: function () {\n                makeFilter();\n            }\n        };\n        if (tf_params.tf_tour_min_price != 0 && tf_params.tf_tour_max_price != 0) {\n            $('.tf-tour-result-price-range').alRangeSlider(tf_tours_search_range);\n        }\n\n        /**\n         * Apartment Min and Max Range Filtering\n         * @author Jahid\n        */\n        let tf_apartment_search_range = {\n            range: {\n                min: parseInt(tf_params.tf_apartment_min_price),\n                max: parseInt(tf_params.tf_apartment_max_price),\n                step: 1\n            },\n            initialSelectedValues: {\n                from: tf_search_page_params.get('from') ? tf_search_page_params.get('from') : parseInt(tf_params.tf_apartment_min_price),\n                to: tf_search_page_params.get('to') ? tf_search_page_params.get('to') : parseInt(tf_params.tf_apartment_max_price) / 2\n            },\n            grid: false,\n            theme: \"dark\",\n            onFinish: function () {\n                makeFilter();\n            }\n        };\n        if (tf_params.tf_apartment_min_price != 0 && tf_params.tf_apartment_max_price != 0) {\n            $('.tf-apartment-result-price-range').alRangeSlider(tf_apartment_search_range);\n        }\n\n        /*\n        * Without Payment Booking\n        * @since 2.9.26\n        * @author Jahid\n        */\n        let tf_hasErrorsFlag = false;\n        $(document).on('click', '.tf-traveller-error', function (e) {\n            let hasErrors = [];\n            let $this = $(this).closest('.tf-withoutpayment-booking');\n            $('.error-text').text(\"\");\n            $this.find('.tf-single-travel').each(function () {\n                $(this).find('input, select').each(function () {\n                    if ($(this).attr('data-required')) {\n                        if ($(this).val() == \"\") {\n                            hasErrors.push(true);\n                            const errorContainer = $(this).siblings('.error-text');\n                            errorContainer.text('This field is required.');\n                            if (errorContainer.text() !== '') {\n                                errorContainer.addClass('error-visible');\n                            } else {\n                                errorContainer.removeClass('error-visible');\n                            }\n                        }\n                    }\n                });\n                $(this).find('input[type=\"radio\"], input[type=\"checkbox\"]').each(function () {\n                    if ($(this).attr('data-required')) {\n                        const radioName = $(this).attr('name');\n                        const isChecked = $('input[name=\"' + radioName + '\"]:checked').length > 0;\n\n                        if (!isChecked) {\n                            hasErrors.push(true);\n                            const errorContainer = $(this).parent().siblings('.error-text');\n                            errorContainer.text('This field is required.');\n                            if (errorContainer.text() !== '') {\n                                errorContainer.addClass('error-visible');\n                            } else {\n                                errorContainer.removeClass('error-visible');\n                            }\n                        }\n                    }\n                });\n\n            });\n            if (hasErrors.includes(true)) {\n                tf_hasErrorsFlag = true;\n                return false;\n            }\n            tf_hasErrorsFlag = false;\n        });\n\n        // Booking Confirmation Form Validation\n        $(document).on('click', '.tf-book-confirm-error', function (e) {\n            let hasErrors = [];\n            let $this = $(this).closest('.tf-withoutpayment-booking');\n            $('.error-text').text(\"\");\n            $this.find('.tf-confirm-fields').each(function () {\n                $(this).find('input, select').each(function () {\n                    if ($(this).attr('data-required')) {\n                        if ($(this).val() == \"\") {\n                            hasErrors.push(true);\n                            const errorContainer = $(this).siblings('.error-text');\n                            errorContainer.text('This field is required.');\n                            if (errorContainer.text() !== '') {\n                                errorContainer.addClass('error-visible');\n                            } else {\n                                errorContainer.removeClass('error-visible');\n                            }\n                        }\n                    }\n                });\n                $(this).find('input[type=\"radio\"], input[type=\"checkbox\"]').each(function () {\n                    if ($(this).attr('data-required')) {\n                        const radioName = $(this).attr('name');\n                        const isChecked = $('input[name=\"' + radioName + '\"]:checked').length > 0;\n\n                        if (!isChecked) {\n                            hasErrors.push(true);\n                            const errorContainer = $(this).parent().siblings('.error-text');\n                            errorContainer.text('This field is required.');\n                            if (errorContainer.text() !== '') {\n                                errorContainer.addClass('error-visible');\n                            } else {\n                                errorContainer.removeClass('error-visible');\n                            }\n                        }\n                    }\n                });\n            });\n            if (hasErrors.includes(true)) {\n                tf_hasErrorsFlag = true;\n                return false;\n            }\n        });\n\n        // Navigation Next\n        $(document).on('click', '.tf-tabs-control', function (e) {\n            e.preventDefault();\n            if (tf_hasErrorsFlag) {\n                return false;\n            }\n            let step = $(this).attr(\"data-step\");\n            if (step > 1) {\n                for (let i = 1; i <= step; i++) {\n                    $('.tf-booking-step-' + i).removeClass(\"active\");\n                    $('.tf-booking-step-' + i).addClass(\"done\");\n                }\n                $('.tf-booking-step-' + step).addClass(\"active\");\n                $('.tf-booking-content').hide();\n                $('.tf-booking-content-' + step).fadeIn(300);\n\n                $('.tf-control-pagination').hide();\n                $('.tf-pagination-content-' + step).fadeIn(300);\n            }\n        });\n\n        // Navigation Back\n        $(document).on('click', '.tf-step-back', function (e) {\n            e.preventDefault();\n            let step = $(this).attr(\"data-step\");\n            if (step == 1) {\n                $('.tf-booking-step').removeClass(\"active\");\n                $('.tf-booking-step').removeClass(\"done\");\n                $('.tf-booking-step-' + step).addClass(\"active\");\n                $('.tf-booking-content').hide();\n                $('.tf-booking-content-' + step).fadeIn(300);\n\n                $('.tf-control-pagination').hide();\n                $('.tf-pagination-content-' + step).fadeIn(300);\n            }\n            if (step > 1) {\n                let next_step = parseInt(step) + 1;\n                $('.tf-booking-step-' + next_step).removeClass(\"active\");\n                $('.tf-booking-step-' + step).addClass(\"active\");\n                $('.tf-booking-step-' + step).removeClass(\"done\");\n                $('.tf-booking-step-' + next_step).removeClass(\"done\");\n\n                $('.tf-booking-content').hide();\n                $('.tf-booking-content-' + step).fadeIn(300);\n                $('.tf-control-pagination').hide();\n                $('.tf-pagination-content-' + step).fadeIn(300);\n            }\n        });\n\n        // Popup Open\n        const tourPopupBooking = () => {\n            var $this = $(this);\n            let check_in_date = $('#check-in-out-date').val();\n            let adults = $('#adults').val();\n            let children = $('#children').val();\n            let infant = $('#infant').val();\n            let post_id = $('input[name=post_id]').val();\n            let check_in_time = $('select[name=check-in-time] option').filter(':selected').val();\n            var deposit = $('input[name=deposit]').is(':checked');\n            var extras = [];\n            var quantity = [];\n\n            $('.tour-extra-single').each(function(e) {\n                 let $this = $(this);\n                 \n                 if($this.find('input[name=\"tf-tour-extra\"]').is(':checked')){\n\n                    let tour_extras = $this.find('input[name=\"tf-tour-extra\"]').val();\n                     extras.push(tour_extras);\n\n                    if($this.find('.tf_quantity-acrselection').hasClass('quantity-active')){\n                        let qty = $this.find('input[name=\"extra-quantity\"]').val();\n\n                        quantity.push(qty)\n                    }else{\n                        quantity.push(1)\n                    } \n                }   \n            })\n\n            var extras = extras.join();\n            var quantities = quantity.join();\n            var data = {\n                action: 'tf_tour_booking_popup',\n                _nonce: tf_params.nonce,\n                post_id: post_id,\n                adults: adults,\n                children: children,\n                infant: infant,\n                check_in_date: check_in_date,\n                check_in_time: check_in_time,\n                tour_extra: extras,\n                tour_extra_quantity : quantities, \n                deposit: deposit\n            };\n\n            $.ajax({\n                type: 'post',\n                url: tf_params.ajax_url,\n                data: data,\n                beforeSend: function (data) {\n                    $('#tour_room_details_loader').show();\n                },\n                complete: function (data) {\n                    $this.unblock();\n                },\n                success: function (data) {\n                    $this.unblock();\n\n                    var response = JSON.parse(data);\n\n                    if (response.status == 'error') {\n\n                        $('#tour_room_details_loader').hide();\n                        if (response.errors) {\n                            response.errors.forEach(function (text) {\n                                notyf.error(text);\n                            });\n                        }\n\n                        return false;\n                    } else {\n                        $('#tour_room_details_loader').hide();\n                        if ($('.tf-traveller-info-box').length > 0) {\n                            if ($(\".tf-traveller-info-box\").html().trim() == \"\") {\n                                $('.tf-traveller-info-box').html(response.traveller_info);\n                            } else {\n                                $('.tf-traveller-info-box').html(response.traveller_info);\n                            }\n                        }\n                        if ($('.tf-booking-traveller-info').length > 0) {\n                            $('.tf-booking-traveller-info').html(response.traveller_summery);\n                        }\n                        $('.tf-withoutpayment-booking').addClass('show');\n                    }\n                },\n                error: function (data) {\n                    console.log(data);\n                },\n\n            });\n        }\n        $(document).on('click', '.tf-booking-popup-btn', function (e) {\n            e.preventDefault();\n            $(\".tf-withoutpayment-booking input[type='text'], .tf-withoutpayment-booking input[type='email'], .tf-withoutpayment-booking input[type='date'], .tf-withoutpayment-booking select, .tf-withoutpayment-booking textarea\").val(\"\");\n\n            $('.tf-booking-content-extra input[type=\"checkbox\"]').each(function () {\n                if ($(this).prop('checked') == true) {\n                    $(this).prop('checked', false);\n                }\n            });\n            tourPopupBooking();\n        });\n\n        $(document).on('change', '[name*=tf-tour-extra], input[name=\"extra-quantity\"]', function () {\n            tourPopupBooking();\n        });\n        $(document).on('change', '[name=deposit]', function () {\n            tourPopupBooking();\n        });\n\n        // Popup Close\n        $(document).on('click', '.tf-booking-times span', function (e) {\n            $('.tf-withoutpayment-booking').removeClass('show');\n            $('.tf-withoutpayment-booking-confirm').removeClass('show');\n            // Reset Tabs\n            $(\".tf-booking-tab-menu ul li\").removeClass(\"active\");\n            $(\".tf-booking-tab-menu ul li\").removeClass(\"done\");\n            $(\".tf-booking-tab-menu ul li:first-child\").addClass(\"active\");\n            // Reset Content\n            $(\".tf-booking-content\").hide();\n            $(\".tf-booking-content:first\").show();\n            // Reset Pagination\n            $(\".tf-control-pagination\").hide();\n            $(\".tf-control-pagination:first\").show();\n        });\n\n        /*\n        * Custom modal\n        * @author: Foysal\n        */\n        $(document).on('click', '.tf-modal-btn', function () {\n            var dataTarget = $(this).attr('data-target');\n            $(dataTarget).addClass('tf-modal-show');\n            $('body').addClass('tf-modal-open');\n        });\n        $(document).on(\"click\", '.tf-modal-close', function () {\n            $('.tf-modal').removeClass('tf-modal-show');\n            $('body').removeClass('tf-modal-open');\n        });\n        $(document).on(\"click\", function (event) {\n            if (!$(event.target).closest(\".tf-modal-content,.tf-modal-btn\").length) {\n                $(\"body\").removeClass(\"tf-modal-open\");\n                $(\".tf-modal\").removeClass(\"tf-modal-show\");\n            }\n        });\n\n        /**\n         * Hotel Details Popup\n         *\n         */\n        $(document).on('click', '.tf-room-detail-qv', function (e) {\n            e.preventDefault();\n            $(\"#tour_room_details_loader\").show();\n            var post_id = $(this).attr(\"data-hotel\");\n            var uniqid_id = $(this).attr(\"data-uniqid\");\n            var data = {\n                action: 'tf_tour_details_qv',\n                _nonce: tf_params.nonce,\n                post_id: post_id,\n                uniqid_id: uniqid_id\n            };\n\n            $.ajax({\n                type: 'post',\n                url: tf_params.ajax_url,\n                data: data,\n                success: function (response) {\n                    $(\"#tour_room_details_qv\").html(response);\n\n                    $(\"#tour_room_details_loader\").hide();\n                    $.fancybox.open({\n                        src: '#tour_room_details_qv',\n                        type: 'inline',\n                    });\n                }\n\n            });\n        });\n\n        /**\n         * Design 2 Hotel Details Popup\n         *\n         */\n        $(document).on('click', '.tf-room-detail-popup', function (e) {\n            e.preventDefault();\n            $(\"#tour_room_details_loader\").show();\n            var post_id = $(this).attr(\"data-hotel\");\n            var uniqid_id = $(this).attr(\"data-uniqid\");\n            var data = {\n                action: 'tf_tour_details_qv',\n                _nonce: tf_params.nonce,\n                post_id: post_id,\n                uniqid_id: uniqid_id\n            };\n\n            $.ajax({\n                type: 'post',\n                url: tf_params.ajax_url,\n                data: data,\n                success: function (response) {\n                    $(\".tf-room-popup\").html(response);\n                    $(\".tf-room-popup\").addClass(\"tf-show\")\n                    $(\"#tour_room_details_loader\").hide();\n\n                }\n\n            });\n        });\n\n        // Design 2 Toggle share buttons\n        $('.tf-template-3 .tf-share-toggle').on(\"click\", function (e) {\n            e.preventDefault();\n            $('.tf-share-toggle').toggleClass('actives');\n            $('.tf-off-canvas-share').toggleClass('show');\n        });\n\n        // Design 2 Wishlist buttons\n        $('.tf-template-3 .add-wishlist').on(\"click\", function (e) {\n            e.preventDefault();\n            $(this).parents().find('.tf-wishlist-box').addClass('actives');\n        });\n        $('.tf-template-3 .remove-wishlist').on(\"click\", function (e) {\n            e.preventDefault();\n            $(this).parents().find('.tf-wishlist-box').removeClass('actives');\n        });\n\n        // Copy button\n        $('a#share_link_button').on(\"click\", function (e) {\n            e.preventDefault();\n            $(this).addClass('copied');\n            setTimeout(function () {\n                $('a#share_link_button').removeClass('copied');\n            }, 3000);\n            $(this).parent().find(\"#share_link_input\").select();\n            document.execCommand(\"copy\");\n        });\n\n    });\n\n    /*\n    * Template 2 Script Start\n    * @author: Jahid\n    */\n\n    $(document).ready(function () {\n\n        $('.tf-template-3 .tf-reviews-slider').slick({\n            infinite: true,\n            slidesToShow: 3,\n            slidesToScroll: 3,\n            prevArrow: '<button class=\"slide-arrow prev-arrow\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"49\" height=\"24\" viewBox=\"0 0 49 24\" fill=\"none\"><path d=\"M8.32843 11.0009H44.5V13.0009H8.32843L13.6924 18.3648L12.2782 19.779L4.5 12.0009L12.2782 4.22266L13.6924 5.63687L8.32843 11.0009Z\" fill=\"#B58E53\"/></svg></button>',\n            nextArrow: '<button class=\"slide-arrow next-arrow\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"49\" height=\"24\" viewBox=\"0 0 49 24\" fill=\"none\"><path d=\"M40.6716 11.0009H4.5V13.0009H40.6716L35.3076 18.3648L36.7218 19.779L44.5 12.0009L36.7218 4.22266L35.3076 5.63687L40.6716 11.0009Z\" fill=\"#B58E53\"/></svg></button>',\n            responsive: [\n                {\n                  breakpoint: 993,\n                  settings: {\n                    slidesToShow: 1,\n                    slidesToScroll: 1,\n                  }\n                }\n              ]\n        });\n\n        $(\".tf-template-3 .tf-question\").on(\"click\", function(){\n            var $this = $(this);\n            if (!$this.hasClass(\"tf-active\")) {\n                $(this).siblings().removeClass(\"tf-active\");\n                $(this).siblings().find('.tf-question-desc').slideUp();\n                $(this).parents(\".tf-questions-col\").siblings().find('.tf-question').removeClass(\"tf-active\");\n                $(this).parents(\".tf-questions-col\").siblings().find('.tf-question-desc').slideUp();\n            }\n            $(this).toggleClass(\"tf-active\");\n            $(this).find('.tf-question-desc').slideToggle();\n        });\n\n        $(\".tf-template-3 .tf-hero-hotel.tf-popup-buttons\").on(\"click\", function(e){\n            e.preventDefault();\n            $(\"#tour_room_details_loader\").show();\n            setTimeout(function() {\n                $(\"#tour_room_details_loader\").hide();\n                $(\".tf-hotel-popup\").addClass(\"tf-show\");\n            }, 1000);\n        });\n\n        $(document).on('click', '.tf-template-3 .tf-popup-close', function () {\n            $(\".tf-popup-wrapper\").removeClass(\"tf-show\")\n        });\n    \n        $(document).on('click', function (event) {\n            if (!$(event.target).closest(\".tf-popup-wrapper .tf-popup-inner\").length) {\n                $(\".tf-popup-wrapper\").removeClass('tf-show');\n            }\n        });\n\n        $('.tf-template-3 .tf-details-menu a').on('click', function() {\n            $(this).addClass('tf-hashlink');\n            $(this).closest('li').siblings().find('a').removeClass('tf-hashlink');\n        });\n\n        //Room Filter Showing \n        $('.tf-template-3 .tf-available-rooms-head .tf-filter').on('click', function() {\n            $('.tf-room-filter').toggleClass('tf-filter-show');\n        });\n\n        //Archive Filter Showing\n        $('.tf-template-3 .tf-archive-filter-showing').on('click', function() {\n            $('.tf-archive-right').toggleClass('tf-filter-show');\n        });\n\n        //Search Form Showing\n        $('.tf-template-3 .tf-modify-search-btn').on('click', function() {\n            $('.tf-booking-form-wrapper').slideDown(300);\n            $('.tf-template-3 .tf-modify-search-btn').slideUp(300);\n        });\n\n        // Full Description Showing\n        $('.tf-template-3 span.tf-see-description').on('click', function() {\n            $('.tf-short-description').slideUp();\n            $('.tf-full-description').slideDown();\n        });\n\n        // See Less Description Showing\n        $('.tf-template-3 span.tf-see-less-description').on('click', function() {\n            $('.tf-full-description').slideUp();\n            $('.tf-short-description').slideDown();\n        });\n\n        $('.tf-template-3 .acr-inc , .tf-template-3 .acr-dec').on('click', function() {\n\n            if ($('input#infant').length){\n            var guest = Number( $('input#adults').val() ? $('input#adults').val() : 0 ) + Number( $('input#children').val() ? $('input#children').val() : 0 ) + Number( $('input#infant').val() ? $('input#infant').val() : 0 ) ;\n            }else{\n                var guest = Number( $('input#adults').val() ? $('input#adults').val() : 0 ) + Number( $('input#children').val() ? $('input#children').val() : 0 );\n            }\n            if (guest.toString().length < 2) {\n                guest = '0' + guest;\n            }\n            $('span.tf-guest').html(guest);\n            var room = Number($('input#room').val()) ;\n            if (room.toString().length < 2) {\n                room = '0' + room;\n            }\n            $('span.tf-room').html(room);\n        })\n\n        $(document).ready(function() {\n            if ($('input#infant').length){\n                var guest = Number( $('input#adults').val() ? $('input#adults').val() : 0 ) + Number( $('input#children').val() ? $('input#children').val() : 0 ) + Number( $('input#infant').val() ? $('input#infant').val() : 0 ) ;\n            }else{\n                var guest = Number( $('input#adults').val() ? $('input#adults').val() : 0 ) + Number( $('input#children').val() ? $('input#children').val() : 0 );\n            }\n\n            if (guest.toString().length < 2) {\n                guest = '0' + guest;\n            }\n            \n            $('span.tf-guest').html(guest);\n        })\n\n        $(document).on(\"mouseup\", function(e)\n        {\n            var container = $(\".tf-template-3 .tf_acrselection-wrap\");\n            if (!container.is(e.target) && container.has(e.target).length === 0)\n            {\n                $(\".tf-template-3 .tf-booking-form-guest-and-room .tf_acrselection-wrap\").removeClass(\"tf-show\");\n            }\n        });\n        $(\".tf-template-3 .tf-booking-form-guest-and-room\").on(\"click\", function(){\n            $(\".tf-template-3 .tf-booking-form-guest-and-room .tf_acrselection-wrap\").addClass(\"tf-show\");\n        });\n\n        $(\".tf-template-3 .tf-review-open.button\").on(\"click\", function(){\n            $(\".tf-template-3 .tf-sitebar-widgets .tf-review-form-wrapper\").toggleClass(\"tf-review-show\");\n        });\n\n        /**\n         * Design 2 Archive Hotel Room Gallery & Archive Tour Gallery Popup\n         *\n         */\n        $(document).on('click', '.tf-hotel-room-popup', function (e) {\n            e.preventDefault();\n            $(\"#tour_room_details_loader\").show();\n            var post_id = $(this).attr(\"data-id\");\n            var post_type = $(this).attr(\"data-type\");\n            var data = {\n                action: 'tf_hotel_archive_popup_qv',\n                _nonce: tf_params.nonce,\n                post_id: post_id,\n                post_type: post_type\n            };\n\n            $.ajax({\n                type: 'post',\n                url: tf_params.ajax_url,\n                data: data,\n                success: function (response) {\n                    $(\".tf-popup-body\").html(response);\n                    $(\".tf-hotel-popup\").addClass(\"tf-show\")\n                    $(\"#tour_room_details_loader\").hide();\n\n                }\n            });\n        });\n\n    });\n\n    /*\n    * Template 2 Script End\n    * @author: Jahid\n    */\n\n})(jQuery, window);\n\n/**\n * Horizontal Search Form Tab Control\n */\nfunction tfOpenForm(evt, formName) {\n    var i, tabcontent, tablinks;\n    tabcontent = document.getElementsByClassName(\"tf-tabcontent\");\n    for (i = 0; i < tabcontent.length; i++) {\n        tabcontent[i].style.display = \"none\";\n    }\n    tablinks = document.getElementsByClassName(\"tf-tablinks\");\n    for (i = 0; i < tablinks.length; i++) {\n        tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\n    }\n    document.getElementById(formName).style.display = \"block\";\n    document.getElementById(formName).style.transition = \"all 0.2s\";\n    evt.target.className += \" active\";\n}\n\n/**\n * Show review form on popup\n */\nfunction tf_load_rating() {\n    jQuery('#commentform').show();\n}\n\n//# sourceURL=webpack://tourfic/./sass/app/js/free/tourfic.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_modules__["./sass/app/js/free/apartment.js"]();
/******/ 	__webpack_modules__["./sass/app/js/free/car.js"]();
/******/ 	__webpack_modules__["./sass/app/js/free/hotel.js"]();
/******/ 	__webpack_modules__["./sass/app/js/free/tour.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./sass/app/js/free/tourfic.js"]();
/******/ 	
/******/ })()
;